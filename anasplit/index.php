<?php
header('Content-type:text/plain; charset=UTF-8');
/*
 * This PHP script is generated by CLARIN-DK's tool registration form
 * (http://localhost/texton/register). It should, with no or few adaptations
 * work out of the box as a dummy for your web service. The output returned
 * to the Text Tonsorium (CLARIN-DK's workflow manager) is just a listing of
 * the HTTP parameters received by this web service from the Text Tonsorium,
 * and not the output proper. For that you have to add your code to this script
 * and deactivate the dummy functionality. (The comments near the end of this
 * script explain how that is done.)
 *
 * Places in this script that require your attention are marked 'TODO'.
 */
/*
ToolID         : anasplit
PassWord       : 
Version        : 0.1
Title          : Anno-splitter
Path in URL    : anasplit	*** TODO make sure your web service listens on this path and that this script is readable for the webserver. ***
Publisher      : CST
ContentProvider: CST
Creator        : Bart Jongejan
InfoAbout      : -
Description    : Takes TEI P5 document containing multiple stand-off annotation groups (spanGrp). Outputs one of the annotation groups.
ExternalURI    : 
RestAPIkey         : 
RestAPIpassword    : 
MultiInp       : 
PostData       : 
Inactive       : 
*/

/*******************
* helper functions *
*******************/
$toollog = '../log/anasplit.log'; /* Used by the logit() function. TODO make sure the folder exists and is writable. Adapt if needed */

/*  TODO Set $dodelete to false if temporary files in /tmp should not be deleted before returning. */
$dodelete = true;
$tobedeleted = array();

function loginit()  /* Wipes the contents of the log file! TODO Change this behaviour if needed. */
    {
    global $toollog,$ftemp;
    $ftemp = fopen($toollog,'w');
    if($ftemp)
        {
        fwrite($ftemp,$toollog . "\n");
        fclose($ftemp);
        }
    }

function logit($str) /* TODO You can use this function to write strings to the log file. */
    {
    global $toollog,$ftemp;
    $ftemp = fopen($toollog,'a');
    if($ftemp)
        {
        fwrite($ftemp,$str . "\n");
        fclose($ftemp);
        }
    }

function scripinit($inputF,$input,$output)  /* Initialises outputfile. */
    {
    global $fscrip, $anasplitfile;
    $fscrip = fopen($anasplitfile,'w');
    if($fscrip)
        {
        fwrite($fscrip,"/*\n");
        fwrite($fscrip," * ToolID           : anasplit\n");
        fwrite($fscrip," * Version          : 0.1\n");
        fwrite($fscrip," * Title            : Anno-splitter\n");
        fwrite($fscrip," * ServiceURL       : http://localhost/anasplit\n");
        fwrite($fscrip," * Publisher        : CST\n");
        fwrite($fscrip," * ContentProvider  : CST\n");
        fwrite($fscrip," * Creator          : Bart Jongejan\n");
        fwrite($fscrip," * InfoAbout        : -\n");
        fwrite($fscrip," * Description      : Takes TEI P5 document containing multiple stand-off annotation groups (spanGrp). Outputs one of the annotation groups.\n");
        fwrite($fscrip," * ExternalURI      : \n");
        fwrite($fscrip," * inputF " . $inputF . "\n");
        fwrite($fscrip," * input  " . $input  . "\n");
        fwrite($fscrip," * output " . $output . "\n");
        fwrite($fscrip," */\n");
        fwrite($fscrip,"\ncd " . getcwd() . "\n");
        fclose($fscrip);
        }
    }

function scrip($str) /* TODO send comments and command line instructions. Don't forget to terminate string with new line character, if needed.*/
    {
    global $fscrip, $anasplitfile;
    $fscrip = fopen($anasplitfile,'a');
    if($fscrip)
        {
        fwrite($fscrip,$str . "\n");
        fclose($fscrip);
        }
    }

class SystemExit extends Exception {}
try {
    function hasArgument ($parameterName)
        {
        return isset($_REQUEST["$parameterName"]);
        }

    function getArgument ($parameterName)
        {
        return isset($_REQUEST["$parameterName"]) ? $_REQUEST["$parameterName"] : "";
        }

    function existsArgumentWithValue ($parameterName, $parameterValue)
        {
        /* Check whether there is an argument <parameterName> that has value
           <parameterValue>.
           There may be any number of arguments with name <parameterName> !
        */
        $query  = explode('&', $_SERVER['QUERY_STRING']);

        foreach( $query as $param )
            {
            list($name, $value) = explode('=', $param);
            if($parameterName === urldecode($name) && $parameterValue === urldecode($value))
                return true;
            }
        return false;
        }

    function tempFileName($suff) /* TODO Use this to create temporary files, if needed. */
        {
        global $dodelete;
        global $tobedeleted;
        $tmpno = tempnam('/tmp', $suff);
        if($dodelete)
            $tobedeleted[$tmpno] = true;
        return $tmpno;
        }

    function requestFile($requestParm) // e.g. "IfacettokF"
        {
        logit("requestFile({$requestParm})");

        if(isset($_REQUEST[$requestParm]))
            {
            $urlbase = isset($_REQUEST["base"]) ? $_REQUEST["base"] : "http://localhost/toolsdata/";

            $item = $_REQUEST[$requestParm];
            $url = $urlbase . urlencode($item);
            logit("requestParm:$requestParm");
            logit("urlbase:$urlbase");
            logit("item:$item");
            logit("url[$url]");

            $handle = fopen($url, "r");
            if($handle == false)
                {
                logit("Cannot open url[$url]");
                return "";
                }
            else
                {
                $tempfilename = tempFileName("anasplit_{$requestParm}_");
                $temp_fh = fopen($tempfilename, 'w');
                if($temp_fh == false)
                    {
                    fclose($handle);
                    logit("handle closed. Cannot open $tempfilename");
                    return "";
                    }
                else
                    {
                    while (!feof($handle))
                        {
                        $read = fread($handle, 8192);
                        fwrite($temp_fh, $read);
                        }
                    fclose($temp_fh);
                    fclose($handle);
                    return $tempfilename;
                    }
                }
            }
        logit("empty");
        return "";
        }

    function do_anasplit()
        {
        global $anasplitfile;
        global $dodelete;
        global $tobedeleted;
        global $mode;
/***************
* declarations *
***************/

/*
 * TODO Use the variables defined below to configure your tool for the right
 * input files and the right settings.
 * The input files are local files that your tool can open and close like any
 * other file.
 * If your tool needs to create temporary files, use the tempFileName()
 * function. It can mark the temporary files for deletion when the webservice
 * is done. (See the global dodelete variable.)
 */
        $base = "";	/* URL from where this web service downloads input. The generated script takes care of that, so you can ignore this variable. */
        $job = "";	/* Only used if this web service returns 201 and POSTs result later. In that case the uploaded file must have the name of the job. */
        $post2 = "";	/* Only used if this web service returns 201 and POSTs result later. In that case the uploaded file must be posted to this URL. */
        $mode = "";	/* If the value is 'dry', the wrapper is expected to return a script of what will be done if the value is not 'dry', but 'run'. */
        $inputF = "";	/* List of all input files. */
        $input = "";	/* List of all input features. */
        $output = "";	/* List of all output features. */
        $echos = "";	/* List arguments and their actual values. For sanity check of this generated script. All references to this variable can be removed once your web service is working as intended. */
        $F = "";	/* Input (ONLY used if there is exactly ONE input to this workflow step) */
        $IfacetlemF = "";	/* Input with annotationstype lemmas (lemmaer) */
        $IfacetnerF = "";	/* Input with annotationstype name entities (navne) */
        $IfacetposF = "";	/* Input with annotationstype PoS-tags (PoS-tags) */
        $IfacetsegF = "";	/* Input with annotationstype segments (sætningssegmenter) */
        $IfacetsentF = "";	/* Input with annotationstype sentences (sætninger, før tokenisering) */
        $IfacetsntF = "";	/* Input with annotationstype sentiment */
        $IfacetstcF = "";	/* Input with annotationstype syntax (constituency relations) (syntaks (frasestruktur)) */
        $IfacetstxF = "";	/* Input with annotationstype syntax (dependency structure) (syntaks (dependensstruktur)) */
        $IfacettokF = "";	/* Input with annotationstype tokens (tokens) */
        $Ifacet_lem_mrf_pos_stx = false;	/* Annotationstype in input is lemmas (lemmaer) and morphological features (morfologiske træk) and PoS-tags (PoS-tags) and syntax (dependency structure) (syntaks (dependensstruktur)) if true */
        $Ifacet_mrf_pos = false;	/* Annotationstype in input is morphological features (morfologiske træk) and PoS-tags (PoS-tags) if true */
        $Ifacetlem = false;	/* Annotationstype in input is lemmas (lemmaer) if true */
        $Ifacetner = false;	/* Annotationstype in input is name entities (navne) if true */
        $Ifacetpos = false;	/* Annotationstype in input is PoS-tags (PoS-tags) if true */
        $Ifacetseg = false;	/* Annotationstype in input is segments (sætningssegmenter) if true */
        $Ifacetsent = false;	/* Annotationstype in input is sentences (sætninger, før tokenisering) if true */
        $Ifacetsnt = false;	/* Annotationstype in input is sentiment if true */
        $Ifacetstc = false;	/* Annotationstype in input is syntax (constituency relations) (syntaks (frasestruktur)) if true */
        $Ifacetstx = false;	/* Annotationstype in input is syntax (dependency structure) (syntaks (dependensstruktur)) if true */
        $Ifacettok = false;	/* Annotationstype in input is tokens (tokens) if true */
        $Iformatteip5 = false;	/* Format in input is TEIP5 if true */
        $Ofacetlem = false;	/* Annotationstype in output is lemmas (lemmaer) if true */
        $Ofacetmrf = false;	/* Annotationstype in output is morphological features (morfologiske træk) if true */
        $Ofacetner = false;	/* Annotationstype in output is name entities (navne) if true */
        $Ofacetpos = false;	/* Annotationstype in output is PoS-tags (PoS-tags) if true */
        $Ofacetseg = false;	/* Annotationstype in output is segments (sætningssegmenter) if true */
        $Ofacetsent = false;	/* Annotationstype in output is sentences (sætninger, før tokenisering) if true */
        $Ofacetsnt = false;	/* Annotationstype in output is sentiment if true */
        $Ofacetstc = false;	/* Annotationstype in output is syntax (constituency relations) (syntaks (frasestruktur)) if true */
        $Ofacetstx = false;	/* Annotationstype in output is syntax (dependency structure) (syntaks (dependensstruktur)) if true */
        $Ofacettok = false;	/* Annotationstype in output is tokens (tokens) if true */
        $Oformatteip5 = false;	/* Format in output is TEIP5 if true */

        if( hasArgument("base") )
            {
            $base = getArgument("base");
            }
        if( hasArgument("job") )
            {
            $job = getArgument("job");
            }
        if( hasArgument("post2") )
            {
            $post2 = getArgument("post2");
            }
        if( hasArgument("mode") )
            {
            $mode = getArgument("mode");
            }
        $echos = "base=$base job=$job post2=$post2 mode=$mode ";

/*********
* input  *
*********/
        if( hasArgument("F") )
            {
            $F = requestFile("F");
            if($F === '')
                {
                header("HTTP/1.0 404 Input not found (F parameter). ");
                return;
                }
            $echos = $echos . "F=$F ";
            $inputF = $inputF . " \$F ";
            }
        if( hasArgument("IfacetlemF") )
            {
            $IfacetlemF = requestFile("IfacetlemF");
            if($IfacetlemF === '')
                {
                header("HTTP/1.0 404 Input with annotationstype 'lemmas (lemmaer)' not found (IfacetlemF parameter). ");
                return;
                }
            $echos = $echos . "IfacetlemF=$IfacetlemF ";
            $inputF = $inputF . " \$IfacetlemF ";
            }
        if( hasArgument("IfacetnerF") )
            {
            $IfacetnerF = requestFile("IfacetnerF");
            if($IfacetnerF === '')
                {
                header("HTTP/1.0 404 Input with annotationstype 'name entities (navne)' not found (IfacetnerF parameter). ");
                return;
                }
            $echos = $echos . "IfacetnerF=$IfacetnerF ";
            $inputF = $inputF . " \$IfacetnerF ";
            }
        if( hasArgument("IfacetposF") )
            {
            $IfacetposF = requestFile("IfacetposF");
            if($IfacetposF === '')
                {
                header("HTTP/1.0 404 Input with annotationstype 'PoS-tags (PoS-tags)' not found (IfacetposF parameter). ");
                return;
                }
            $echos = $echos . "IfacetposF=$IfacetposF ";
            $inputF = $inputF . " \$IfacetposF ";
            }
        if( hasArgument("IfacetsegF") )
            {
            $IfacetsegF = requestFile("IfacetsegF");
            if($IfacetsegF === '')
                {
                header("HTTP/1.0 404 Input with annotationstype 'segments (sætningssegmenter)' not found (IfacetsegF parameter). ");
                return;
                }
            $echos = $echos . "IfacetsegF=$IfacetsegF ";
            $inputF = $inputF . " \$IfacetsegF ";
            }
        if( hasArgument("IfacetsentF") )
            {
            $IfacetsentF = requestFile("IfacetsentF");
            if($IfacetsentF === '')
                {
                header("HTTP/1.0 404 Input with annotationstype 'sentences (sætninger, før tokenisering)' not found (IfacetsentF parameter). ");
                return;
                }
            $echos = $echos . "IfacetsentF=$IfacetsentF ";
            $inputF = $inputF . " \$IfacetsentF ";
            }
        if( hasArgument("IfacetsntF") )
            {
            $IfacetsntF = requestFile("IfacetsntF");
            if($IfacetsntF === '')
                {
                header("HTTP/1.0 404 Input with annotationstype 'sentiment' not found (IfacetsntF parameter). ");
                return;
                }
            $echos = $echos . "IfacetsntF=$IfacetsntF ";
            $inputF = $inputF . " \$IfacetsntF ";
            }
        if( hasArgument("IfacetstcF") )
            {
            $IfacetstcF = requestFile("IfacetstcF");
            if($IfacetstcF === '')
                {
                header("HTTP/1.0 404 Input with annotationstype 'syntax (constituency relations) (syntaks (frasestruktur))' not found (IfacetstcF parameter). ");
                return;
                }
            $echos = $echos . "IfacetstcF=$IfacetstcF ";
            $inputF = $inputF . " \$IfacetstcF ";
            }
        if( hasArgument("IfacetstxF") )
            {
            $IfacetstxF = requestFile("IfacetstxF");
            if($IfacetstxF === '')
                {
                header("HTTP/1.0 404 Input with annotationstype 'syntax (dependency structure) (syntaks (dependensstruktur))' not found (IfacetstxF parameter). ");
                return;
                }
            $echos = $echos . "IfacetstxF=$IfacetstxF ";
            $inputF = $inputF . " \$IfacetstxF ";
            }
        if( hasArgument("IfacettokF") )
            {
            $IfacettokF = requestFile("IfacettokF");
            if($IfacettokF === '')
                {
                header("HTTP/1.0 404 Input with annotationstype 'tokens (tokens)' not found (IfacettokF parameter). ");
                return;
                }
            $echos = $echos . "IfacettokF=$IfacettokF ";
            $inputF = $inputF . " \$IfacettokF ";
            }

/************************
* input/output features *
************************/
        if( hasArgument("Ifacet") )
            {
            $Ifacet_lem_mrf_pos_stx = existsArgumentWithValue("Ifacet", "_lem_mrf_pos_stx");
            $Ifacet_mrf_pos = existsArgumentWithValue("Ifacet", "_mrf_pos");
            $Ifacetlem = existsArgumentWithValue("Ifacet", "lem");
            $Ifacetner = existsArgumentWithValue("Ifacet", "ner");
            $Ifacetpos = existsArgumentWithValue("Ifacet", "pos");
            $Ifacetseg = existsArgumentWithValue("Ifacet", "seg");
            $Ifacetsent = existsArgumentWithValue("Ifacet", "sent");
            $Ifacetsnt = existsArgumentWithValue("Ifacet", "snt");
            $Ifacetstc = existsArgumentWithValue("Ifacet", "stc");
            $Ifacetstx = existsArgumentWithValue("Ifacet", "stx");
            $Ifacettok = existsArgumentWithValue("Ifacet", "tok");
            $echos = $echos . "Ifacet_lem_mrf_pos_stx=$Ifacet_lem_mrf_pos_stx " . "Ifacet_mrf_pos=$Ifacet_mrf_pos " . "Ifacetlem=$Ifacetlem " . "Ifacetner=$Ifacetner " . "Ifacetpos=$Ifacetpos " . "Ifacetseg=$Ifacetseg " . "Ifacetsent=$Ifacetsent " . "Ifacetsnt=$Ifacetsnt " . "Ifacetstc=$Ifacetstc " . "Ifacetstx=$Ifacetstx " . "Ifacettok=$Ifacettok ";
            $input = $input . ($Ifacet_lem_mrf_pos_stx ? " \$Ifacet_lem_mrf_pos_stx" : "")  . ($Ifacet_mrf_pos ? " \$Ifacet_mrf_pos" : "")  . ($Ifacetlem ? " \$Ifacetlem" : "")  . ($Ifacetner ? " \$Ifacetner" : "")  . ($Ifacetpos ? " \$Ifacetpos" : "")  . ($Ifacetseg ? " \$Ifacetseg" : "")  . ($Ifacetsent ? " \$Ifacetsent" : "")  . ($Ifacetsnt ? " \$Ifacetsnt" : "")  . ($Ifacetstc ? " \$Ifacetstc" : "")  . ($Ifacetstx ? " \$Ifacetstx" : "")  . ($Ifacettok ? " \$Ifacettok" : "") ;
            }
        if( hasArgument("Iformat") )
            {
            $Iformatteip5 = existsArgumentWithValue("Iformat", "teip5");
            $echos = $echos . "Iformatteip5=$Iformatteip5 ";
            $input = $input . ($Iformatteip5 ? " \$Iformatteip5" : "") ;
            }
        if( hasArgument("Ofacet") )
            {
            $Ofacetlem = existsArgumentWithValue("Ofacet", "lem");
            $Ofacetmrf = existsArgumentWithValue("Ofacet", "mrf");
            $Ofacetner = existsArgumentWithValue("Ofacet", "ner");
            $Ofacetpos = existsArgumentWithValue("Ofacet", "pos");
            $Ofacetseg = existsArgumentWithValue("Ofacet", "seg");
            $Ofacetsent = existsArgumentWithValue("Ofacet", "sent");
            $Ofacetsnt = existsArgumentWithValue("Ofacet", "snt");
            $Ofacetstc = existsArgumentWithValue("Ofacet", "stc");
            $Ofacetstx = existsArgumentWithValue("Ofacet", "stx");
            $Ofacettok = existsArgumentWithValue("Ofacet", "tok");
            $echos = $echos . "Ofacetlem=$Ofacetlem " . "Ofacetmrf=$Ofacetmrf " . "Ofacetner=$Ofacetner " . "Ofacetpos=$Ofacetpos " . "Ofacetseg=$Ofacetseg " . "Ofacetsent=$Ofacetsent " . "Ofacetsnt=$Ofacetsnt " . "Ofacetstc=$Ofacetstc " . "Ofacetstx=$Ofacetstx " . "Ofacettok=$Ofacettok ";
            $output = $output . ($Ofacetlem ? " \$Ofacetlem" : "")  . ($Ofacetmrf ? " \$Ofacetmrf" : "")  . ($Ofacetner ? " \$Ofacetner" : "")  . ($Ofacetpos ? " \$Ofacetpos" : "")  . ($Ofacetseg ? " \$Ofacetseg" : "")  . ($Ofacetsent ? " \$Ofacetsent" : "")  . ($Ofacetsnt ? " \$Ofacetsnt" : "")  . ($Ofacetstc ? " \$Ofacetstc" : "")  . ($Ofacetstx ? " \$Ofacetstx" : "")  . ($Ofacettok ? " \$Ofacettok" : "") ;
            }
        if( hasArgument("Oformat") )
            {
            $Oformatteip5 = existsArgumentWithValue("Oformat", "teip5");
            $echos = $echos . "Oformatteip5=$Oformatteip5 ";
            $output = $output . ($Oformatteip5 ? " \$Oformatteip5" : "") ;
            }

/*******************************
* input/output features styles *
*******************************/

/* DUMMY CODE TO SANITY CHECK GENERATED SCRIPT (TODO Remove one of the two solidi from the beginning of this line to activate your own code)
        $anasplitfile = tempFileName("anasplit-results");
        $command = "echo $echos >> $anasplitfile";
        logit($command);

        if(($cmd = popen($command, "r")) == NULL)
            {
            throw new SystemExit(); // instead of exit()
            }

        while($read = fgets($cmd))
            {
            }

        pclose($cmd);
/*/
// YOUR CODE STARTS HERE.
//        TODO your code!
        $anasplitfile = tempFileName("anasplit-results");
        if($mode === 'dry')
            scripinit($inputF,$input,$output);
        if(hasArgument("Ofacet"))
            {
            if($Ofacetseg && $Ofacettok)
                $Ofacet = 'segtok';
            else
	            $Ofacet = getArgument("Ofacet");
	            
            if($mode === 'dry')
                {
                $command = "../bin/bracmat \"get'\\\"anasplit.bra\\\"\" \$F \$anasplitfile $Ofacet";
                scrip($command);
                }
            else
                {
                $command = "../bin/bracmat \"get'\\\"anasplit.bra\\\"\" $F $anasplitfile $Ofacet";
                logit($command);

                if(($cmd = popen($command, "r")) == NULL)
                    {
                    throw new SystemExit();
                    }

                while($read = fgets($cmd))
                    {
                    }

                pclose($cmd);
                }
            }

// YOUR CODE ENDS HERE. OUTPUT EXPECTED IN $anasplitfile
//*/
        $tmpf = fopen($anasplitfile,'r');

        if($tmpf)
            {
            //logit('output from anasplit:');
            while($line = fgets($tmpf))
                {
                //logit($line);
                print $line;
                }
            fclose($tmpf);
            }

        if($dodelete)
            {
            foreach ($tobedeleted as $filename => $dot)
                {
                if($dot)
                    unlink($filename);
                }
            unset($tobedeleted);
            }
        }
    loginit();
    do_anasplit();
    }
catch (SystemExit $e)
    {
    header('HTTP/1.0 404 An error occurred: ' . $ERROR);
    logit('An error occurred' . $ERROR);
    echo $ERROR;
    }
?>

