<?php
header('Content-type:text/plain; charset=UTF-8');
/*
 * This PHP script is generated by CLARIN-DK's tool registration form
 * (http://localhost/texton/register). It should, with no or few adaptations
 * work out of the box as a dummy for your web service. The output returned
 * to the Text Tonsorium (CLARIN-DK's workflow manager) is just a listing of
 * the HTTP parameters received by this web service from the Text Tonsorium,
 * and not the output proper. For that you have to add your code to this script
 * and deactivate the dummy functionality. (The comments near the end of this
 * script explain how that is done.)
 *
 * Places in this script that require your attention are marked 'TODO'.
 */
/*
ToolID         : mate-POS
PassWord       :
Version        : 3.3
Title          : Bohnet tagger
Path in URL    : mate-POStagger	*** TODO make sure your web service listens on this path and that this script is readable for the webserver. ***
Publisher      : mate-tools
ContentProvider: mate-tools
Creator        : Bernd Bohnet
InfoAbout      : https://code.google.com/p/mate-tools/
Description    : Part of Speech tagger that is distributed as part of mate-tools.
ExternalURI    :
XMLparms       :
PostData       :
Inactive       :
*/

/*******************
* helper functions *
*******************/
$toollog = '../log/matePOS.log'; /* Used by the logit() function. TODO make sure the folder exists and is writable. Adapt if needed */

/*  TODO Set $dodelete to false if temporary files in /tmp should not be deleted before returning. */
$dodelete = true;
$tobedeleted = array();


function loginit()  /* Wipes the contents of the log file! TODO Change this behaviour if needed. */
    {
    return;
    global $toollog,$ftemp;
    $ftemp = fopen($toollog,'w');
    if($ftemp)
        {
        fwrite($ftemp,$toollog . "\n");
        fclose($ftemp);
        }
    }

function logit($str) /* TODO You can use this function to write strings to the log file. */
    {
    return;
    global $toollog,$ftemp;
    $ftemp = fopen($toollog,'a');
    if($ftemp)
        {
        fwrite($ftemp,date("H:i:s") . "\t" . $str . "\n");
        fclose($ftemp);
        }
    }

function scripinit($inputF,$input,$output)  /* Initialises outputfile. */
    {
    global $fscrip, $matePOSfile;
    $fscrip = fopen($matePOSfile,'w');
    if($fscrip)
        {
        fwrite($fscrip,"/*\n");
        fwrite($fscrip," * ToolID           : mate-POS\n");
        fwrite($fscrip," * Version          : 3.3\n");
        fwrite($fscrip," * Title            : Bohnet tagger\n");
        fwrite($fscrip," * ServiceURL       : http://localhost/mate-POStagger\n");
        fwrite($fscrip," * Publisher        : mate-tools\n");
        fwrite($fscrip," * ContentProvider  : mate-tools\n");
        fwrite($fscrip," * Creator          : Bernd Bohnet\n");
        fwrite($fscrip," * InfoAbout        : https://code.google.com/p/mate-tools/\n");
        fwrite($fscrip," * Description      : Part of Speech tagger that is distributed as part of mate-tools.\n");
        fwrite($fscrip," * ExternalURI      : \n");
        fwrite($fscrip," * inputF " . $inputF . "\n");
        fwrite($fscrip," * input  " . $input  . "\n");
        fwrite($fscrip," * output " . $output . "\n");
        fwrite($fscrip," */\n");
        fwrite($fscrip,"\ncd " . getcwd() . "\n");
        fclose($fscrip);
        }
    }

function scrip($str) /* TODO send comments and command line instructions. Don't forget to terminate string with new line character, if needed.*/
    {
    global $fscrip, $matePOSfile;
    $fscrip = fopen($matePOSfile,'a');
    if($fscrip)
        {
        fwrite($fscrip,$str . "\n");
        fclose($fscrip);
        }
    }

class SystemExit extends Exception {}
try {
    function hasArgument ($parameterName)
        {
        return isset($_REQUEST["$parameterName"]);
        }

    function getArgument ($parameterName)
        {
        return isset($_REQUEST["$parameterName"]) ? $_REQUEST["$parameterName"] : "";
        }

    function existsArgumentWithValue ($parameterName, $parameterValue)
        {
        /* Check whether there is an argument <parameterName> that has value
           <parameterValue>.
           There may be any number of arguments with name <parameterName> !
        */
        $query  = explode('&', $_SERVER['QUERY_STRING']);

        foreach( $query as $param )
            {
            list($name, $value) = explode('=', $param);
            if($parameterName == urldecode($name) && $parameterValue == urldecode($value))
                return true;
            }
        return false;
        }

    function tempFileName($suff) /* TODO Use this to create temporary files, if needed. */
        {
        global $dodelete;
        global $tobedeleted;
        $tmpno = tempnam('/tmp', $suff);
        if($dodelete)
            $tobedeleted[$tmpno] = true;
        return $tmpno;
        }

    function requestFile($requestParm) // e.g. "IfacettokF"
        {
        logit("requestFile({$requestParm})");

        if(isset($_REQUEST[$requestParm]))
            {
            $urlbase = isset($_REQUEST["base"]) ? $_REQUEST["base"] : "http://localhost/toolsdata/";

            $item = $_REQUEST[$requestParm];
            $url = $urlbase . urlencode($item);
            logit("requestParm:$requestParm");
            logit("urlbase:$urlbase");
            logit("item:$item");
            logit("url[$url]");

            $handle = fopen($url, "r");
            if($handle == false)
                {
                logit("Cannot open url[$url]");
                return "";
                }
            else
                {
                $tempfilename = tempFileName("matePOS_{$requestParm}_");
                $temp_fh = fopen($tempfilename, 'w');
                if($temp_fh == false)
                    {
                    fclose($handle);
                    logit("handle closed. Cannot open $tempfilename");
                    return "";
                    }
                else
                    {
                    while (!feof($handle))
                        {
                        $read = fread($handle, 8192);
                        fwrite($temp_fh, $read);
                        }
                    fclose($temp_fh);
                    fclose($handle);
                    return $tempfilename;
                    }
                }
            }
        logit("empty");
        return "";
        }

    function do_matePOS()
        {
        global $matePOSfile;
        global $dodelete;
        global $tobedeleted;
        global $mode;
/***************
* declarations *
***************/

/*
 * TODO Use the variables defined below to configure your tool for the right
 * input files and the right settings.
 * The input files are local files that your tool can open and close like any
 * other file.
 * If your tool needs to create temporary files, use the tempFileName()
 * function. It can mark the temporary files for deletion when the webservice
 * is done. (See the global dodelete variable.)
 */
        $base = "";	/* URL from where this web service downloads input. The generated script takes care of that, so you can ignore this variable. */
        $job = "";	/* Only used if this web service returns 201 and POSTs result later. In that case the uploaded file must have the name of the job. */
        $post2 = "";	/* Only used if this web service returns 201 and POSTs result later. In that case the uploaded file must be posted to this URL. */
        $mode = "";	/* If the value is 'dry', the wrapper is expected to return a script of what will be done if the value is not 'dry', but 'run'. */
        $inputF = "";	/* List of all input files. */
        $input = "";	/* List of all input features. */
        $output = "";	/* List of all output features. */
        $echos = "";	/* List arguments and their actual values. For sanity check of this generated script. All references to this variable can be removed once your web service is working as intended. */
        $IfacetsegF = "";	/* Input with type of content segments (sætningssegmenter) */
        $IfacettokF = "";	/* Input with type of content tokens (tokens) */
        $Ifacetseg = false;	/* Type of content in input is segments (sætningssegmenter) if true */
        $Ifacettok = false;	/* Type of content in input is tokens (tokens) if true */
        $Iformatteip5 = false;	/* Format in input is TEIP5DKCLARIN_ANNOTATION if true */
        $Ilangde = false;	/* Language in input is German (tysk) if true */
        $Ilangen = false;	/* Language in input is English (engelsk) if true */
        $Ilanges = false;	/* Language in input is Spanish (spansk) if true */
        $Ilangfr = false;	/* Language in input is French (fransk) if true */
        $Ipresnml = false;	/* Assemblage in input is normal if true */
        $Ofacetpos = false;	/* Type of content in output is PoS-tags (PoS-tags) if true */
        $Oformatteip5 = false;	/* Format in output is TEIP5DKCLARIN_ANNOTATION if true */
        $Olangde = false;	/* Language in output is German (tysk) if true */
        $Olangen = false;	/* Language in output is English (engelsk) if true */
        $Olanges = false;	/* Language in output is Spanish (spansk) if true */
        $Olangfr = false;	/* Language in output is French (fransk) if true */
        $Opresnml = false;	/* Assemblage in output is normal if true */
        $OfacetposUni = false;	/* Style of type of content PoS-tags (PoS-tags) in output is Universal Part-of-Speech Tagset if true */

        if( hasArgument("base") )
            {
            $base = getArgument("base");
            }
        if( hasArgument("job") )
            {
            $job = getArgument("job");
            }
        if( hasArgument("post2") )
            {
            $post2 = getArgument("post2");
            }
        if( hasArgument("mode") )
            {
            $mode = getArgument("mode");
            }
        $echos = "base=$base job=$job post2=$post2 mode=$mode ";

/*********
* input  *
*********/
        if( hasArgument("IfacetsegF") )
            {
            $IfacetsegF = requestFile("IfacetsegF");
            if($IfacetsegF == '')
                {
                header("HTTP/1.0 404 Input with type of content 'segments (sætningssegmenter)' not found (IfacetsegF parameter). ");
                return;
                }
            $echos = $echos . "IfacetsegF=$IfacetsegF ";
            $inputF = $inputF . " \$IfacetsegF ";
            }
        if( hasArgument("IfacettokF") )
            {
            $IfacettokF = requestFile("IfacettokF");
            if($IfacettokF == '')
                {
                header("HTTP/1.0 404 Input with type of content 'tokens (tokens)' not found (IfacettokF parameter). ");
                return;
                }
            $echos = $echos . "IfacettokF=$IfacettokF ";
            $inputF = $inputF . " \$IfacettokF ";
            }

/************************
* input/output features *
************************/
        if( hasArgument("Ifacet") )
            {
            $Ifacetseg = existsArgumentWithValue("Ifacet", "seg");
            $Ifacettok = existsArgumentWithValue("Ifacet", "tok");
            $echos = $echos . "Ifacetseg=$Ifacetseg " . "Ifacettok=$Ifacettok ";
            $input = $input . ($Ifacetseg ? " \$Ifacetseg" : "")  . ($Ifacettok ? " \$Ifacettok" : "") ;
            }
        if( hasArgument("Iformat") )
            {
            $Iformatteip5 = existsArgumentWithValue("Iformat", "teip5");
            $echos = $echos . "Iformatteip5=$Iformatteip5 ";
            $input = $input . ($Iformatteip5 ? " \$Iformatteip5" : "") ;
            }
        if( hasArgument("Ilang") )
            {
            $Ilangde = existsArgumentWithValue("Ilang", "de");
            $Ilangen = existsArgumentWithValue("Ilang", "en");
            $Ilanges = existsArgumentWithValue("Ilang", "es");
            $Ilangfr = existsArgumentWithValue("Ilang", "fr");
            $echos = $echos . "Ilangde=$Ilangde " . "Ilangen=$Ilangen " . "Ilanges=$Ilanges " . "Ilangfr=$Ilangfr ";
            $input = $input . ($Ilangde ? " \$Ilangde" : "")  . ($Ilangen ? " \$Ilangen" : "")  . ($Ilanges ? " \$Ilanges" : "")  . ($Ilangfr ? " \$Ilangfr" : "") ;
            }
        if( hasArgument("Ipres") )
            {
            $Ipresnml = existsArgumentWithValue("Ipres", "nml");
            $echos = $echos . "Ipresnml=$Ipresnml ";
            $input = $input . ($Ipresnml ? " \$Ipresnml" : "") ;
            }
        if( hasArgument("Ofacet") )
            {
            $Ofacetpos = existsArgumentWithValue("Ofacet", "pos");
            $echos = $echos . "Ofacetpos=$Ofacetpos ";
            $output = $output . ($Ofacetpos ? " \$Ofacetpos" : "") ;
            }
        if( hasArgument("Oformat") )
            {
            $Oformatteip5 = existsArgumentWithValue("Oformat", "teip5");
            $echos = $echos . "Oformatteip5=$Oformatteip5 ";
            $output = $output . ($Oformatteip5 ? " \$Oformatteip5" : "") ;
            }
        if( hasArgument("Olang") )
            {
            $Olangde = existsArgumentWithValue("Olang", "de");
            $Olangen = existsArgumentWithValue("Olang", "en");
            $Olanges = existsArgumentWithValue("Olang", "es");
            $Olangfr = existsArgumentWithValue("Olang", "fr");
            $echos = $echos . "Olangde=$Olangde " . "Olangen=$Olangen " . "Olanges=$Olanges " . "Olangfr=$Olangfr ";
            $output = $output . ($Olangde ? " \$Olangde" : "")  . ($Olangen ? " \$Olangen" : "")  . ($Olanges ? " \$Olanges" : "")  . ($Olangfr ? " \$Olangfr" : "") ;
            }
        if( hasArgument("Opres") )
            {
            $Opresnml = existsArgumentWithValue("Opres", "nml");
            $echos = $echos . "Opresnml=$Opresnml ";
            $output = $output . ($Opresnml ? " \$Opresnml" : "") ;
            }

/*******************************
* input/output features styles *
*******************************/
        if( hasArgument("Ofacetpos") )
            {
            $OfacetposUni = existsArgumentWithValue("Ofacetpos", "Uni");
            $echos = $echos . "OfacetposUni=$OfacetposUni ";
            $output = $output . ($OfacetposUni ? " \$OfacetposUni" : "") ;
            }

/* DUMMY CODE TO SANITY CHECK GENERATED SCRIPT (TODO Remove one of the two solidi from the beginning of this line to activate your own code)
        $matePOSfile = tempFileName("matePOS-results");
        $command = "echo $echos >> $matePOSfile";
        logit($command);

        if(($cmd = popen($command, "r")) == NULL)
            {
            throw new SystemExit(); // instead of exit()
            }

        while($read = fgets($cmd))
            {
            }

        pclose($cmd);
/*/
// YOUR CODE STARTS HERE.
        if($IfacetsegF != '' && $IfacettokF != '')
            {
            $matePOSfile = tempFileName("matePOS-results");
            if($mode == 'dry')
                {
                scripinit($inputF,$input,$output);
                conllout("\$IfacettokF","\$IfacetsegF");
                }
            else
                $conll = conllout($IfacettokF,$IfacetsegF);

            $res = "../texton-linguistic-resources";
            $lang = "en";

            if($Ilangde)
                $lang = "$res/de/BohnetsPOStagger/tag-ger-3.6.model";
            else if($Ilangen)
                $lang = "$res/en/BohnetsPOStagger/CoNLL2009-ST-English-ALL.anna-3.3.postagger.model";
            else if($Ilanges)
                $lang = "$res/es/BohnetsPOStagger/CoNLL2009-ST-Spanish-ALL.anna-3.3.postagger.model";
            else if($Ilangfr)
                $lang = "$res/fr/BohnetsPOStagger/ftb6_1.conll09.crossannotated.anna-3.3-d8.jar.postagger.model";

            if($mode == 'dry')
                {
                scrip("/* CURL http://localhost:8080/BohnetsTagger/ */");
                scrip("http(\$conllfile,\$matePOSfileRAW,realpath($lang))");
                postagannotation("\$IfacettokF","\$matePOSfileRAW");
                }
            else
                {
                logit("$lang");logit(realpath($lang));
                http($conll,$matePOSfile,realpath($lang));
                $matePOSfile = postagannotation($IfacettokF,$matePOSfile);
                }
            }
        else
            {
            header("HTTP/1.0 404 Input not found (IfacetsegF and IfacettokF). ");
            return;
            }

// YOUR CODE ENDS HERE. OUTPUT EXPECTED IN $matePOSfile
//*/
        $tmpf = fopen($matePOSfile,'r');

        if($tmpf)
            {
            //logit('output from matePOS:');
            while($line = fgets($tmpf))
                {
                //logit($line);
                print $line;
                }
            fclose($tmpf);
            }

        if($dodelete)
            {
            foreach ($tobedeleted as $filename => $dot)
                {
                if($dot)
                    unlink($filename);
                }
            unset($tobedeleted);
            }
        }
//    require_once 'RESTclient.php';
    function http($input,$output,$lang)
        {
        logit("http(".$input.",".$output.",".$lang.")");
        $CF = new CURLFile($input);
        //$postFileName = tempFileName('bohPost');
        $postFileName = 'bohPost';

        $CF->setPostFilename($postFileName);
        logit("getPostFilename:" . $CF->getPostFilename());
        $postfields = array(
            'model' => $lang,
            'inputFile' => $CF
            );
        $ch = curl_init("http://localhost:8080/BohnetsTagger/");
        //$ch = curl_init("http://obi.cst.sc.ku.dk:8080/BohnetsTagger/");
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // stop verifying certificate
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POST, true); // enable posting
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true); // if any redirection after upload
        curl_setopt($ch, CURLOPT_POSTFIELDS, $postfields);
        $fp = fopen($output, "w");
        curl_setopt($ch, CURLOPT_FILE, $fp);
        curl_setopt($ch, CURLOPT_HEADER, 0);
        $r = curl_exec($ch);
        curl_close($ch);
        fclose($fp);
        }

    function conllout($Ifacettok,$Ifacetseg)
        {
        global $mode;
        logit("conllout($Ifacettok,$Ifacetseg)");

        $conllfile = tempFileName("conllout-results");
        if($mode == 'dry')
        {
            scrip("../bin/bracmat 'get\$\"../shared_scripts/conlln.bra\"' '\$conllfile' '$Ifacettok' '$Ifacetseg'");
        }
        else
        {
            $command = "../bin/bracmat 'get\$\"../shared_scripts/conlln.bra\"' '$conllfile' '$Ifacettok' '$Ifacetseg'";

            logit($command);
            /*
            copy($Ifacettok,"Ifacettok");
            copy($Ifacetseg,"Ifacetseg");
            */
            if(($cmd = popen($command, "r")) == NULL)
            {
                throw new SystemExit(); // instead of exit()
            }

            while($read = fgets($cmd))
            {
            }

            pclose($cmd);
            //logit("DONE:" . $command);
            //copy($conllfile,"conllfile");
        }
        return $conllfile;
        }

    function postagannotation($uploadfileTok,$MatePOSTaggerfile)
        {
        global $mode;
        logit( "postagannotation(" . $uploadfileTok . "," . $MatePOSTaggerfile . ")\n");
        $posfile = tempFileName("postagannotation-posf-attribute");
        if($mode == 'dry')
            {
            scrip("../bin/bracmat '(inputTok=\"$uploadfileTok\") (inputPos=\"$MatePOSTaggerfile\") (output=\"\$matePOSfile\") (get\$\"brapostei\")'");
            }
        else
            {
            $command = "../bin/bracmat '(inputTok=\"$uploadfileTok\") (inputPos=\"$MatePOSTaggerfile\") (output=\"$posfile\") (get\$\"brapostei\")'";
            logit($command);
            //copy($MatePOSTaggerfile,"MatePOSTaggerfile");
            if(($cmd = popen($command, "r")) == NULL)
                {
                logit("Cannot open command $command");
                exit(1);
                }
            logit("Running $command");
            while($read = fgets($cmd))
                {
                }
            pclose($cmd);
            //logit("DONE:" . $command);
  //          copy($posfile,"posfile");
            }
        return $posfile;
        }


    loginit();
    do_matePOS();
    }
catch (SystemExit $e)
    {
    header('HTTP/1.0 404 An error occurred: ' . $ERROR);
    logit('An error occurred' . $ERROR);
    echo $ERROR;
    }
?>

