<?php
header('Content-type:text/plain; charset=UTF-8');
/*
 * This PHP script is generated by CLARIN-DK's tool registration form
 * (http://localhost/texton/register). It should, with no or few adaptations
 * work out of the box as a dummy for your web service. The output returned
 * to the Text Tonsorium (CLARIN-DK's workflow manager) is just a listing of
 * the HTTP parameters received by this web service from the Text Tonsorium,
 * and not the output proper. For that you have to add your code to this script
 * and deactivate the dummy functionality. (The comments near the end of this
 * script explain how that is done.)
 *
 * Places in this script that require your attention are marked 'TODO'.
 */
/*
ToolID         : soffice
PassWord       :
Version        : 3.5
Title          : LibreOffice
Path in URL    : soffice/	*** TODO make sure your web service listens on this path and that this script is readable for the webserver. ***
Publisher      : LibreOffice
ContentProvider: LibreOffice
Creator        : LibreOffice
InfoAbout      : http://www.libreoffice.org
Description    : A powerful office suite, here used to convert office documents to RTF or PDF.
ExternalURI    :
XMLparms       :
PostData       :
Inactive       :
*/

/*******************
* helper functions *
*******************/
$toollog = '../log/soffice.log'; /* Used by the logit() function. TODO make sure the folder exists and is writable. Adapt if needed */

/*  TODO Set $dodelete to false if temporary files in /tmp should not be deleted before returning. */
$dodelete = true;
$tobedeleted = array();


function loginit()  /* Wipes the contents of the log file! TODO Change this behaviour if needed. */
    {
    return;
    global $toollog,$ftemp;
    $ftemp = fopen($toollog,'w');
    if($ftemp)
        {
        fwrite($ftemp,$toollog . "\n");
        fclose($ftemp);
        }
    }

function logit($str) /* TODO You can use this function to write strings to the log file. */
    {
    return;
    global $toollog,$ftemp;
    $ftemp = fopen($toollog,'a');
    if($ftemp)
        {
        fwrite($ftemp,$str . "\n");
        fclose($ftemp);
        }
    }

function scripinit($inputF,$input,$output)  /* Initialises outputfile. */
    {
    global $fscrip, $sofficefile;
    $fscrip = fopen($sofficefile,'w');
    if($fscrip)
        {
        fwrite($fscrip,"/*\n");
        fwrite($fscrip," * ToolID           : soffice\n");
        fwrite($fscrip," * Version          : 3.5\n");
        fwrite($fscrip," * Title            : LibreOffice\n");
        fwrite($fscrip," * ServiceURL       : http://localhost/soffice/\n");
        fwrite($fscrip," * Publisher        : LibreOffice\n");
        fwrite($fscrip," * ContentProvider  : LibreOffice\n");
        fwrite($fscrip," * Creator          : LibreOffice\n");
        fwrite($fscrip," * InfoAbout        : http://www.libreoffice.org\n");
        fwrite($fscrip," * Description      : A powerful office suite, here used to convert office documents to RTF or PDF.\n");
        fwrite($fscrip," * ExternalURI      : \n");
        fwrite($fscrip," * inputF " . $inputF . "\n");
        fwrite($fscrip," * input  " . $input  . "\n");
        fwrite($fscrip," * output " . $output . "\n");
        fwrite($fscrip," */\n");
        fwrite($fscrip,"\ncd " . getcwd() . "\n");
        fclose($fscrip);
        }
    }

function scrip($str) /* TODO send comments and command line instructions. Don't forget to terminate string with new line character, if needed.*/
    {
    global $fscrip, $sofficefile;
    $fscrip = fopen($sofficefile,'a');
    if($fscrip)
        {
        fwrite($fscrip,$str . "\n");
        fclose($fscrip);
        }
    }

class SystemExit extends Exception {}
try {
    function hasArgument ($parameterName)
        {
        return isset($_REQUEST["$parameterName"]);
        }

    function getArgument ($parameterName)
        {
        return isset($_REQUEST["$parameterName"]) ? $_REQUEST["$parameterName"] : "";
        }

    function existsArgumentWithValue ($parameterName, $parameterValue)
        {
        /* Check whether there is an argument <parameterName> that has value
           <parameterValue>.
           There may be any number of arguments with name <parameterName> !
        */
        $query  = explode('&', $_SERVER['QUERY_STRING']);

        foreach( $query as $param )
            {
            list($name, $value) = explode('=', $param);
            if($parameterName == urldecode($name) && $parameterValue == urldecode($value))
                return true;
            }
        return false;
        }

    function tempFileName($suff) /* TODO Use this to create temporary files, if needed. */
        {
        global $dodelete;
        global $tobedeleted;
        $tmpno = tempnam('/tmp', $suff);
        if($dodelete)
            $tobedeleted[$tmpno] = true;
        return $tmpno;
        }

    function requestFile($requestParm) // e.g. "IfacettokF"
        {
        logit("requestFile({$requestParm})");

        if(isset($_REQUEST[$requestParm]))
            {
            $urlbase = isset($_REQUEST["base"]) ? $_REQUEST["base"] : "http://localhost/toolsdata/";

            $item = $_REQUEST[$requestParm];
            $url = $urlbase . urlencode($item);
            logit("requestParm:$requestParm");
            logit("urlbase:$urlbase");
            logit("item:$item");
            logit("url[$url]");

            $handle = fopen($url, "r");
            if($handle == false)
                {
                logit("Cannot open url[$url]");
                return "";
                }
            else
                {
                $tempfilename = tempFileName("soffice_{$requestParm}_");
                $temp_fh = fopen($tempfilename, 'w');
                if($temp_fh == false)
                    {
                    fclose($handle);
                    logit("handle closed. Cannot open $tempfilename");
                    return "";
                    }
                else
                    {
                    while (!feof($handle))
                        {
                        $read = fread($handle, 8192);
                        fwrite($temp_fh, $read);
                        }
                    fclose($temp_fh);
                    fclose($handle);
                    return $tempfilename;
                    }
                }
            }
        logit("empty");
        return "";
        }

    function do_soffice()
        {
        global $sofficefile;
        global $dodelete;
        global $tobedeleted;
/***************
* declarations *
***************/

/*
 * TODO Use the variables defined below to configure your tool for the right
 * input files and the right settings.
 * The input files are local files that your tool can open and close like any
 * other file.
 * If your tool needs to create temporary files, use the tempFileName()
 * function. It can mark the temporary files for deletion when the webservice
 * is done. (See the global dodelete variable.)
 */
        $base = "";	/* URL from where this web service downloads input. The generated script takes care of that, so you can ignore this variable. */
        $job = "";	/* Only used if this web service returns 201 and POSTs result later. In that case the uploaded file must have the name of the job. */
        $post2 = "";	/* Only used if this web service returns 201 and POSTs result later. In that case the uploaded file must be posted to this URL. */
        $mode = "";	/* If the value is 'dry', the wrapper is expected to return a script of what will be done if the value is not 'dry', but 'run'. */
        $inputF = "";	/* List of all input files. */
        $input = "";	/* List of all input features. */
        $output = "";	/* List of all output features. */
        $echos = "";	/* List arguments and their actual values. For sanity check of this generated script. All references to this variable can be removed once your web service is working as intended. */
        $F = "";	/* Input (ONLY used if there is exactly ONE input to this workflow step) */
        $Iformatdoc = false;	/* Format in input is DOC if true */
        $Iformatdocx = false;	/* Format in input is DOCX if true */
        $Iformatodp = false;	/* Format in input is ODP if true */
        $Iformatodt = false;	/* Format in input is ODF if true */
        $Iformatppt = false;	/* Format in input is PPT if true */
        $Iformatpptx = false;	/* Format in input is PPTX if true */
        $Oformatpdf = false;	/* Format in output is PDF if true */
        $Oformatrtf = false;	/* Format in output is RTF if true */

        if( hasArgument("base") )
            {
            $base = getArgument("base");
            }
        if( hasArgument("job") )
            {
            $job = getArgument("job");
            }
        if( hasArgument("post2") )
            {
            $post2 = getArgument("post2");
            }
        if( hasArgument("mode") )
            {
            $mode = getArgument("mode");
            }
        $echos = "base=$base job=$job post2=$post2 mode=$mode ";

/*********
* input  *
*********/
        if( hasArgument("F") )
            {
            $F = requestFile("F");
            if($F == '')
                {
                header("HTTP/1.0 404 Input not found (F parameter). ");
                return;
                }
            $echos = $echos . "F=$F ";
            $inputF = $inputF . " \$F ";
            }

/************************
* input/output features *
************************/
        if( hasArgument("Iformat") )
            {
            $Iformatdoc = existsArgumentWithValue("Iformat", "doc");
            $Iformatdocx = existsArgumentWithValue("Iformat", "docx");
            $Iformatodp = existsArgumentWithValue("Iformat", "odp");
            $Iformatodt = existsArgumentWithValue("Iformat", "odt");
            $Iformatppt = existsArgumentWithValue("Iformat", "ppt");
            $Iformatpptx = existsArgumentWithValue("Iformat", "pptx");
            $echos = $echos . "Iformatdoc=$Iformatdoc " . "Iformatdocx=$Iformatdocx " . "Iformatodp=$Iformatodp " . "Iformatodt=$Iformatodt " . "Iformatppt=$Iformatppt " . "Iformatpptx=$Iformatpptx ";
            $input = $input . ($Iformatdoc ? " \$Iformatdoc" : "")  . ($Iformatdocx ? " \$Iformatdocx" : "")  . ($Iformatodp ? " \$Iformatodp" : "")  . ($Iformatodt ? " \$Iformatodt" : "")  . ($Iformatppt ? " \$Iformatppt" : "")  . ($Iformatpptx ? " \$Iformatpptx" : "") ;
            }
        if( hasArgument("Oformat") )
            {
            $Oformatpdf = existsArgumentWithValue("Oformat", "pdf");
            $Oformatrtf = existsArgumentWithValue("Oformat", "rtf");
            $echos = $echos . "Oformatpdf=$Oformatpdf " . "Oformatrtf=$Oformatrtf ";
            $output = $output . ($Oformatpdf ? " \$Oformatpdf" : "")  . ($Oformatrtf ? " \$Oformatrtf" : "") ;
            }

/*******************************
* input/output features styles *
*******************************/

/* DUMMY CODE TO SANITY CHECK GENERATED SCRIPT (TODO Remove one of the two solidi from the beginning of this line to activate your own code)
        $sofficefile = tempFileName("soffice-results");
        $command = "echo $echos >> $sofficefile";
        logit($command);

        if(($cmd = popen($command, "r")) == NULL)
            {
            throw new SystemExit(); // instead of exit()
            }

        while($read = fgets($cmd))
            {
            }

        pclose($cmd);
/*/
// YOUR CODE STARTS HERE.
//        TODO your code!
        if($mode == 'dry')
            {
            $sofficefile = tempFileName("soffice-results");
            scripinit($inputF,$input,$output);
            }

        $workdir = "./";

        if($Iformatdoc)
            $inputExtension = "doc";
        else if($Iformatdocx)
            $inputExtension = "docx";
        else if($Iformatodp)
            $inputExtension = "odp";
        else if($Iformatodt)
            $inputExtension = "odt";
        else if($Iformatppt)
            $inputExtension = "ppt";
        else if($Iformatpptx)
            $inputExtension = "pptx";

        if($Oformatrtf)
            $outputExtension = "rtf";
        else if($Oformatpdf)
            $outputExtension = "pdf";
        else
            $outputExtension = "pdf";

        logit("F:" . $F);
        $dox = $F . "." . $inputExtension;
        $copied = basename($dox);
        if($mode == 'dry')
            {
            scrip("rename(\$F,\$dox)");
            scrip("copy(\$dox, \$copied)");
            scrip("/usr/bin/soffice \"-env:UserInstallation=file:///opt/texton/soffice/LibO_Conversion\" --convert-to $outputExtension \$copied --headless --outdir . >/dev/null 2>&1");
            scrip("rm -rf ./LibO_Conversion");
            }
        else
            {
            $sofficefile = $workdir . basename($copied,"." . $inputExtension) . "." . $outputExtension;

            rename($F,$dox);
            logit("sofficefile:" . $sofficefile);
            copy($dox, $copied);
            logit("copied:" . $dox . " to " . $copied);
            // It seems that an absolute path to LibO_Conversion is necessary
            $command = "/usr/bin/soffice \"-env:UserInstallation=file:///opt/texton/soffice/LibO_Conversion\" --convert-to $outputExtension " . $copied . " --headless --outdir . >/dev/null 2>&1";

            logit($command);
            system($command);

            if(($cmd = popen("rm -rf ./LibO_Conversion", "r")) == NULL)
                {
                logit("EXIT!");
                throw new SystemExit(); // instead of exit()
                }

            while($read = fgets($cmd))
                {
                //logit("read:" . $read);
                }
            $tmpf = fopen($sofficefile,'r');

            if($tmpf)
                {
                while($line = fgets($tmpf))
                    {
                    print $line;
                    }
                fclose($tmpf);
                }

            if($dodelete)
                {
                foreach ($tobedeleted as $filename => $dot)
                    {
                    if($dot)
                        unlink($filename);
                    }
                unlink($copied);
                unlink($sofficefile);
                unset($tobedeleted);
                }
            }
        }
    loginit();
    do_soffice();
    }
catch (SystemExit $e)
    {
    header("HTTP/1.0 404 An error occurred:" . $ERROR);
    logit('An error occurred' . $ERROR);
    echo $ERROR;
    }

?>

