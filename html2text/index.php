<?php
header('Content-type:text/plain; charset=UTF-8');
/*
 * This PHP script is generated by CLARIN-DK's tool registration form 
 * (http://localhost/texton/register). It should, with no or few adaptations
 * work out of the box as a dummy for your web service. The output returned
 * to the Text Tonsorium (CLARIN-DK's workflow manager) is just a listing of
 * the HTTP parameters received by this web service from the Text Tonsorium,
 * and not the output proper. For that you have to add your code to this script
 * and deactivate the dummy functionality. (The comments near the end of this
 * script explain how that is done.)
 *
 * Places in this script that require your attention are marked 'TODO'.
 */
/*
ToolID         : html2text
PassWord       : 
Version        : 28.2.18
Title          : html2text
Path in URL    : html2text/	*** TODO make sure your web service listens on this path and that this script is readable for the webserver. ***
Publisher      : Jevon Wright
ContentProvider: https://github.com/soundasleep/html2text/blob/master/src/Html2Text.php
Creator        : Jevon Wright
InfoAbout      : https://github.com/soundasleep/html2text
Description    : A very simple script that loads from HTML, and then iterates over the DOM to correctly output plain text.
ExternalURI    : -
XMLparms       : 
PostData       : 
Inactive       : 
*/

/*******************
* helper functions *
*******************/
include_once ("html2text/html2text.php");

$toollog = '../log/html2text.log'; /* Used by the logit() function. TODO make sure the folder exists and is writable. Adapt if needed */
                
/*  TODO Set $dodelete to false if temporary files in /tmp should not be deleted before returning. */
$dodelete = true;
$tobedeleted = array();


function loginit()  /* Wipes the contents of the log file! TODO Change this behaviour if needed. */
    {
//    return;
    global $toollog,$ftemp;
    $ftemp = fopen($toollog,'w');
    if($ftemp)
        {
        fwrite($ftemp,$toollog . "\n");
        fclose($ftemp);
        }
    }
    
function logit($str) /* TODO You can use this function to write strings to the log file. */
    {
//    return;
    global $toollog,$ftemp;
    $ftemp = fopen($toollog,'a');
    if($ftemp)
        {
        fwrite($ftemp,$str . "\n");
        fclose($ftemp);
        }
    }
    
function scripinit($inputF,$input,$output)  /* Initialises outputfile. */
    {
    global $fscrip, $html2textfile;
    $fscrip = fopen($html2textfile,'w');
    if($fscrip)
        {
        fwrite($fscrip,"/*\n");
        fwrite($fscrip," * ToolID           : html2text\n");
        fwrite($fscrip," * Version          : 28.2.18\n");
        fwrite($fscrip," * Title            : html2text\n");
        fwrite($fscrip," * ServiceURL       : http://localhost/html2text/\n");
        fwrite($fscrip," * Publisher        : Jevon Wright\n");
        fwrite($fscrip," * ContentProvider  : https://github.com/soundasleep/html2text/blob/master/src/Html2Text.php\n");
        fwrite($fscrip," * Creator          : Jevon Wright\n");
        fwrite($fscrip," * InfoAbout        : https://github.com/soundasleep/html2text\n");
        fwrite($fscrip," * Description      : A very simple script that loads from HTML, and then iterates over the DOM to correctly output plain text.\n");
        fwrite($fscrip," * ExternalURI      : -\n");
        fwrite($fscrip," * inputF " . $inputF . "\n");
        fwrite($fscrip," * input  " . $input  . "\n");
        fwrite($fscrip," * output " . $output . "\n");
        fwrite($fscrip," */\n");
        fwrite($fscrip,"\ncd " . getcwd() . "\n");
        fclose($fscrip);
        }
    }
    
function scrip($str) /* TODO send comments and command line instructions. Don't forget to terminate string with new line character, if needed.*/
    {
    global $fscrip, $html2textfile;
    $fscrip = fopen($html2textfile,'a');
    if($fscrip)
        {
        fwrite($fscrip,$str . "\n");
        fclose($fscrip);
        }
    }
    
class SystemExit extends Exception {}
try {
    function hasArgument ($parameterName)
        {
        return isset($_REQUEST["$parameterName"]);
        }

    function getArgument ($parameterName)
        {
        return isset($_REQUEST["$parameterName"]) ? $_REQUEST["$parameterName"] : "";
        }

    function existsArgumentWithValue ($parameterName, $parameterValue)
        {
        /* Check whether there is an argument <parameterName> that has value 
           <parameterValue>. 
           There may be any number of arguments with name <parameterName> !
        */
        $query  = explode('&', $_SERVER['QUERY_STRING']);

        foreach( $query as $param )
            {
            list($name, $value) = explode('=', $param);
            if($parameterName == urldecode($name) && $parameterValue == urldecode($value))
                return true;
            }
        return false;
        }

    function tempFileName($suff) /* TODO Use this to create temporary files, if needed. */
        {
        global $dodelete;
        global $tobedeleted;
        $tmpno = tempnam('/tmp', $suff);
        if($dodelete)
            $tobedeleted[$tmpno] = true;
        return $tmpno;
        }
        
    function requestFile($requestParm) // e.g. "IfacettokF"
        {
        logit("requestFile({$requestParm})");

        if(isset($_REQUEST[$requestParm]))
            {
            $urlbase = isset($_REQUEST["base"]) ? $_REQUEST["base"] : "http://localhost/toolsdata/";

            $item = $_REQUEST[$requestParm];
            $url = $urlbase . urlencode($item);
            logit("requestParm:$requestParm");
            logit("urlbase:$urlbase");
            logit("item:$item");
            logit("url[$url]");

            $handle = fopen($url, "r");
            if($handle == false)
                {
                logit("Cannot open url[$url]");
                return "";
                }
            else
                {
                $tempfilename = tempFileName("html2text_{$requestParm}_");
                $temp_fh = fopen($tempfilename, 'w');
                if($temp_fh == false)
                    {
                    fclose($handle);
                    logit("handle closed. Cannot open $tempfilename");
                    return "";
                    }
                else
                    {
                    while (!feof($handle)) 
                        {
                        $read = fread($handle, 8192);
                        fwrite($temp_fh, $read);    
                        }
                    fclose($temp_fh);
                    fclose($handle);
                    return $tempfilename;
                    }
                }
            }
        logit("empty");
        return "";
        }    

    function do_html2text()
        {
        global $html2textfile;
        global $dodelete;
        global $tobedeleted;
/***************
* declarations *
***************/

/*
 * TODO Use the variables defined below to configure your tool for the right 
 * input files and the right settings.
 * The input files are local files that your tool can open and close like any
 * other file.
 * If your tool needs to create temporary files, use the tempFileName() 
 * function. It can mark the temporary files for deletion when the webservice
 * is done. (See the global dodelete variable.)
 */
        $base = "";	/* URL from where this web service downloads input. The generated script takes care of that, so you can ignore this variable. */
        $job = "";	/* Only used if this web service returns 201 and POSTs result later. In that case the uploaded file must have the name of the job. */
        $post2 = "";	/* Only used if this web service returns 201 and POSTs result later. In that case the uploaded file must be posted to this URL. */
        $mode = "";	/* If the value is 'dry', the wrapper is expected to return a script of what will be done if the value is not 'dry', but 'run'. */
        $inputF = "";	/* List of all input files. */
        $input = "";	/* List of all input features. */
        $output = "";	/* List of all output features. */
        $echos = "";	/* List arguments and their actual values. For sanity check of this generated script. All references to this variable can be removed once your web service is working as intended. */
        $F = "";	/* Input (ONLY used if there is exactly ONE input to this workflow step) */
        $Iformathtml = false;	/* Format in input is HTML if true */
        $Oformatflat = false;	/* Format in output is plain (flad) if true */
        $IformathtmlROTM = false;	/* Style of format HTML in input is Traditional tags (h, p, etc.)Med traditionelle tags (h, p, etc.) if true */

        if( hasArgument("base") )
            {
            $base = getArgument("base");
            }
        if( hasArgument("job") )
            {
            $job = getArgument("job");
            }
        if( hasArgument("post2") )
            {
            $post2 = getArgument("post2");
            }
        if( hasArgument("mode") )
            {
            $mode = getArgument("mode");
            }
        $echos = "base=$base job=$job post2=$post2 mode=$mode ";

/*********
* input  *
*********/
        if( hasArgument("F") )
            {        
            $F = requestFile("F");
            if($F == '')
                {
                header("HTTP/1.0 404 Input not found (F parameter). ");
                return;
                }
            $echos = $echos . "F=$F ";
            $inputF = $inputF . " \$F ";
            }

/************************
* input/output features *
************************/
        if( hasArgument("Iformat") )
            {
            $Iformathtml = existsArgumentWithValue("Iformat", "html");
            $echos = $echos . "Iformathtml=$Iformathtml ";
            $input = $input . ($Iformathtml ? " \$Iformathtml" : "") ;
            }
        if( hasArgument("Oformat") )
            {
            $Oformatflat = existsArgumentWithValue("Oformat", "flat");
            $echos = $echos . "Oformatflat=$Oformatflat ";
            $output = $output . ($Oformatflat ? " \$Oformatflat" : "") ;
            }

/*******************************
* input/output features styles *
*******************************/
        if( hasArgument("Iformathtml") )
            {
            $IformathtmlROTM = existsArgumentWithValue("Iformathtml", "ROTM");
            $echos = $echos . "IformathtmlROTM=$IformathtmlROTM ";
            $input = $input . ($IformathtmlROTM ? " \$IformathtmlROTM" : "") ;
            }

/* DUMMY CODE TO SANITY CHECK GENERATED SCRIPT (TODO Remove one of the two solidi from the beginning of this line to activate your own code)
        $html2textfile = tempFileName("html2text-results");
        $command = "echo $echos >> $html2textfile";
        logit($command);

        if(($cmd = popen($command, "r")) == NULL)
            {
            throw new SystemExit(); // instead of exit()
            }

        while($read = fgets($cmd))
            {
            }

        pclose($cmd);
/*/
// YOUR CODE STARTS HERE.
//        TODO your code!
        $html2textfile = tempFileName("html2text-results");
        if($mode == 'dry')
            scripinit($inputF,$input,$output);

        ob_start();
        var_dump($_REQUEST);
        $dump = ob_get_clean();
        logit($dump);
        ob_start();
        //var_dump($parms);
        $dump = ob_get_clean();
        logit($dump);

        $utf8file1 = tempFileName("utf8fil1");
        $utf8file = tempFileName("utf8file");
        //$command = "makeUTF8 $F $utf8file";
        if($mode == 'dry')
            {
            $command = "../bin/bracmat 'get\$\"cp2utf8.bra\"' \$F \$utf8file1";
            scrip($command . "\n");
            $command = "../bin/bracmat 'get\$\"delicky.bra\"' \$utf8file1 \$utf8file";
            scrip($command . "\n");
            }
        else 
            {
            $command = "../bin/bracmat 'get\$\"cp2utf8.bra\"' $F $utf8file1";
            logit($command);
            if(($cmd = popen($command, "r")) == NULL)
                {
                throw new SystemExit(); // instead of exit()
                }

            while($read = fgets($cmd))
                {
                }

            pclose($cmd);
            $command = "../bin/bracmat 'get\$\"delicky.bra\"' $utf8file1 $utf8file";
            logit($command);
            if(($cmd = popen($command, "r")) == NULL)
                {
                throw new SystemExit(); // instead of exit()
                }

            while($read = fgets($cmd))
                {
                }

            pclose($cmd);
            }

        if($mode == 'dry')
            {
            scrip("\$HtMl = file_get_contents(\$utf8file);" . "\n");
            scrip("\$TeXt = convert_html_to_text(\$HtMl);" . "\n");
            scrip("\$html2textfile = tempFileName(\"txt\");" . "\n");
            scrip("file_put_contents(\$html2textfile, \$TeXt);" . "\n");
            }
        else
            {
            $HtMl = file_get_contents($utf8file);
	    logit("Now convert_html_to_text");
            $TeXt = convert_html_to_text($HtMl);
	    logit("Now convert_html_to_textDONE");
        
            $html2textfile = tempFileName("txt");
            file_put_contents($html2textfile, $TeXt);
            }



        
        logit('html2textfile='.$html2textfile);

/*
        if($mode == 'dry')
            {
            $command = "../bin/bracmat 'get\$\"removeLinks.bra\"' '\$textWithLinks' '\$html2textfile'";
            scrip($command . "\n");
            }
        else 
            {
            $command = "../bin/bracmat 'get\$\"removeLinks.bra\"' '$textWithLinks' '$html2textfile'";

            logit($command);
            if(($cmd = popen($command, "r")) == NULL)
                {
                throw new SystemExit(); // instead of exit()
                }

            while($read = fgets($cmd))
                {
                }

            pclose($cmd);
            }
*/        
/*
//      $command = "html2text -width 1000 -style pretty -utf8 -nobs $utf8file | recode HTML > $html2textfile ";
//      $command = "html2text -width 1000 -style compact -utf8 -nobs $utf8file | sed 's/\_/\ /g' | ascii2uni -a Q -q > $html2textfile ";
		$command = "html2text -width 1000 -style compact -utf8 -nobs -nometa $utf8file | sed 's/\_/\ /g' | noentities > $html2textfile ";
        logit($command);

        if(($cmd = popen($command, "r")) == NULL)
            {
            throw new SystemExit(); // instead of exit()
            }

        while($read = fgets($cmd))
            {
            }

        pclose($cmd);
*/
// YOUR CODE ENDS HERE. OUTPUT EXPECTED IN $html2textfile
//*/
        $tmpf = fopen($html2textfile,'r');

        if($tmpf)
            {
            //logit('output from html2text:');
            while($line = fgets($tmpf))
                {
                //logit($line);
                print $line;
                }
            fclose($tmpf);
            }

        if($dodelete)
            {
            foreach ($tobedeleted as $filename => $dot) 
                {
                if($dot)
                    unlink($filename);
                }
            unset($tobedeleted);
            }
        }
    loginit();
    do_html2text();
    }
catch (SystemExit $e) 
    { 
    header('HTTP/1.0 404 An error occurred: ' . $ERROR);
    logit('An error occurred' . $ERROR);
    echo $ERROR;
    }
?>

