{corenlpx.bra

Transform Clarin token/segment annotation to plain text, one sentence per line. Run CoreNLP.
Output JSON or TEI-P5.
}

X=
  ( turnJSONintoTEIP5
  =   cor lem mrf ner pos seg snt stc stx tok
    .   !arg:(?json.?cor,?lem,?mrf,?ner,?pos,?seg,?snt,?stc,?stx,?tok)
      & !json:((sentences.,?sentences),)
      & characterOffsetBegin characterOffsetEnd index lemma ner originalText pos word
      & 0:?s
      & :?idfix
      & 0:?anoid
      & (ano=."xml:id".str$(a (!anoid+1:?anoid)))
      & ( inv
        =   j K
          .   :?K
            & whl'(!arg:%?j ?arg&!j !K:?K)
            & !K
        )
      & ( idfy
        =   
          .   map
            $ ( ( 
                =   e a c
                  .     !arg:(?e.?a,?c)
                      & ( !e
                        .     (   !a:? ("xml:id".?) ?
                                & 
                              | ano$
                              )
                              !a
                          , idfy$!c
                        )
                    | !arg
                )
              . !arg
              )
        )
      & ( standoff
        =   what xml naps ana parent
          .   !arg:(?what,?ana,?parent.?xml)
            & :?naps
            &     map
                $ ( ( 
                    =   a c A W Z e from to id
                      .     !arg:((w|c):?e.?a,?c)
                          & !a:?A (!what.?W) ?Z
                          & !A !Z:?a:? ("xml:id".?id) ?
                          &     ( span
                                .     ("xml:id".str$(!ana !id))
                                      (   !c:% %
                                        &   !c
                                          :   ( ?
                                              .   ? ("xml:id".?from) ?
                                                , ?
                                              )
                                              ?
                                              ( ?
                                              .   ? ("xml:id".?to) ?
                                                , ?
                                              )
                                        &   (from.str$("#" !parent !from))
                                            (to.str$("#" !parent !to))
                                      | (from.str$("#" !parent !id))
                                      )
                                  , !W
                                )
                                !naps
                            : ?naps
                          & (!e.!a,!c)
                        | !arg
                    )
                  . !xml
                  )
              : ?xml
            & ((spangrp.(ana.!ana),inv$!naps).!xml)
        )
      & ( collectSyn
        =   ana A B a z
          .   !arg:(?arg.?ana)
            &     map
                $ ( ( 
                    =   
                      .   !arg:(spanGrp.?A,?B)&!B
                        | 
                    )
                  . !arg
                  )
              : ?spanGrp
            & (   !A:?a (ana.?) ?z
                & !a !z:?A
              | 
              )
            &     map
                $ ( ( 
                    =   
                      .   !arg:(spanGrp.?,?)&
                        | !arg
                    )
                  . !arg
                  )
              : ?arg
            & ((spanGrp.(ana.!ana) !A,!spanGrp).!arg)
        )
      & ( sent
        =   
          .   ( text
              =   
                .   str
                  $ ( map
                    $ ( ( 
                        =   
                          .       !arg
                                : (c.? (type.s) ?,?)
                              & " "
                            | !arg:(?.?,?arg)&text$!arg
                            | !arg
                        )
                      . !arg
                      )
                    )
              )
            & ( spanGrp
              .   (ana.sent)
                ,   map
                  $ ( ( 
                      =   
                        .     !arg:(p.?,?s)
                            &   map
                              $ ( ( 
                                  =   
                                    .   !arg:(s.?,?arg)
                                      &   !arg
                                        : ((?.?af,?cf):?first) ?
                                        : ? ((?.?al,?cl):?last)
                                      & (   !cf
                                          :   ( ?
                                              .   ? ("xml:id".?idf) ?
                                                , ?
                                              )
                                              ?
                                        | !af:? ("xml:id".?idf) ?
                                        )
                                      & (   !cl
                                          :   ?
                                              ( ?
                                              .   ? ("xml:id".?idl) ?
                                                , ?
                                              )
                                        | !al:? ("xml:id".?idl) ?
                                        )
                                      & ( span
                                        .     (from.str$("#" !idf))
                                              (   !idf:!idl
                                                & 
                                              | (to.str$("#" !idl))
                                              )
                                          , text$!arg
                                        )
                                  )
                                . !s
                                )
                          | 
                      )
                    . !arg
                    )
              )
        )
      & ( seg
        =   spanSent spanTok from a z
          .   !arg:((?.?,?spanSent).?.?,?spanTok)
            & ( spanGrp
              .   (ana.seg)
                ,   map
                  $ ( ( 
                      =   from to a aa z id idto
                        .     !arg
                            : (span.?a (from.?from) ?z,?)
                          & (   !a !z:?aa (to.?to) ?z
                              & !aa:?a
                              &   !spanTok
                                :   ?
                                    ( ?
                                    .       ?
                                            (from|to.!to)
                                            ?
                                        : ? ("xml:id".?idto) ?
                                      , ?
                                    )
                                    ?
                            | :?to
                            )
                          &   !spanTok
                            :   ?
                                ( ?
                                .     ? (from.!from) ?
                                    : ? ("xml:id".?id) ?
                                  , ?
                                )
                                ?
                          & ( span
                            .     !a
                                  (from.str$("#" !id))
                                  ( !to:
                                  | (to.str$("#" !idto))
                                  )
                                  !z
                              , 
                            )
                      )
                    . !spanSent
                    )
              )
        )
      & ( divvy
        =   P sind index lemma ner originalText,pos word atts e a c
          .   !arg:(?sind.?index.?lemma.?ner.?originalText.?pos.?word)
            &     ("xml:id".str$(i !sind "." !index))
                  (!lemma:|(lemma.!lemma))
                  ( !ner:(|O)&
                  | (ner.!ner)
                  )
                  (!pos:|(pos.!pos))
                  (!word:|(token.!word))
              : ?atts
            & :?P
            &     vap
                $ ( ( 
                    =   
                      .   (   @(ugc$!arg:(P|S) ?)
                            & !P !arg:?P
                          | 
                          )
                        & !arg
                    )
                  . !originalText
                  )
              : ?originalText
            & :?ww
            &   whl
              ' ( !P:%?p ?P
                & !originalText:?a !p ?originalText
                &     !ww
                      (!a:|(w.,str$!a))
                      (c.(type.p),!p)
                  : ?ww
                )
            &   ( !ww:&str$!originalText
                | !originalText:&!ww
                | !ww (w.,str$!originalText)
                )
              : ?arg
            & ( !arg:(?e.?a,?c)&(!e.!a !atts,!c)
              | (w.!atts,!arg)
              )
        )
      & ( trim
        =   
          .   vap$(.!arg):?arg
            &   whl
              ' ( !arg
                :   ( " "
                    | \n
                    | \r
                    | \t
                    | \v
                    )
                    ?arg
                )
            &   whl
              ' ( !arg
                :   ?arg
                    ( " "
                    | \n
                    | \r
                    | \t
                    | \v
                    )
                )
            & str$!arg
        )
      &   ("?"."xml version=\"1.0\" encoding=\"UTF-8\"")
          ( TEI
          .   (xmlns."http://www.tei-c.org/ns/1.0")
            ,   (teiHeader.,)
                ( text
                .   
                  ,       (p.)
                            mop
                          $ ( ( 
                              =   sind
                                .   1+!s:?s
                                  &   !arg
                                    : (?+(index.?sind)+?+(tokens.,?tokens)+?,)
                                  &   !arg
                                    : (   ?+(enhancedPlusPlusDependencies.,?deps)+?
                                        | ?+(enhancedDependencies.,?deps)+?
                                        | ?+(basicDependencies.,?deps)+?
                                        | ?&:?deps
                                      , 
                                      )
                                  &   (     !tokens
                                          :   (?+(before..?before)+?,)
                                              ?
                                        & @( !before
                                           : (? \n ?|? \r ?)
                                           )
                                        & (.p.) (p.)
                                      | 
                                      )
                                      (s.)
                                      (     map
                                          $ ( ( 
                                              =   
                                                .     !arg
                                                    : (   ?
                                                        + (before..?before)
                                                        + ?
                                                        + (index.?index)
                                                        + (lemma..?lemma)
                                                        + (ner..?ner)
                                                        + ( originalText
                                                          . 
                                                          . ?originalText
                                                          )
                                                        + (pos..?pos)
                                                        + (word..?word)
                                                        + ?
                                                      , 
                                                      )
                                                  &   ( !before:
                                                      | ( c
                                                        .       trim$!before
                                                              : 
                                                            & ((type.s),)
                                                          | ( (type.p)
                                                            , !before
                                                            )
                                                        )
                                                      )
                                                        divvy
                                                      $ ( !sind
                                                        . !index
                                                        . !lemma
                                                        . !ner
                                                        . !originalText
                                                        . !pos
                                                        . !word
                                                        )
                                              )
                                            . !tokens
                                            )
                                        : ?segtok
                                      & (   !segtok
                                          :   ( c
                                              . ? (type.s) ?,
                                              )
                                              ?segtok
                                        | 
                                        )
                                      & idfy$!segtok
                                      )
                                      ( !deps:
                                      | ( spanGrp
                                        .   (ana.syntax)
                                          ,   map
                                            $ ( ( 
                                                =   
                                                  .     !arg
                                                      : (   (dep..?dep)
                                                          + (dependent.?dependent)
                                                          + ( dependentGloss
                                                            . 
                                                            . ?dependentGloss
                                                            )
                                                          + (governor.?governor)
                                                          + ( governorGloss
                                                            . 
                                                            . ?governorGloss
                                                            )
                                                        , 
                                                        )
                                                    & ( span
                                                      .   ( from
                                                          .   str
                                                            $ ( "#tokeni"
                                                                !sind
                                                                "."
                                                                !governor
                                                              )
                                                          )
                                                        ,   ( link
                                                            .   ( target
                                                                .   str
                                                                  $ ( "#tokeni"
                                                                      !sind
                                                                      "."
                                                                      !dependent
                                                                    )
                                                                )
                                                              , 
                                                            )
                                                            (term.,!dep)
                                                      )
                                                )
                                              . !deps
                                              )
                                        )
                                      )
                                      (.s.)
                              )
                            . !sentences
                            . (=a b)
                            )
                          (.p.)
                      : ?XML
                    & cor lem mrf ner pos seg snt stc stx tok
                    & (   !stc:1
                        & collectSyn$(!XML.parse):(?spanGrpSyn.?XML)
                      |   !stx:1
                        & collectSyn$(!XML.depparse):(?spanGrpSyn.?XML)
                      | 
                      )
                    & standoff$(token,token,.!XML):(?spanGrpTok.?XML)
                    &   standoff$(lemma,lemma,token.!XML)
                      : (?spanGrpLemma.?XML)
                    &   standoff$(pos,pos,token.!XML)
                      : (?spanGrpPos.?XML)
                    &   standoff$(ner,ner,token.!XML)
                      : (?spanGrpNer.?XML)
                    & nestML$!XML:?XML
                    & sent$!XML:?spanGrpSent
                    & seg$(!spanGrpSent.!spanGrpTok):?spanGrpSeg
                    &   !XML
                        !spanGrpTok
                        !spanGrpSent
                        !spanGrpSeg
                        !spanGrpNer
                        !spanGrpLemma
                        !spanGrpPos
                        !spanGrpSyn
                )
          )
  )
  ( doit
  =     output tmp1 tmp2 A B C D E F G H formatO
      , xmlseg xmltok lang language properties period
      , cor lem mrf ner pos seg snt stc stx tok
    .   ( turnTEIP5intoPlain
        =   
          .   !arg:(?inputtok.?inputseg)
            &   !inputseg
              :   ( span
                  .     ? (from.@(?:"#" ?fr)) ?
                      : ? (to.@(?:"#" ?to)) ?
                      : ? ("xml:id".?Sid) ?
                    , 
                  )
                  ?inputseg
            & :?sep
            &   map
              $ ( ( 
                  =   
                    .     !arg
                        : ( span
                          .     ? (from.?from) ?
                              : ? ("xml:id".?Tid) ?
                            , ?word
                          )
                      &   !sep
                          ( (   !Tid:!to
                              & 1:?wno
                              & \n:?sep
                              &   !inputseg
                                :   ( span
                                    .     ? (from.@(?:"#" ?fr)) ?
                                        : ? (to.@(?:"#" ?to)) ?
                                        : ? ("xml:id".?Sid) ?
                                      , 
                                    )
                                    ?inputseg
                            |   1+!wno:?wno
                              & :?sep
                            )
                          & !word
                          )
                          " "
                  )
                . !inputtok
                )
        )
      & (trim=.str$(vap$(.!arg." ")))
      & ( getProperties
        =     file javaProperties extra
            , cor lem mrf ner pos seg snt stc stx tok
            , transl lang filter ftr
          .     !arg
              : ( ?file
                . ?extra
                . ?cor,?lem,?mrf,?ner,?pos,?seg,?snt,?stc,?stx,?tok
                . ?lang
                )
            &     (tokenize.tok)
                  ("cdc_tokenize".tok)
                  (cleanxml.)
                  (ssplit.seg)
                  (pos.pos)
                  (lemma.lem)
                  (ner.ner)
                  (parse.stc)
                  (depparse.stx)
                  (coref.cor)
                  (natlog.)
                  (openie.)
                  (kbp.)
                  (entitylink.ner)
                  (sentiment.snt)
                  (quote.)
                  (mwt.tok)
              : ?transl
            & get$(!file,STR):?javaProperties
            & put$(!javaProperties,javaProperties,NEW)
            &   (     mop
                    $ ( 
                      .   vap
                        $ ( ( 
                            =   
                              .   @(!arg:"#" ?)&
                                |   @( !arg
                                     : (?prop "=" ?val|?prop ":" ?val)
                                     )
                                  & trim$!prop:?prop
                                  & trim$!val:?val
                                  & (   !prop:annotators
                                      & (   !lang:en
                                          & ( @(!val:? ",parse" ?)
                                            | str$(!val ",parse"):?val
                                            )
                                        | 
                                        )
                                      & put$(str$(!val \n),val,NEW)
                                      &     mop
                                          $ ( 
                                            .     vap
                                                $ ( ( 
                                                    =   
                                                      .     (     !transl
                                                                :   ?
                                                                    (!arg.?tt)
                                                                    ?
                                                              & !!tt:1
                                                            |   !lang:zh
                                                              &   !arg
                                                                : lemma
                                                              & "lemma is no-op for Chinese but currently needed because coref demands it (bad old requirements system)"
                                                            )
                                                          & !arg
                                                        | 
                                                    )
                                                  . !val
                                                  . ","
                                                  )
                                              : ?filter
                                            . (=a b)
                                            . (=,)
                                            )
                                        : ?val
                                      & put$(str$(!val \n),val,APP)
                                    |   @(!prop:?ftr "." ?)
                                      & put$(!ftr \n,filter,APP)
                                      & put$(!filter \n,filter,APP)
                                      &     (     !lang
                                                : (ar|zh)
                                              & segment
                                            | 
                                            )
                                            !filter
                                        : ? !ftr ?
                                    )
                                  & (!prop..str$!val)
                                | 
                            )
                          . !javaProperties
                          . \n
                          )
                      . (=a b)
                      . (=+)
                      )
                  + !extra
                , 
                )
              : ?jsonProperties
            & lst$(jsonProperties,jsonProperties0,NEW)
            & jsn$!jsonProperties:?jsonProperties
            & put$(!jsonProperties,jsonProperties,NEW)
            & !jsonProperties
        )
      & ( percentencode
        =   c prc reserved
          .   ( prc
              =   
                .     @(!arg:%@?c ?arg)
                    &   (   !c:"+"
                          & "%2B is decoded to a space, presumably because percent decoding is done a second time somewhere. The solution is a hack: Percent encoding the %!"
                          & "%25"
                        | "%"
                        )
                        d2x$(asc$!c)
                        prc$!arg
                  | 
              )
            &   str
              $ ( vap
                $ ( ( 
                    =   
                      .     ( !('("-" "." "_" "~":? ()$arg ?))
                            |   !arg
                              : (~<A:~>Z|~<a:~>z)
                            )
                          & !arg
                        | prc$!arg
                    )
                  . !arg
                  )
                )
        )
      & ( transform
        =     Tokenized/SegmentedPlainText tmp1 tmp2 formatO lang language properties period
            , cor lem mrf ner pos seg snt stc stx tok
          .     !arg
              : ( ?formatO
                . ?lang
                . ?language
                . ?properties
                . ?period
                . ?Tokenized/SegmentedPlainText
                . ?tmp1
                . ?tmp2
                . ?cor
                . ?lem
                . ?mrf
                . ?ner
                . ?pos
                . ?seg
                . ?snt
                . ?stc
                . ?stx
                . ?tok
                )
            & put$(!Tokenized/SegmentedPlainText,!tmp1,NEW)
            & put$(!Tokenized/SegmentedPlainText,tmp1,NEW)
            & put$(!properties,properties,NEW)
            &     getProperties
                $ ( !properties
                  . (outputFormat..json)+(timeout..500000)
                  . !cor,!lem,!mrf,!ner,!pos,!seg,!snt,!stc,!stx,!tok
                  . !lang
                  )
              : ?properties
            & put$(!properties,properties2,NEW)
            &     str
                $ ( "wget --post-file "
                    !tmp1
                    " 'http://localhost:9000/?properties="
                    percentencode$!properties
                    "' -O "
                    !tmp2
                    " --"
                  )
              : ?command
            & put$(str$!command,command,NEW,BIN)
            & sys$!command
            & ( !formatO:json&get$(!tmp2,STR)
              |   get$(!tmp2,JSN):?json
                & lst$(json,json,NEW)
                &   str
                  $ ( toML
                    $ ( (its.turnJSONintoTEIP5)
                      $ (!json.!cor,!lem,!mrf,!ner,!pos,!seg,!snt,!stc,!stx,!tok)
                      )
                    )
              )
        )
      &   !arg
        : ( ?formatO
          . ?lang
          . ?language
          . ?properties
          . ?period
          . ?inputtok
          . ?inputseg
          . ?output
          . ?tmp1
          . ?tmp2
          . ?cor
          . ?lem
          . ?mrf
          . ?ner
          . ?pos
          . ?seg
          . ?snt
          . ?stc
          . ?stx
          . ?tok
          )
      &   put
        $ (   formatO
              !formatO
              lang
              !lang
              language
              !language
              properties
              !properties
              inputtok
              !inputtok
              inputseg
              !inputseg
              cor
              !cor
              lem
              !lem
              mrf
              !mrf
              ner
              !ner
              pos
              !pos
              seg
              !seg
              snt
              !snt
              stc
              !stc
              stx
              !stx
              tok
              !tok
          , Lang
          , NEW
          , BIN
          )
      & (get$"langtable.bra":?langtable|)
      &   (   @(!inputseg:?format "/")
            & ( !format:flat&get$(!inputtok,STR)
              |     nestML$(get$(!inputtok,X ML TRM))
                  : ? (spanGrp.?,?xmlsent) ?
                &   str
                  $ ( map
                    $ ( ( 
                        =   
                          .   !arg:(?.?,?arg)&!arg \n
                            | 
                        )
                      . !xmlsent
                      )
                    )
              )
          |     nestML$(get$(!inputtok,X ML TRM))
              : ? (spanGrp.?,?xmltok) ?
            &   nestML$(get$(!inputseg,X ML TRM))
              : ? (spanGrp.?,?xmlseg) ?
            & str$(turnTEIP5intoPlain$(!xmltok.!xmlseg))
          )
        : ?Tokenized/SegmentedPlainText
      & lst$(Tokenized/SegmentedPlainText,TokenizedSegmentedPlainText,NEW)
      &     transform
          $ ( !formatO
            . !lang
            . !language
            . !properties
            . !period
            . !Tokenized/SegmentedPlainText
            . !tmp1
            . !tmp2
            . !cor
            . !lem
            . !mrf
            . !ner
            . !pos
            . !seg
            . !snt
            . !stc
            . !stx
            . !tok
            )
        : ?OuTput
      & put$(!OuTput,!output,NEW)
  )
  ( new
  =   
    .   ~
      |     ( arg$
            . arg$
            . arg$
            . arg$
            . arg$
            . arg$
            . arg$
            . arg$
            . arg$
            . arg$
            . arg$
            . arg$
            . arg$
            . arg$
            . arg$
            . arg$
            . arg$
            . arg$
            . arg$
            . arg$
            )
          : ( ?formatO
            . ?lang
            . ?language
            . ?properties
            . ?period
            . ?inputtok
            . ?inputseg
            . ?output
            . ?tmp1
            . ?tmp2
            . ?cor
            . ?lem
            . ?mrf
            . ?ner
            . ?pos
            . ?seg
            . ?snt
            . ?stc
            . ?stx
            . ?tok
            )
        &   (its.doit)
          $ ( !formatO
            . !lang
            . !language
            . !properties
            . !period
            . !inputtok
            . !inputseg
            . !output
            . !tmp1
            . !tmp2
            . !cor
            . !lem
            . !mrf
            . !ner
            . !pos
            . !seg
            . !snt
            . !stc
            . !stx
            . !tok
            )
  );

r=
  get'("corenlpx.bra",TXT)
& rmv$(str$(corenlpx ".bak"))
& ren$("corenlpx.bra".str$(corenlpx ".bak"))
&   put
  $ ( "{corenlpx.bra

Transform Clarin token/segment annotation to plain text, one sentence per line. Run CoreNLP.
Output JSON or TEI-P5.
}

"
    , "corenlpx.bra"
    , NEW
    , BIN
    )
& lst'(X,"corenlpx.bra",APP,BIN,WYD)
& put'(\n,"corenlpx.bra",APP,BIN)
& lst'(r,"corenlpx.bra",APP,BIN,WYD)
& put$(str$("\nnew'" X ";\n"),"corenlpx.bra",APP,BIN)
& ;

new'X;
