{corenlpx.bra

Transform Clarin token/segment annotation to plain text, one sentence per line. Run CoreNLP.
Output JSON.
}

X=
  ( doit
  =     output tmp1 tmp2 A B C D E F G H
      , xmlseg xmltok lang period
    .   ( turnTEIP5intoPlain
        =   
          .   !arg:(?inputtok.?inputseg)
            &   !inputseg
              :   ( span
                  .     ? (from.@(?:"#" ?fr)) ?
                      : ? (to.@(?:"#" ?to)) ?
                      : ? ("xml:id".?Sid) ?
                    , 
                  )
                  ?inputseg
            & :?sep
            &   map
              $ ( ( 
                  =   
                    .     !arg
                        : ( span
                          .     ? (from.?from) ?
                              : ? ("xml:id".?Tid) ?
                            , ?word
                          )
                      &   !sep
                          ( (   !Tid:!to
                              & 1:?wno
                              & \n:?sep
                              &   !inputseg
                                :   ( span
                                    .       ?
                                            (from.@(?:"#" ?fr))
                                            ?
                                        :   ?
                                            (to.@(?:"#" ?to))
                                            ?
                                        : ? ("xml:id".?Sid) ?
                                      , 
                                    )
                                    ?inputseg
                            |   1+!wno:?wno
                              & :?sep
                            )
                          & !word
                          )
                          " "
                  )
                . !inputtok
                )
        )
      & ( turnJSONintoTEIP5
        =   s segid sentnr S L P tfrom tto
          .   !arg:(?conll.?xmltok.?xmlseg)
            & TODO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            & 1:?sentnr
            & :?s
            &     vap
                $ ( ( 
                    =   prefix sentid
                      .     !arg:
                          & :?S
                          &   whl
                            ' ( !s:%?L ?s
                              & !L !S:?S
                              )
                          & (.!S)
                        | @(!arg:"#" ?)&
                        |     !arg
                            : @( ?
                               :   ?from
                                   \t
                                   ?word
                                   \t
                                   ?lemma
                                   \t
                                   ?pos
                                   \t
                                   ?
                                   \t
                                   ?mrf
                                   \t
                                   ?to
                                   \t
                                   ?h
                                   \t
                                   ?
                                   \t
                                   ?
                               )
                          &     (!from.!word.!lemma.!pos.!mrf.!to.!h)
                                !s
                            : ?s
                          & 
                    )
                  . !conll
                  . \n
                  )
              : ?conllS
            &     map
                $ ( ( 
                    =   prefix sentid con
                      .   !arg:(.?con)
                        & :?S:?L:?P
                        & str$(!segid "." !sentnr):?sentid
                        & str$(!segid "." !sentid "."):?prefix
                        &   !xmlseg
                          :   ( span
                              .       ?
                                      (from.@(?:"#" ?tfrom))
                                      ?
                                  : ( ? (to.@(?:"#" ?tto)) ?
                                    | ?&!tfrom:?tto
                                    )
                                , 
                              )
                              ?xmlseg
                        &   !xmltok
                          :   ?
                              ( span
                              . ?a ("xml:id".!tfrom) ?b,?c
                              )
                              ?xmltok
                        &     ( span
                              . !a ("xml:id".!tfrom) !b,!c
                              )
                              ( !tto:!tfrom&
                              |     !xmltok
                                  :   ?M
                                      ( span
                                      .   ?d ("xml:id".!tto) ?e
                                        , ?f
                                      )
                                      ?xmltok
                                &   !M
                                    ( span
                                    . !d ("xml:id".!tto) !e,!f
                                    )
                              )
                          : ?toks
                        &     map
                            $ ( ( 
                                =   
                                  .     !arg
                                      : ( ?from
                                        . ?word
                                        . ?lemma
                                        . ?pos
                                        . ?mrf
                                        . ?to
                                        . ?h
                                        )
                                    &   !toks
                                      :   ( span
                                          .   ? ("xml:id".?tid) ?
                                            , !word
                                          )
                                          ?toks
                                    & (!tid.!from.!lemma.!pos.!mrf.!to.!h)
                                )
                              . !con
                              )
                          : ?S
                        &     map
                            $ ( ( 
                                =   
                                  .     !arg
                                      : ( ?tid
                                        . ?from
                                        . ?lemma
                                        . ?pos
                                        . ?mrf
                                        . ?to
                                        . ?h
                                        )
                                    & ( !tid
                                      . !lemma
                                      . !pos
                                      . !mrf
                                      .       !S
                                            : ? (?nto.!to.?) ?
                                          & !nto
                                        | !to
                                      . !h
                                      )
                                )
                              . !S
                              )
                          : ?S
                        & !S
                    )
                  . !conllS
                  )
              : ?conllT
            & ( TEI
              .   (xmlns."http://www.tei-c.org/ns/1.0")
                ,   (teiHeader.,)
                    ( text
                    .   
                      ,   ( spanGrp
                          .   (ana.lemma)
                            ,   map
                              $ ( ( 
                                  =   
                                    .     !arg
                                        : (?tid.?lemma.?pos.?mrf.?to.?h)
                                      & ( span
                                        .   (from.str$("#" !tid))
                                          , !lemma
                                        )
                                  )
                                . !conllT
                                )
                          )
                          ( spanGrp
                          .   (ana.pos)
                            ,   map
                              $ ( ( 
                                  =   
                                    .     !arg
                                        : (?tid.?lemma.?pos.?mrf.?to.?h)
                                      & ( span
                                        .   (from.str$("#" !tid))
                                          , !pos
                                        )
                                  )
                                . !conllT
                                )
                          )
                          ( spanGrp
                          .   (ana.morphology)
                            ,   map
                              $ ( ( 
                                  =   
                                    .     !arg
                                        : (?tid.?lemma.?pos.?mrf.?to.?h)
                                      & ( span
                                        .   (from.str$("#" !tid))
                                          , !mrf
                                        )
                                  )
                                . !conllT
                                )
                          )
                          ( spanGrp
                          .   (ana.syntax)
                            ,   map
                              $ ( ( 
                                  =   
                                    .     !arg
                                        : (?tid.?lemma.?pos.?mrf.?to.?h)
                                      & ( span
                                        .   (from.str$("#" !tid))
                                          ,   (     !to
                                                  : (0|)
                                                & 
                                              | ( link
                                                .   (target.str$("#" !to))
                                                  , 
                                                )
                                              )
                                              (term.,str$("ud-syn:" !h))
                                        )
                                  )
                                . !conllT
                                )
                          )
                    )
              )
        )
      & ( transform
        =   Tokenized/SegmentedPlainText tmp1 tmp2 lang period
          .     !arg
              : (?lang.?period.?Tokenized/SegmentedPlainText.?tmp1.?tmp2)
            & put$(!Tokenized/SegmentedPlainText,!tmp1,NEW)
            &   (   ~
                  &   !langtable
                    :   ?
                        ( !lang
                        .   ?p
                          & ( !p:
                            | !p:? !period ?
                            )
                        . ?Lingua
                        )
                        ?
                  &   str
                    $ ( "../bin/udpipe --tag --parse ./udpipe-ud-2.5-191206/"
                        !Lingua
                        " "
                        !tmp1
                        " > "
                        !tmp2
                      )
                |   str
                  $ ( "wget --post-file "
                      !tmp1
                      " 'localhost:9000/?properties={\"annotators\":\"tokenize,ssplit,pos,lemma,ner,sentiment\",\"outputFormat\":\"json\",\"tokenize.whitespace\":\"true\",\"ssplit.newlineIsSentenceBreak\":\"always\",\"outputFormat\":\"json\"}' -O "
                      !tmp2
                      " -"
                    )
                )
              : ?command
            & sys$!command
            & get$(!tmp2,STR)
        )
      &   !arg
        : (?lang.?period.?inputtok.?inputseg.?output.?tmp1.?tmp2)
      & get$"langtable.bra":?langtable
      &   nestML$(get$(!inputtok,X ML TRM))
        : ? (spanGrp.?,?xmltok) ?
      &   nestML$(get$(!inputseg,X ML TRM))
        : ? (spanGrp.?,?xmlseg) ?
      &   str$(turnTEIP5intoPlain$(!xmltok.!xmlseg))
        : ?Tokenized/SegmentedPlainText
      &     transform
          $ (!lang.!period.!Tokenized/SegmentedPlainText.!tmp1.!tmp2)
        : ?jsonable
      & put$(jsn$!jsonable,!output,NEW)
  )
  ( new
  =   
    .   ~
      |     (   ~
              & (da.c21.IfacettokF.IfacetsegF."testout.xml".tmp1.tmp2)
            | (arg$.arg$.arg$.arg$.arg$.arg$.arg$)
            )
          : (?lang.?period.?inputtok.?inputseg.?output.?tmp1.?tmp2)
        &   (its.doit)
          $ (!lang.!period.!inputtok.!inputseg.!output.!tmp1.!tmp2)
  );

r=
  get'("corenlpx.bra",TXT)
& rmv$(str$(corenlpx ".bak"))
& ren$("corenlpx.bra".str$(corenlpx ".bak"))
&   put
  $ ( "{corenlpx.bra

Transform Clarin token/segment annotation to plain text, one sentence per line. Run CoreNLP.
Output JSON.
}

"
    , "corenlpx.bra"
    , NEW
    , BIN
    )
& lst'(X,"corenlpx.bra",APP)
& put'(\n,"corenlpx.bra",APP,BIN)
& lst'(r,"corenlpx.bra",APP)
& put$(str$("\nnew'" X ";\n"),"corenlpx.bra",APP,BIN)
& ;

new'X;
