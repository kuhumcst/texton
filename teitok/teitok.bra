{teitok.bra
Takes a TEI P5 document and creates <w> and <c> elements.
Get the casing right for Danish TEI P5 texts}

X=
  ( teitok
  =   input abbreviations style language,SentenceEndingAbbrSeen
    .   !arg:(?input.?style.?abbreviations.?language)
      & :?SentenceEndingAbbrSeen
      & new$hash:?Mabbr
      & new$hash:?Eabbr
      & (Mabbr..ISO)$
      & (Eabbr..ISO)$
      &   map
        $ ( ( 
            =   
              .   ( @(!arg:" " ?arg)&(Eabbr..insert)$(!arg.)
                  | (Mabbr..insert)$(!arg.)
                  )
                & !arg
            )
          . !abbreviations
          )
      & nestML$(get$(!input,X ML)):?xml
      & !xml:?XXX (TEI.?teiatt,?AAA (text.?textatt,?text) ?DDD) ?YYY
      & 0:?tok:?sen:?IS
      & ( Sen
        = R.  !IS:?R
            & 0:?IS
            & !R+!sen:?sen
        )
      & ( trm
        =   
          .     whl
              ' @( !arg
                 : (" "|\t|\n|\r) ?arg
                 )
            &   whl
              ' @( !arg
                 : ?arg (" "|\t|\n|\r)
                 )
            & !arg
        )
      & ( trim
        =   A B
          . !arg:?A %@?B ?arg&!A trm$!B trim$!arg|!arg
        )
      & ( trq
        =   att sub nm A Z a z w,wa W ad XX ad
          .     whl
              ' (   !arg
                  :   ?A
                      (w.?wa,?W)
                      ( (add|del|ex):?ad
                      . ?att,~(? (c.? (type.p) ?,?) ?):?XX
                      )
                      ?Z
                &     !A
                      (w.!wa,trim$!W (!ad.!att,content$!XX))
                      (!ad:del&!Z|tok-1$(!Z.!wa))
                  : ?arg
                )
            &   whl
              ' (   !arg
                  :   ?A
                      ((add|del|ex):?ad.?att,?XX)
                      (w.?wa,?W)
                      ?Z
                &     !A
                      (w.!wa,(!ad.!att,content$!XX) trim$!W)
                      (!ad:del&!Z|tok-1$(!Z.!wa))
                  : ?arg
                )
            &   whl
              ' (   !arg
                  :   ?A
                      (w.(S.?) (T.?):?wa,?W)
                      (w.(S.?) (T.?):?att,?XX)
                      ?Z
                & !A (w.!wa,trim$(!W !XX)) tok-1$(!Z.!wa):?arg
                )
            &   whl
              ' ( !arg:?A (lb.(break.no),) (w.?wb,?W) ?Z
                & :?L
                &   whl
                  ' ( !A:?A (?e.?I)
                    & !e:~w
                    & (   !e:c
                        & !I:(? (type.s) ?,?)
                      | (!e.!I) !L:?L
                      )
                    )
                & !e:w
                & !I:(?wa,?V)
                &   !A (w.!wa,trim$(!V !L (lb.(break.no),) !W)) tok-1$(!Z.!wa)
                  : ?arg
                )
            &   map
              $ ( ( 
                  =   
                    .   !arg:(?e.?att,?sub)&(!e.!att,trq$!sub)
                      | !arg
                  )
                . !arg
                )
        )
      & ( findIDs
        =   fnd IDs
          .   new$hash:?IDs
            & ( fnd
              =   att sub nm id
                .   whl
                  ' ( !arg:? (?.?att,?sub) ?arg
                    & (   !att
                        :   ?
                            ( [%( low$!sjt:(id|"xml:id")
                                & !sjt:?nm
                                )
                            . ?id&(IDs..insert)$(!id.!nm)
                            )
                            ?
                      | 
                      )
                    & fnd$!sub
                    )
              )
            & fnd$!arg
            & !IDs
        )
      & findIDs$!text:?IDs
      & 0:?ID
      & ( IDgen
        =   id
          .     whl
              ' ( 1+!ID:?ID
                & str$(i !ID):?id
                & (IDs..find)$!id
                )
            & !id
        )
      & ( renumber
        =   rbr S T ot nt s t
          .   ( rbr
              =   att sub nm A Z a z e
                .   map
                  $ ( ( 
                      =   
                        .     !arg:(?e.?att,?sub)
                            & (   !att:?a (PTB.?) ?z
                                & (!e.!a !z,!sub):?arg
                              | 
                              )
                            & (   !e:(w|c)
                                & !att:? (S.?s) ?:?a (T.?t) ?z
                                & ( !s:!S
                                  |   !s:?S
                                    & 1:?T
                                    & 0:?ot
                                  )
                                & ( !T:!t&!arg
                                  |   !T+1:?T
                                    & ( !t:!T&!arg
                                      |     !t
                                          : ( !ot
                                            | ?ot&!T:?nt
                                            )
                                        & ( !e
                                          .   !a (T.!nt) !z
                                            ,   !e:w&trim$!sub
                                              | !sub
                                          )
                                      )
                                  )
                              | (!e.!att,rbr$!sub)
                              )
                          | !arg
                      )
                    . !arg
                    )
              )
            & 0:?S
            & 0:?ot
            & rbr$!arg
        )
      & ( assignIDs
        =   asn
          .   ( asn
              =   att sub nm A Z a z
                .   map
                  $ ( ( 
                      =   
                        .     !arg:(?e.?att,?sub)
                            & (   !e:(w|c)
                                & (     !att
                                      :   ?a
                                          ( [%(   low$!sjt
                                                : (id|"xml:id")
                                              & !sjt:?nm
                                              )
                                          . ?id
                                          )
                                          ?z
                                    & ( !e
                                      .   !a ("xml:id".!id) !z
                                        ,   !e:w&trim$!sub
                                          | !sub
                                      )
                                  | ( !e
                                    .   ("xml:id".IDgen$) !att
                                      ,   !e:w&trim$!sub
                                        | !sub
                                    )
                                  )
                              | (!e.!att,asn$!sub)
                              )
                          | !arg
                      )
                    . !arg
                    )
              )
            & asn$!arg
        )
      & ( inc1
        =   a z T e c
          .     !arg:(?e.?a (T.?T) ?z,?c)
              & (!e.!a (T.1+!T) !z,!c)
            | !arg
        )
      & ( inc2
        =   a z T e c
          .     !arg:(?e.?a (T.?T) ?z,?c)
              & (!e.!a (T.2+!T) !z,!c)
            | !arg
        )
      & ( contr
        =   a b A B S T E
          .     whl
              ' (   !arg
                  :   ?A
                      (w.(S.?S) (T.?T),?B)
                      (c.(type.p) (S.!S) (T.!T),"'")
                      ( w
                      .   (S.!S) (T.!T)
                        ,   ( ll
                            | ve
                            | re
                            | s
                            | m
                            | d
                            )
                          : ?E
                      )
                      ?Z
                &     !A
                      (w.(S.!S) (T.!T),!B)
                      (c.(type.p) (S.!S) (T.!T+1),"'")
                      (w.(S.!S) (T.!T+1),!E)
                      map$(inc1.!Z)
                  : ?arg
                )
            &   whl
              ' (   !arg
                  :   ?A
                      (w.(S.?S) (T.?T),@(?:%?B n))
                      (c.(type.p) (S.!S) (T.!T),"'")
                      (w.(S.!S) (T.!T),t)
                      ?Z
                &     !A
                      (w.(S.!S) (T.!T),!B)
                      (w.(S.!S) (T.!T+1),n)
                      (c.(type.p) (S.!S) (T.!T+1),"'")
                      (w.(S.!S) (T.!T+1),t)
                      map$(inc1.!Z)
                  : ?arg
                )
            &   whl
              ' (   !arg
                  :   ?A
                      (w.(S.?S) (T.?T),d)
                      (c.(type.p) (S.!S) (T.!T),"'")
                      (w.(S.!S) (T.!T),ye)
                      ?Z
                &     !A
                      (w.(S.!S) (T.!T),d)
                      (c.(type.p) (S.!S) (T.!T),"'")
                      (w.(S.!S) (T.!T+1),ye)
                      map$(inc1.!Z)
                  : ?arg
                )
            &   whl
              ' (   !arg
                  :   ?A
                      (w.(S.?S) (T.?T),more)
                      (c.(type.p) (S.!S) (T.!T),"'")
                      (w.(S.!S) (T.!T),n)
                      ?Z
                &     !A
                      (w.(S.!S) (T.!T),more)
                      (c.(type.p) (S.!S) (T.!T+1),"'")
                      (w.(S.!S) (T.!T+1),n)
                      map$(inc1.!Z)
                  : ?arg
                )
            &   whl
              ' (   !arg
                  :   ?A
                      (c.(type.p) (S.?S) (T.?T),"'")
                      ( w
                      .   (S.!S) (T.!T)
                        , @(?:t ((is|was):?B))
                      )
                      ?Z
                &     !A
                      (c.(type.p) (S.!S) (T.?T),"'")
                      (w.(S.!S) (T.!T),t)
                      (w.(S.!S) (T.!T+1),!B)
                      map$(inc1.!Z)
                  : ?arg
                )
            &   whl
              ' (   !arg
                  :   ?A
                      ( w
                      .   (S.?S) (T.?T)
                        , [%( (whaddya.wha dd ya) (whatcha.wha t cha)
                            : ? (!sjt.%?a %?b %?c) ?
                            )
                      )
                      ?Z
                &     !A
                      (w.(S.!S) (T.!T),!a)
                      (w.(S.!S) (T.!T+1),!b)
                      (w.(S.!S) (T.!T+2),!c)
                      map$(inc2.!Z)
                  : ?arg
                )
            &   whl
              ' (   !arg
                  :   ?A
                      ( w
                      .   (S.?S) (T.?T)
                        , [%(   (cannot.can not)
                                (gimme.gim me)
                                (gonna.gon na)
                                (gotta.got ta)
                                (lemme.lem me)
                                (wanna.wan na)
                            : ? (!sjt.%?a %?b) ?
                            )
                      )
                      ?Z
                &     !A
                      (w.(S.!S) (T.!T),!a)
                      (w.(S.!S) (T.!T+1),!b)
                      map$(inc1.!Z)
                  : ?arg
                )
            & !arg
        )
      & ( rcontr
        =   rc S T ot nt s t
          .   ( rc
              =   att sub nm A Z a z e
                .   map
                  $ ( ( 
                      =   
                        .     !arg:(?e.?att,?sub)
                            & contr$!sub:?sub
                            & (!e.!att,rc$!sub)
                          | !arg
                      )
                    . !arg
                    )
              )
            & rc$!arg
        )
      & ( SplitAbbr
        =   A k K it OO wcount
          .   :?OO
            & 1:?it
            & 0:?wcount
            &   whl
              ' (   !arg
                  :   ?A
                      ( %@?k
                      : ( "'"
                        | "-"
                        | …
                        | "."
                        | "("
                        | ")"
                        | "["
                        | "]"
                        | "{"
                        | "}"
                        | ":"
                        | ","
                        | –
                        | —
                        | "!"
                        | ‹
                        | ›
                        | «
                        | »
                        | "?"
                        | ‘
                        | ’
                        | “
                        | ”
                        | ";"
                        | "\\"
                        | "/"
                        | \"
                        | "`"
                        )
                      )
                      ?arg
                & !k:?K
                & whl'(!arg:%@!k ?arg&!k !K:?K)
                &     !OO
                      ( !A:
                      | ( w
                        .     (S.Sen$)
                              ( T
                              .       (   0:!wcount
                                        & 1:?wcount
                                      | !it
                                      )
                                    + !tok
                                  : ?tok
                                & 0:?it
                                & !tok
                              )
                          ,   trim$(str$!A):?A
                            & (   upp$!A:!A
                                & ( low$!A:!A
                                  | @(!A:? [>1)&1:?it
                                  )
                              | 
                              )
                            & !A
                        )
                      )
                      ( c
                      .     (type.p)
                            (S.Sen$)
                            ( T
                            .   !it+!tok:?tok
                              & 0:?it
                              & !tok
                            )
                        , str$!K
                      )
                  : ?OO
                )
            &   !OO
                ( !arg:
                | ( w
                  .     (S.Sen$)
                        ( T
                        .   !it+!tok:?tok
                          & 0:?it
                          & !tok
                        )
                    , trim$(str$!arg)
                  )
                )
        )
      & ( Split
        =   A k K it OO
          .   :?OO
            & 1:?it
            &   whl
              ' (   !arg
                  :   ?A
                      ( %?k
                      : ( "'"
                        | "-"
                        | …
                        | "."
                        | "("
                        | ")"
                        | "["
                        | "]"
                        | "{"
                        | "}"
                        | ":"
                        | ","
                        | –
                        | —
                        | "!"
                        | ‹
                        | ›
                        | «
                        | »
                        | "?"
                        | ‘
                        | ’
                        | “
                        | ”
                        | ";"
                        | "\\"
                        | "/"
                        | \"
                        | "`"
                        )
                      )
                      ?arg
                & !k:?K
                & whl'(!arg:%@!k ?arg&!k !K:?K)
                & "K is a list of punct chars
                   '    does not increase token id
                   -    does not increase token id
                   …    increases token id if nothing comes after it
                   .    increases token id if nothing comes after it
                
                   Other (sequences of) punctuation always increase token id."
                &     !OO
                      ( !A:
                      | ( w
                        .     (S.Sen$)
                              ( T
                              .   !it+!tok:?tok
                                & 0:?it
                                & !tok
                              )
                          , trim$(str$!A)
                        )
                      )
                      ( c
                      .     (type.p)
                            (S.Sen$)
                            ( T
                            .       !K
                                  : ( "." "." "."
                                    | …
                                    | "."
                                    |   ( "("
                                        | ")"
                                        | "["
                                        | "]"
                                        | "{"
                                        | "}"
                                        | ":"
                                        | ","&~(!A:? #%@)
                                        | –
                                        | —
                                        | "!"
                                        | ‹
                                        | ›
                                        | «
                                        | »
                                        | "?"
                                        | ‘
                                        | ’
                                        | “
                                        | ”
                                        | ";"
                                        | "\\"
                                        | "/"
                                        | \"
                                        | "`"
                                        )
                                        ?
                                    )
                                & 0:?it
                                & (   !arg:
                                    & "If nothing follows after punct, increase token id."
                                    & 1+!tok:?tok
                                  |     !K
                                      : ( "'"
                                        | "-"
                                        | "/"
                                        | ":"
                                        | …
                                        | "."
                                        | "." "." "."
                                        )
                                    & !tok
                                  | 2+!tok:?tok&-1+!tok
                                  )
                              |   !it+!tok:?tok
                                & 0:?it
                                & !tok
                            )
                        , str$!K
                      )
                  : ?OO
                )
            &   !OO
                ( !arg:
                | ( w
                  .     (S.Sen$)
                        ( T
                        .   !it+!tok:?tok
                          & 0:?it
                          & !tok
                        )
                    , trim$(str$!arg)
                  )
                )
        )
      & ( getAll
        =   K p
          .   !arg:(?K.?p)
            & !p:?P
            & whl'(!K:?K !p&!p !P:?P)
            & (!K.!P)
        )
      & ( llAteg
        =   K p
          .   !arg:(?K.?p)
            & !p:?P
            & whl'(!K:!p ?K&!p !P:?P)
            & (!K.!P)
        )
      & ( considerAbbrev
        =   A P kar kars nxt KRS Z
          .   !arg:(?arg.?nxt)
            & !arg:?A "."
            & getAll$(!A."."):(?A.?P)
            & (   ( !abb:abbr
                  |   !language:da
                    & !A:~(? (%@:~(#|"."|",")) ?)
                  |     !arg
                      : ? ((%@?kar&~(upp$!kar:low$!kar)) ?:?kars)
                    & str$!kars:?KRS
                    & ( (Mabbr..find)$!KRS
                      |   (Eabbr..find)$!KRS:? (!KRS.?) ?
                        & !KRS:?SentenceEndingAbbrSeen
                      |   upp$!KRS:!KRS
                        & !kars:? (%@?kar&upp$!kar:low$!kar) ?Z
                        & !Z:
                      | !nxt:(","|";"|":") ?
                      )
                  | !arg:% "." % ".":~(? "." "." ?)
                  )
                & SplitAbbr$!arg
              |   Split$!A
                  ( c
                  .     (type.p)
                        ( S
                        .   1+!tok:?TOK
                          & ( !tok:0&1+!sen:?sen
                            |   0:?tok
                              & 1:?IS
                              & !sen
                            )
                        )
                        (T.!TOK)
                    , str$!P
                  )
              )
        )
      & ( toksplit
        =   A N P Z tp PZ z F L,abb TOK chars kars kar
          .   !arg:(?arg.?abb)
            & ( !SentenceEndingAbbrSeen:
              |   :?SentenceEndingAbbrSeen
                & (   vap$((=.!arg).!arg):%?frst ?
                    & upp$!frst:!frst
                    & low$!frst:~!frst
                    & 0:?tok
                    & 1:?IS
                  | 
                  )
              )
            & ( !arg:
              |   vap$((=.!arg).!arg):?chars
                & ( considerAbbrev$(!chars.)
                  |     !chars
                      : ?A ((","|";"|":"):?P)
                    & getAll$(!A.!P):(?A.?P)
                    &   (considerAbbrev$(!A.!P)|Split$!A)
                        (c.(type.p) (S.Sen$) (T.1+!tok:?tok),!P)
                  |   !chars:?A (("!"|"?"):?P)
                    & getAll$(!A.!P):(?A.?P)
                    &   (considerAbbrev$(!A.!P)|Split$!A)
                        ( c
                        .     (type.p)
                              ( S
                              .   1+!tok:?TOK
                                & ( !tok:0&1+!sen:?sen
                                  |   0:?tok
                                    & 1:?IS
                                    & !sen
                                  )
                              )
                              (T.!TOK)
                          , !P
                        )
                  |     ( "("
                        | ")"
                        | "{"
                        | "}"
                        | "["
                        | "]"
                        | "<"
                        | ">"
                        | “
                        | ”
                        | ‘
                        | ’
                        | \"
                        | ‹
                        | ›
                        | «
                        | »
                        | "|"
                        | "'"
                        | "`"
                        )
                      : ?sep
                    &   !chars
                      : @(?F:("-"|–|!sep)) ?A
                    & llAteg$(!A.!F):(?A.?F)
                    &   (c.(type.p) (S.Sen$) (T.1+!tok:?tok),!F)
                        toksplit$(str$!A.!abb)
                  |   !('($chars:%?A @(?F:$sep)))
                    & getAll$(!A.!F):(?A.?F)
                    &   toksplit$(str$!A.!abb)
                        (c.(type.p) (S.Sen$) (T.1+!tok:?tok),!F)
                  | Split$!chars
                  )
              )
        )
      & ( Tx
        =   abb efter før
          .   !arg:(?arg.?abb.?før,?efter)
            & ( !arg:
              |     vap
                  $ ( ( 
                      =   
                        .   (@(!arg:?arg \r)|)
                          &   (c.(type.s),\n)
                              ( !arg:
                              |       vap
                                    $ ( ( 
                                        =   T
                                          .   (c.(type.s)," ")
                                              ( !arg:
                                              |   vap
                                                $ ( ( 
                                                    =   T
                                                      .   !arg:
                                                        | toksplit$(!arg.!abb)
                                                    )
                                                  . !arg
                                                  . \t
                                                  )
                                              )
                                        )
                                      . !arg
                                      . " "
                                      )
                                  : (c.(type.s) ?,?) ?arg
                                & !arg
                              )
                      )
                    . !arg
                    . \n
                    )
                : (c.(type.s) ?,?) ?arg
              )
            & ( concS
              =   A s S SER RES res
                .   :?SER:?RES
                  &   whl
                    ' ( !arg:~
                      & :?S
                      &   whl
                        ' ( !arg:(c.(type.s) ?,?A) ?arg
                          & !A !S:?S
                          )
                      &     (   !S:
                              & !arg:%?A ?arg
                              & !A
                            |   :?s
                              & whl'(!S:%?A ?S&!A !s:?s)
                              & (     !før
                                    : (c|lb|space)
                                  & 
                                |   !arg:
                                  &   !efter
                                    : (c|lb|space)
                                  & 
                                | (c.(type.s),str$!s)
                                )
                            )
                            !SER
                        : ?SER
                      & :?før
                      )
                  & whl'(!SER:%?res ?SER&!res !RES:?RES)
                  & !RES
              )
            & concS$!arg
        )
      & ( space
        =   
          .       !arg
                :   @( ?
                     : (" "|\n|\r|\t) ?
                     )
                    (~(c|lb|space).?)
                    ?
              & (c.(type.s),)
            | 
        )
      & ( ecaps
        =   før B
          .       !arg
                : ( @( ?
                     : ?B (" "|\n|\r|\t)
                     )
                  . ?før
                  )
              & (   ( !før:(c|lb|space)
                    | trm$!B:
                    )
                  & 
                | (c.(type.s),)
                )
            | 
        )
      & ( trav
        =   A e a S B aS abb før LIST
          .     !arg:(?arg.?abb.?før)
              & :?LIST
              &   whl
                ' ( !arg:?A (?e.?aS) ?B
                  &     ( 
                        .   Tx$(!A.!abb.!før,!e)
                            ( (   !e:w
                                & !aS:(?a,?S)
                                &   ecaps$(!A.!før)
                                    ( w
                                    .   !a (S.Sen$) (T.1+!tok:?tok)
                                      , trim$!S
                                    )
                                    space$!B
                              |   !e:c
                                & !aS:(?a,?S)
                                &   (c.!a (S.Sen$) (T.1+!tok:?tok),!S)
                                    ( !a:? (type.s) ?&
                                    | space$!B
                                    )
                              |   !e:(add|ex)
                                &   ecaps$(!A.!før)
                                    ( !e
                                    .   !aS:(?a,?S)&(!a,trav$(!S.!abb.))
                                      | !aS
                                    )
                                    space$!B
                              |   !e:del
                                & ecaps$(!A.!før) (!e.!aS) space$!B
                              |     !e
                                  : ( rdg
                                    | lem
                                    | app
                                    | linkGrp
                                    )
                                & (!e.!aS)
                              | (   !e
                                  : (   ( p
                                        | u
                                        | s
                                        | seg
                                        | head
                                        | note
                                        | back
                                        | front
                                        | div
                                        | argument
                                        | byline
                                        | closer
                                        | dateline
                                        | docAuthor
                                        | docDate
                                        | epigraph
                                        | floatingText
                                        | opener
                                        | postscript
                                        | salute
                                        | signed
                                        | trailer
                                        )
                                      & 1:?IS
                                      & 0:?tok
                                    | ?
                                    )
                                .     !aS:(?a,?S)
                                    & (!a,trav$(!S.!e:abbr|!abb.))
                                  | !aS
                                )
                              )
                            : ? (?før.?)
                            )
                        )
                        !LIST
                    : ?LIST
                  & !B:?arg
                  )
              & !arg:~(? (?.?) ?)
              & (.Tx$(!arg.!abb.!før,)) !LIST:?LIST
              & :?B
              & whl'(!LIST:(.?A) ?LIST&!A !B:?B)
              & !B
            | 
        )
      & ( contractwadddel
        =   content
          .   ( content
              =   A c
                .   !arg:?A (w.?,?c) ?arg&str$(!A !c content$!arg)
                  | !arg
              )
            & ( tok-1
              =   E sen
                .   !arg:(?arg.? (S.?sen) ?)
                  & ( E
                    =   A e a s p q t
                      .       !arg
                            :   ?A
                                ( ?e
                                .     ( ~(? (S.?) ?)
                                      | ? (S.Sen$) ?
                                      )
                                    : ?a
                                  , ?s
                                )
                                ?arg
                          &   !A
                              ( !e
                              .     !a:?p (T.?t) ?q
                                  & (!p (T.-1+!t) !q,!s)
                                | (!a,E$!s)
                              )
                              E$!arg
                        | !arg
                    )
                  & E$!arg
              )
            & trq$!arg
        )
      & ( remST
        =   E1 E2 S Sn e a c sent Sno acc A Z
          .   !arg:(?arg.?Sno)
            & :?acc:?sent
            &   whl
              ' ( !arg:%?E ?arg
                &   !E
                  : ( @&!acc !E:?acc
                    |   (?e.?a,?c)
                      & remST$(!c.!Sno):?c
                      & (   !a:?A (S.~!Sno:?Sno) ?Z
                          &     !sent
                                (   !acc
                                  : % %
                                  : ? (?.? (S.?) ?,?) ?(s.,!acc)
                                | !acc
                                )
                            : ?sent
                          & :?acc
                        | !acc (!e.!A !Z,!c):?acc
                        )
                    )
                )
            &   !sent
                ( !acc:% %:? (?.? (S.?) ?,?) ?(s.,!acc)
                | !acc
                )
        )
      & ( inverse
        =   L e
          .   :?L
            & whl'(!arg:%?e ?arg&!e !L:?L)
            & !L
        )
      & ( reverseAndProvideMissingOpeningTags
        =   el intra tnes closed sent artni e
          .   !arg:(?artni.?tnes)
            & inverse$!tnes:?SeNt
            & :?sent:?intra:?closed
            &   whl
              ' ( !tnes:%?el ?tnes
                & ( !el:(.?.)&!el !closed:?closed
                  | !el:(?e.?)&!closed:(.!e.) ?closed
                  | 
                  )
                & !el !sent:?sent
                )
            &   whl
              ' ( !closed:~
                & !artni:%?el ?artni
                & ( !el:(?e.?)&!closed:(.!e.) ?closed
                  | 
                  )
                & !el !sent:?sent
                )
            & (!artni.!sent)
        )
      & ( constructAsentence
        =   open intra tnes sents artni sent
          .   !arg:(?open.?intra.?tnes.?sents)
            & "Now 'open' should be empty."
            & (   !open:
                & inverse$!intra:?artni
                & reverseAndProvideMissingOpeningTags$(!artni.!tnes):(?artni.?sent)
                & (s.,!sent) !artni !sents:?sents
                & :?tnes:?intra
              | out$(STRANGE !el open !open)&get'
              )
            & (!open.!intra.!tnes.!sents)
        )
      & ( ser
        =   tnes open theS intra sents closed ort sent artni SorT
          .   :?tnes:?open:?theS:?intra:?sents
            & !arg:(?arg.?SorT)
            & !('($arg:?intra ((?.? ($SorT.?theS) ?) ?:?arg)))
            &   whl
              ' ( !arg:%?el ?arg
                & (   !el:(@|(?.?,?)|("!--".?))
                    & (   !el:("!--".?FGH)
                        & out$(comment !FGH)
                        & out$(open !open theS !theS)
                      | 
                      )
                    & (   !open:
                        & !('($arg:~(? (?.? ($SorT.$theS) ?) ?)))
                        & "atom or empty element not required in sentence"
                        & constructAsentence$(!open.!intra.!tnes.!sents):(?open.?intra.?tnes.?sents)
                        & !( 
                           ' ( $arg
                             : ?intra ((?.? ($SorT.?theS) ?) ?:?arg)
                             )
                           )
                        & !el !intra:?intra
                      |   "sentence atom has to wait for closing tag or end of sentence"
                        & !el !tnes:?tnes
                      )
                  |   !el:(.?e.)
                    & (   ( !open:(!e.?) ?open
                          | !('($arg:? (?.? ($SorT.$theS) ?) ?))
                          )
                        & "'el' belongs to sentence."
                        & !el !tnes:?tnes
                      |   "'el' is outside the sentence for now."
                        & constructAsentence$(!open.!intra.!tnes.!sents):(?open.?intra.?tnes.?sents)
                        & (   !( 
                               ' ( $arg
                                 : ?intra ((?.? ($SorT.?theS) ?) ?:?arg)
                                 )
                               )
                            & !el !intra:?intra
                          | inverse$(!el !intra):?intra&:?arg
                          )
                      )
                  |   !el:(?e.?a)
                    & (   !('($a:? ($SorT.?S) ?))
                        & (   !S:~!theS:?theS
                            &   constructAsentence$(!open.!intra.!tnes.!sents)
                              : (?open.?intra.?tnes.?sents)
                          | 
                          )
                        & !el !open:?open
                        & !el !tnes:?tnes
                      |   !el !open:?open
                        & (   !('($arg:? (?.? ($SorT.?) ?) ?))
                            & !el !tnes:?tnes
                          | !el !arg:?intra&:?arg
                          )
                      )
                  )
                )
            & inverse$(!intra !sents)
        )
      & trav$(!text..):?nbody
      & contractwadddel$!nbody:?nbody2
      &   (!style:PT&rcontr$!nbody2|!nbody2)
        : ?nmbody2
      & assignIDs$!nmbody2:?nnbody
      & renumber$!nnbody:?nrbody
      & get$(toML$!nrbody,X ML MEM):?serial
      & ser$(!serial.S):?nrbody
      & !XXX (TEI.!teiatt,!AAA (text.!textatt,!nrbody) !DDD) !YYY
  )
  ( new
  =   input abbr style
    .   ~
      |   
        & vap$((=.!arg).get$(abbr,STR).\n):?abbr
        &   ( get$(nabbr,STR):?nabbr&vap$((=.!arg).!nabbr.\n)
            | 
            )
          : ?nabbr
        & (its.teitok)$("test\\JEB-040.xml".simple.!nabbr !abbr.da):?XMLL
        & toML$!XMLL:?XMLLL
        & put$(!XMLLL,"test\\ParlaMint...shorter.out.xml",NEW)
      |   ~
        & vap$((=.!arg).get$(abbr,STR).\n):?abbr
        &   ( get$(nabbr,STR):?nabbr&vap$((=.!arg).!nabbr.\n)
            | 
            )
          : ?nabbr
        & (its.teitok)$("test\\ParlaMint...shorter.xml".simple.!nabbr !abbr.da):?XMLL
        & toML$!XMLL:?XMLLL
        & put$(!XMLLL,"test\\ParlaMint...shorter.out.xml",NEW)
      |   arg$:?input
        & arg$:?output
        & arg$:(PT|simple):?style
        & arg$:?abbreviations
        & arg$:?language
        &   ( !abbreviations:"-"&
            | vap$((=.!arg).get$(!abbreviations.STR).\n)
            | 
            )
          : ?abbr
        &   ( get$(nabbr,STR):?nabbr&vap$((=.!arg).!nabbr.\n)
            | 
            )
          : ?nabbr
        & (!language:~"-"|):?lang
        & put$(toML$((its.teitok)$(!input.!style.!nabbr !abbr.!lang)),!output,NEW)
  );

r=
  get'("teitok.bra",TXT)
& rmv$(str$(teitok ".bak"))
& ren$("teitok.bra".str$(teitok ".bak"))
&   put
  $ ( "{teitok.bra
Takes a TEI P5 document and creates <w> and <c> elements.
Get the casing right for Danish TEI P5 texts}

"
    , "teitok.bra"
    , NEW
    , WYD
    , BIN
    )
& lst'(X,"teitok.bra",APP,WYD,BIN)
& put'(\n,"teitok.bra",APP,WYD,BIN)
& lst'(r,"teitok.bra",APP,WYD,BIN)
& put$(str$("\nnew'" X ";\n"),"teitok.bra",APP,BIN)
& ;

new'X;
