{teitok.bra
ùïåùïãùîΩ-ùü†
Takes a TEI P5 document and creates <w> and <c> elementsout
Get the casing right for Danish TEI P5 texts}

X=
  ( teitok
  =     input abbreviations style language
      , SentenceEndingAbbrSeen COLLECT IDgen InsertS RemoveSpace RemoveSpaceFromS
      , Sen Split SplitAbbr Tx assignIDs adjustDAordinal
      , collectSvals considerAbbrev contr contractwadddel
      , ecaps findIDs getAll inc1 inc2 inverse llAteg
      , moveLeadingAndTrailingSpacesOutside perQlateS rcontr removeOutliers removeSpacesIfNoTokens
      , removeSuperfluousSpaces retrieveSsequences sing space
      , toksplit trav trim trm trq vlooi
      , AAA DDD Eabbr ID IDs IS Mabbr Sseq Sseq0 Sseq1 Sseq2
      , XXX XYZ YYY nbody nbody2 nmbody2 nnbody
      , sen teiatt text textatt tok xml content tok-1
      , complexTok peRlaT skweez smukkeser Sseq3 Sseq4
    .   ( Sen
        =   R
          .   !IS:?R
            & 0:?IS
            & !R+!sen:?sen
        )
      & ( trm
        =   
          .     whl
              ' @( !arg
                 :   (" "|\t|\n|\r)
                     ?arg
                 )
            &   whl
              ' @( !arg
                 :   ?arg
                     (" "|\t|\n|\r)
                 )
            & !arg
        )
      & ( trim
        =   A B
          .   !arg:?A %@?B ?arg&!A trm$!B trim$!arg
            | !arg
        )
      & ( content
        =   A c
          .     !arg:?A (w.?,?c) ?arg
              & str$(!A !c content$!arg)
            | !arg
        )
      & ( tok-1
        =   E sen
          .   !arg:(?arg.? (S.?sen) ?)
            & ( E
              =   A e a s p q t
                .       !arg
                      :   ?A
                          ( ?e
                          .     ( ~(? (S.?) ?)
                                | ? (S.Sen$) ?
                                )
                              : ?a
                            , ?s
                          )
                          ?arg
                    &   !A
                        ( !e
                        .     !a:?p (T.?t) ?q
                            & (!p (T.-1+!t) !q,!s)
                          | (!a,E$!s)
                        )
                        E$!arg
                  | !arg
              )
            & E$!arg
        )
      & ( trq
        =     att sub A Z
            , wa W ad XX ad
            , I L V XXY e narg wb
          .     whl
              ' (   !arg
                  :   ?A
                      (w.?wa,?W)
                      (   (add|del|ex)
                        : ?ad
                      .   ?att
                        ,   ~(? (c.? (type.p) ?,?) ?)
                          : ?XX
                      )
                      ?Z
                &     !A
                      (w.!wa,trim$!W (!ad.!att,content$!XX))
                      ( !ad:del&!Z
                      | tok-1$(!Z.!wa)
                      )
                  : ?arg
                )
            &   whl
              ' (   !arg
                  :   ?A
                      (   (add|del|ex)
                        : ?ad
                      . ?att,?XX
                      )
                      (w.?wa,?W)
                      ?Z
                &     !A
                      (w.!wa,(!ad.!att,content$!XX) trim$!W)
                      ( !ad:del&!Z
                      | tok-1$(!Z.!wa)
                      )
                  : ?arg
                )
            &   whl
              ' (   !arg
                  :   ?A
                      (w.(S.?) (T.?):?wa,?W)
                      (w.(S.?) (T.?):?att,?XX)
                      ?Z
                & !A (w.!wa,trim$(!W !XX)) tok-1$(!Z.!wa):?arg
                )
            & :?narg
            &   whl
              ' (   !arg
                  : ?A (lb.(break.no),) (w.?wb,?W) ?Z
                & :?L
                &   whl
                  ' ( !A:?A (?e.?I)
                    & !e:~w
                    & (   !e:c
                        & !I:(? (type.s) ?,?)
                      | (!e.!I) !L:?L
                      )
                    )
                & !e:w
                & !I:(?wa,?V)
                & trim$(!V !L (lb.(break.no),) !W):?XXY
                &     !narg
                      !A
                      (   !XXY:? (c.?,?) ?
                        &   map
                          $ ( ( 
                              =   
                                .   !arg:@&(w.!wa,!arg)
                                  | !arg
                              )
                            . !XXY
                            )
                      | (w.!wa,!XXY)
                      )
                  : ?narg
                & tok-1$(!Z.!wa):?arg
                )
            & !narg !arg:?arg
            &   map
              $ ( ( 
                  =   
                    .     !arg:(?e.?att,?sub)
                        & (!e.!att,trq$!sub)
                      | !arg
                  )
                . !arg
                )
        )
      & ( findIDs
        =   fnd IDs
          .   new$hash:?IDs
            & ( fnd
              =   att sub nm id
                .   whl
                  ' ( !arg:? (?.?att,?sub) ?arg
                    & (   !att
                        :   ?
                            ( [%( low$!sjt:(id|"xml:id")
                                & !sjt:?nm
                                )
                            . ?id&(IDs..insert)$(!id.!nm)
                            )
                            ?
                      | 
                      )
                    & fnd$!sub
                    )
              )
            & fnd$!arg
            & !IDs
        )
      & ( IDgen
        =   id
          .   !arg:? ("xml:id".?) ?&
            |     whl
                ' ( 1+!ID:?ID
                  & str$(i !ID):?id
                  & (IDs..find)$!id
                  )
              & !id
        )
      & ( assignIDs
        =   asn
          .   ( asn
              =   att sub nm a z
                .   map
                  $ ( ( 
                      =   e id
                        .     !arg:(?e.?att,?sub)
                            & (   !e:(w|c)
                                & (     !att
                                      :   ?a
                                          ( [%(   low$!sjt
                                                : (id|"xml:id")
                                              & !sjt:?nm
                                              )
                                          . ?id
                                          )
                                          ?z
                                    & ( !e
                                      .   !a ("xml:id".!id) !z
                                        ,     !e:w
                                            & trim$!sub
                                          | !sub
                                      )
                                  | ( !e
                                    .   !att
                                      ,   !e:w&trim$!sub
                                        | !sub
                                    )
                                  )
                              | (!e.!att,asn$!sub)
                              )
                          | !arg
                      )
                    . !arg
                    )
              )
            & asn$!arg
        )
      & ( inc1
        =   a z T e c
          .     !arg:(?e.?a (T.?T) ?z,?c)
              & (!e.!a (T.1+!T) !z,!c)
            | !arg
        )
      & ( inc2
        =   a z T e c
          .     !arg:(?e.?a (T.?T) ?z,?c)
              & (!e.!a (T.2+!T) !z,!c)
            | !arg
        )
      & ( contr
        =   a b A B S T E Z c
          .     whl
              ' (   !arg
                  :   ?A
                      (w.(S.?S) (T.?T),?B)
                      (c.(type.p) (S.!S) (T.!T),"'")
                      ( w
                      .   (S.!S) (T.!T)
                        ,   ( ll
                            | ve
                            | re
                            | s
                            | m
                            | d
                            )
                          : ?E
                      )
                      ?Z
                &     !A
                      (w.(S.!S) (T.!T),!B)
                      (c.(type.p) (S.!S) (T.!T+1),"'")
                      (w.(S.!S) (T.!T+1),!E)
                      map$(inc1.!Z)
                  : ?arg
                )
            &   whl
              ' (   !arg
                  :   ?A
                      (w.(S.?S) (T.?T),@(?:%?B n))
                      (c.(type.p) (S.!S) (T.!T),"'")
                      (w.(S.!S) (T.!T),t)
                      ?Z
                &     !A
                      (w.(S.!S) (T.!T),!B)
                      (w.(S.!S) (T.!T+1),n)
                      (c.(type.p) (S.!S) (T.!T+1),"'")
                      (w.(S.!S) (T.!T+1),t)
                      map$(inc1.!Z)
                  : ?arg
                )
            &   whl
              ' (   !arg
                  :   ?A
                      (w.(S.?S) (T.?T),d)
                      (c.(type.p) (S.!S) (T.!T),"'")
                      (w.(S.!S) (T.!T),ye)
                      ?Z
                &     !A
                      (w.(S.!S) (T.!T),d)
                      (c.(type.p) (S.!S) (T.!T),"'")
                      (w.(S.!S) (T.!T+1),ye)
                      map$(inc1.!Z)
                  : ?arg
                )
            &   whl
              ' (   !arg
                  :   ?A
                      (w.(S.?S) (T.?T),more)
                      (c.(type.p) (S.!S) (T.!T),"'")
                      (w.(S.!S) (T.!T),n)
                      ?Z
                &     !A
                      (w.(S.!S) (T.!T),more)
                      (c.(type.p) (S.!S) (T.!T+1),"'")
                      (w.(S.!S) (T.!T+1),n)
                      map$(inc1.!Z)
                  : ?arg
                )
            &   whl
              ' (   !arg
                  :   ?A
                      (c.(type.p) (S.?S) (T.?T),"'")
                      ( w
                      .   (S.!S) (T.!T)
                        , @(?:t ((is|was):?B))
                      )
                      ?Z
                &     !A
                      (c.(type.p) (S.!S) (T.?T),"'")
                      (w.(S.!S) (T.!T),t)
                      (w.(S.!S) (T.!T+1),!B)
                      map$(inc1.!Z)
                  : ?arg
                )
            &   whl
              ' (   !arg
                  :   ?A
                      ( w
                      .   (S.?S) (T.?T)
                        , [%( (whaddya.wha dd ya) (whatcha.wha t cha)
                            : ? (!sjt.%?a %?b %?c) ?
                            )
                      )
                      ?Z
                &     !A
                      (w.(S.!S) (T.!T),!a)
                      (w.(S.!S) (T.!T+1),!b)
                      (w.(S.!S) (T.!T+2),!c)
                      map$(inc2.!Z)
                  : ?arg
                )
            &   whl
              ' (   !arg
                  :   ?A
                      ( w
                      .   (S.?S) (T.?T)
                        , [%(   (cannot.can not)
                                (gimme.gim me)
                                (gonna.gon na)
                                (gotta.got ta)
                                (lemme.lem me)
                                (wanna.wan na)
                            : ? (!sjt.%?a %?b) ?
                            )
                      )
                      ?Z
                &     !A
                      (w.(S.!S) (T.!T),!a)
                      (w.(S.!S) (T.!T+1),!b)
                      map$(inc1.!Z)
                  : ?arg
                )
            & !arg
        )
      & ( rcontr
        =   rc
          .   ( rc
              =   att sub e
                .   map
                  $ ( ( 
                      =   
                        .     !arg:(?e.?att,?sub)
                            & contr$!sub:?sub
                            & (!e.!att,rc$!sub)
                          | !arg
                      )
                    . !arg
                    )
              )
            & rc$!arg
        )
      & ( SplitAbbr
        =   A k K it OO wcount
          .   :?OO
            & 1:?it
            & 0:?wcount
            &   whl
              ' (   !arg
                  :   ?A
                      ( %@?k
                      : ( "'"
                        | "-"
                        | ‚Ä¶
                        | "."
                        | "("
                        | ")"
                        | "["
                        | "]"
                        | "{"
                        | "}"
                        | ":"
                        | ","
                        | ‚Äì
                        | ‚Äî
                        | "!"
                        | ‚Äπ
                        | ‚Ä∫
                        | ¬´
                        | ¬ª
                        | "?"
                        | ‚Äò
                        | ‚Äô
                        | ‚Äú
                        | ‚Äù
                        | ";"
                        | "\\"
                        | "/"
                        | \"
                        | "`"
                        )
                      )
                      ?arg
                & !k:?K
                & whl'(!arg:%@!k ?arg&!k !K:?K)
                &     !OO
                      ( !A:
                      | ( w
                        .     (S.Sen$)
                              ( T
                              .       (   0:!wcount
                                        & 1:?wcount
                                      | !it
                                      )
                                    + !tok
                                  : ?tok
                                & 0:?it
                                & !tok
                              )
                          ,   trim$(str$!A):?A
                            & (   upp$!A:!A
                                & ( low$!A:!A
                                  |   @(!A:? [>1)
                                    & 1:?it
                                  )
                              | 
                              )
                            & !A
                        )
                      )
                      ( c
                      .     (type.p)
                            (S.Sen$)
                            ( T
                            .   !it+!tok:?tok
                              & 0:?it
                              & !tok
                            )
                        , str$!K
                      )
                  : ?OO
                )
            &   !OO
                ( !arg:
                | ( w
                  .     (S.Sen$)
                        ( T
                        .   !it+!tok:?tok
                          & 0:?it
                          & !tok
                        )
                    , trim$(str$!arg)
                  )
                )
        )
      & ( Split
        =   A k K it OO,rep
          .   :?OO
            & 1:?it
            &   whl
              ' (   !arg
                  :   ?A
                      ( %?k
                      : ( "'"
                        | "-"
                        | ‚Ä¶
                        | "."
                        | "("
                        | ")"
                        | "["
                        | "]"
                        | "{"
                        | "}"
                        | ":"
                        | ","
                        | ‚Äì
                        | ‚Äî
                        | "!"
                        | ‚Äπ
                        | ‚Ä∫
                        | ¬´
                        | ¬ª
                        | "?"
                        | ‚Äò
                        | ‚Äô
                        | ‚Äú
                        | ‚Äù
                        | ";"
                        | "\\"
                        | "/"
                        | \"
                        | "`"
                        )
                      )
                      ?arg
                & !k:?K
                & whl'(!arg:%@!k ?arg&!k !K:?K)
                & "K is a list of punct chars
                   '    does not increase token id
                   -    does not increase token id
                   ‚Ä¶    increases token id if nothing comes after it
                   .    increases token id if nothing comes after it
                
                   Other (sequences of) punctuation always increase token id."
                &     !OO
                      ( !A:
                      | ( w
                        .     (S.Sen$)
                              ( T
                              .   !it+!tok:?tok
                                & 0:?it
                                & !tok
                              )
                          , trim$(str$!A)
                        )
                      )
                      ( c
                      .     (type.p)
                            (S.Sen$)
                            ( T
                            .       !K
                                  : ( "." "." "."
                                    | ‚Ä¶
                                    | "."
                                    |   ( "("
                                        | ")"
                                        | "["
                                        | "]"
                                        | "{"
                                        | "}"
                                        | ":"
                                        | ","&~(!A:? #%@)
                                        | ‚Äì
                                        | ‚Äî
                                        | "!"
                                        | ‚Äπ
                                        | ‚Ä∫
                                        | ¬´
                                        | ¬ª
                                        | "?"
                                        | ‚Äò
                                        | ‚Äô
                                        | ‚Äú
                                        | ‚Äù
                                        | ";"
                                        | "\\"
                                        | "/"
                                        | \"
                                        | "`"
                                        )
                                        ?
                                    )
                                & 0:?it
                                & (   !arg:
                                    & "If nothing follows after punct, increase token id."
                                    & 1+!tok:?tok
                                  |   "These characters can be inside a token, but not at the end. So if there is something
                                         directly after, the previous, this and the next something all have the same token id.
                                         But we need to know whether there was something before this thing! (Not start of sentence, not space.)"
                                    & ( rep
                                      =   pat
                                        .   !arg:(=?pat)
                                          &   !sjt
                                            : %@!pat (|rep$!arg)
                                      )
                                    &   !K
                                      : ( rep$(="'")
                                        | rep$(="-")
                                        | rep$(="/")
                                        | rep$(=":")
                                        | ‚Ä¶
                                        | rep$(=".")
                                        )
                                    & !tok
                                  | 2+!tok:?tok&-1+!tok
                                  )
                              |   !it+!tok:?tok
                                & 0:?it
                                & !tok
                            )
                        , str$!K
                      )
                  : ?OO
                )
            &   !OO
                ( !arg:
                | ( w
                  .     (S.Sen$)
                        ( T
                        .   !it+!tok:?tok
                          & 0:?it
                          & !tok
                        )
                    , trim$(str$!arg)
                  )
                )
        )
      & ( getAll
        =   K p P
          .   !arg:(?K.?p)
            & !p:?P
            & whl'(!K:?K !p&!p !P:?P)
            & (!K.!P)
        )
      & ( llAteg
        =   K p P
          .   !arg:(?K.?p)
            & !p:?P
            & whl'(!K:!p ?K&!p !P:?P)
            & (!K.!P)
        )
      & ( considerAbbrev
        =   A P kar kars nxt KRS Z TOK
          .   !arg:(?arg.?nxt)
            & !arg:?A "."
            & getAll$(!A."."):(?A.?P)
            & (   ( !abb:abbr
                  |   !language:da
                    &   !A
                      : ~( ?
                           (%@:~(#|"."|","))
                           ?
                         )
                    & "An apparent Danish ordinal as fx 1987. followed by a lowercase word is a cardinal number and sentence ending period."
                    & !A:?SentenceEndingAbbrSeen
                  |     !arg
                      : ? ((%@?kar&let$!kar) ?:?kars)
                    & str$!kars:?KRS
                    & ( (Mabbr..find)$!KRS
                      |   (Eabbr..find)$!KRS:? (!KRS.?) ?
                        & !KRS:?SentenceEndingAbbrSeen
                      |   upp$!KRS:!KRS
                        & !kars:? (%@?kar&~(let$!kar)) ?Z
                        & !Z:
                      | !nxt:(","|";"|":") ?
                      )
                  | !arg:% "." % ".":~(? "." "." ?)
                  )
                & SplitAbbr$!arg
              |   Split$!A
                  ( c
                  .     (type.p)
                        ( S
                        .   1+!tok:?TOK
                          & (   !tok:0
                              & 1+!sen:?sen
                            |   0:?tok
                              & 1:?IS
                              & !sen
                            )
                        )
                        (T.!TOK)
                    , str$!P
                  )
              )
        )
      & ( toksplit
        =   A P F,abb TOK chars,frst sep
          .   !arg:(?arg.?abb)
            & ( !SentenceEndingAbbrSeen:
              |   :?SentenceEndingAbbrSeen
                & (   vap$((=.!arg).!arg):%?frst ?
                    & upp$!frst:!frst
                    & low$!frst:~!frst
                    & 0:?tok
                    & 1:?IS
                  | 
                  )
              )
            & ( !arg:
              |   vap$((=.!arg).!arg):?chars
                & ( considerAbbrev$(!chars.)
                  |     !chars
                      : ?A ((","|";"|":"):?P)
                    & getAll$(!A.!P):(?A.?P)
                    &   (considerAbbrev$(!A.!P)|Split$!A)
                        ( c
                        .     (type.p)
                              (S.Sen$)
                              (T.1+!tok:?tok)
                          , !P
                        )
                  |   !chars:?A (("!"|"?"):?P)
                    & getAll$(!A.!P):(?A.?P)
                    &   (considerAbbrev$(!A.!P)|Split$!A)
                        ( c
                        .     (type.p)
                              ( S
                              .   1+!tok:?TOK
                                & (   !tok:0
                                    & 1+!sen:?sen
                                  |   0:?tok
                                    & 1:?IS
                                    & !sen
                                  )
                              )
                              (T.!TOK)
                          , !P
                        )
                  |   ( sep
                      =   "("
                        | ")"
                        | "{"
                        | "}"
                        | "["
                        | "]"
                        | "<"
                        | ">"
                        | ‚Äú
                        | ‚Äù
                        | ‚Äò
                        | ‚Äô
                        | \"
                        | ‚Äπ
                        | ‚Ä∫
                        | ¬´
                        | ¬ª
                        | "|"
                        | "'"
                        | "`"
                      )
                    &   !chars
                      :   @( ?F
                           : ("-"|‚Äì|!sep)
                           )
                          ?A
                    & llAteg$(!A.!F):(?A.?F)
                    &   ( c
                        .     (type.p)
                              (S.Sen$)
                              (T.1+!tok:?tok)
                          , !F
                        )
                        toksplit$(str$!A.!abb)
                  |   !('($chars:%?A @(?F:$sep)))
                    & getAll$(!A.!F):(?A.?F)
                    &   toksplit$(str$!A.!abb)
                        ( c
                        .     (type.p)
                              (S.Sen$)
                              (T.1+!tok:?tok)
                          , !F
                        )
                  | Split$!chars
                  )
              )
        )
      & ( Tx
        =   abb efter f√∏r,concS
          .   !arg:(?arg.?abb.?f√∏r,?efter)
            & ( !arg:
              |     vap
                  $ ( ( 
                      =   
                        .   (@(!arg:?arg \r)|)
                          &   (c.(type.s),\n)
                              ( !arg:
                              |       vap
                                    $ ( ( 
                                        =   
                                          .   ( 1+!tok:?tok
                                              & (c.(type.s)," ")
                                              )
                                              ( !arg:
                                              |   vap
                                                $ ( ( 
                                                    =   
                                                      .   !arg:
                                                        | toksplit$(!arg.!abb)
                                                    )
                                                  . !arg
                                                  . \t
                                                  )
                                              )
                                        )
                                      . !arg
                                      . " "
                                      )
                                  :   (c.(type.s) ?,?)
                                      ?arg
                                & !arg
                              )
                      )
                    . !arg
                    . \n
                    )
                : (c.(type.s) ?,?) ?arg
              )
            & ( concS
              =   A s S SER RES res
                .   :?SER:?RES
                  &   whl
                    ' ( !arg:~
                      & :?S
                      &   whl
                        ' (   !arg
                            : (c.(type.s) ?,?A) ?arg
                          & !A !S:?S
                          )
                      &     (   !S:
                              & !arg:%?A ?arg
                              & !A
                            |   :?s
                              &   whl
                                ' ( !S:%?A ?S
                                  & !A !s:?s
                                  )
                              & (     !f√∏r
                                    : ( c
                                      | lb
                                      | space
                                      )
                                  & 
                                |   !arg:
                                  &   !efter
                                    : ( c
                                      | lb
                                      | space
                                      )
                                  & 
                                | (c.(type.s),str$!s)
                                )
                            )
                            !SER
                        : ?SER
                      & :?f√∏r
                      )
                  &   whl
                    ' ( !SER:%?res ?SER
                      & !res !RES:?RES
                      )
                  & !RES
              )
            & concS$!arg
        )
      & ( space
        =   
          .       !arg
                :   @( ?
                     :   ( " "
                         | \n
                         | \r
                         | \t
                         )
                         ?
                     )
                    (~(c|lb|space).?)
                    ?
              & (c.(type.s),)
            | 
        )
      & ( ecaps
        =   f√∏r B
          .       !arg
                : ( @( ?
                     :   ?B
                         ( " "
                         | \n
                         | \r
                         | \t
                         )
                     )
                  . ?f√∏r
                  )
              & (   ( !f√∏r:(c|lb|space)
                    | trm$!B:
                    )
                  & 
                | (c.(type.s),)
                )
            | 
        )
      & ( trav
        =   A e a S B aS abb f√∏r LIST
          .     !arg:(?arg.?abb.?f√∏r)
              & :?LIST
              &   whl
                ' ( !arg:?A (?e.?aS) ?B
                  &     ( 
                        .   Tx$(!A.!abb.!f√∏r,!e)
                            ( (   !e:w
                                & !aS:(?a,?S)
                                &   ecaps$(!A.!f√∏r)
                                    ( w
                                    .     !a
                                          (S.Sen$)
                                          (T.1+!tok:?tok)
                                      , trim$!S
                                    )
                                    space$!B
                              |   !e:c
                                & !aS:(?a,?S)
                                &   ( c
                                    .     !a
                                          (S.Sen$)
                                          (T.1+!tok:?tok)
                                      , !S
                                    )
                                    (   !a:? (type.s) ?
                                      & 
                                    | space$!B
                                    )
                              |   !e:(add|ex)
                                &   ecaps$(!A.!f√∏r)
                                    ( !e
                                    .     !aS:(?a,?S)
                                        & (!a,trav$(!S.!abb.))
                                      | !aS
                                    )
                                    space$!B
                              |   !e:del
                                & ecaps$(!A.!f√∏r) (!e.!aS) space$!B
                              |     !e
                                  : ( rdg
                                    | lem
                                    | app
                                    | linkGrp
                                    )
                                & (!e.!aS)
                              | (   !e
                                  : (   ( p
                                        | u
                                        | s
                                        | seg
                                        | head
                                        | note
                                        | back
                                        | front
                                        | div
                                        | argument
                                        | byline
                                        | closer
                                        | dateline
                                        | docAuthor
                                        | docDate
                                        | epigraph
                                        | floatingText
                                        | opener
                                        | postscript
                                        | salute
                                        | signed
                                        | trailer
                                        )
                                      & 1:?IS
                                      & 0:?tok
                                    | ?
                                    )
                                .     !aS:(?a,?S)
                                    & ( !a
                                      ,   trav
                                        $ ( !S
                                          . !e:abbr|!abb
                                          . 
                                          )
                                      )
                                  | !aS
                                )
                              )
                            : ? (?f√∏r.?)
                            )
                        )
                        !LIST
                    : ?LIST
                  & !B:?arg
                  )
              & !arg:~(? (?.?) ?)
              & (.Tx$(!arg.!abb.!f√∏r,)) !LIST:?LIST
              & :?B
              &   whl
                ' ( !LIST:(.?A) ?LIST
                  & !A !B:?B
                  )
              & !B
            | 
        )
      & (contractwadddel=.trq$!arg)
      & ( inverse
        =   L e
          .   :?L
            & whl'(!arg:%?e ?arg&!e !L:?L)
            & !L
        )
      & ( collectSvals
        =   S a c
          .   map
            $ ( ( 
                =   
                  .     !arg:(?.?a,?c)
                      & ( !a:? (S.?S) ?&!S
                        | collectSvals$!c
                        )
                    | 
                )
              . !arg
              )
        )
      & ( retrieveSsequences
        =   e c
          .   "If an element has no direct children with S and T elements, then its substructures may not share the same S value if any of those substructures has more than one S value. So this should not be allowed:
                            ( address
                            . , (c.(type.s),\" \")
                                ( addrLine
                                . , (w.(S.1) (T.4),Hr)
                                    ( c
                                    . (type.p) (S.1) (T.5),\".\"
                                    )
                                    (c.(type.s),\" \")
                                    (w.(S.2) (T.2),mag)
                                    ( c
                                    . (type.p) (S.2) (T.2),\".\"
                                    )
                                    (w.(S.2) (T.2),art)
                                )
                                (c.(type.s),\" \")
                                ( addrLine
                                . , ( persName
                                    . (ref.\"#np56\")
                                      , (w.(S.2) (T.6),Louis)
                                        (c.(type.s),\" \")
                                        (w.(S.2) (T.8),Hjelmslev)
                                    )
                                )
                                (c.(type.s),\" \")
                            )
              "
            & (   !arg:? (?.? (S.?) ?,?) ?
                & "There is at least one sibling with an S attribute.
                   So this comprises one or more complete or inclomplete sentences.
                   Make a list of all S values occurring in arg."
                & (collectSvals$!arg.!arg)
              |   map
                $ ( ( 
                    =   
                      .     !arg:(?e.?,?c)
                          & ( !e:c&
                            | retrieveSsequences$!c
                            )
                        | 
                    )
                  . !arg
                  )
              )
        )
      & ( sing
        =   seen el
          .   :?seen
            &   whl
              ' ( !arg:%@?el ?arg
                & (!seen:? !el ?|!el !seen:?seen)
                )
            & !seen
        )
      & "Create a Q attribute in all elements that have a descendant having an S attrubite. Q's value is the set of S values."
      & ( perQlateS
        =   e a c S Q
          .   !arg:@
            |   !arg:(?e.?a,?c)
              & (   !a:? (S.?S) ?
                  & (!e.(Q.!S) !a,!c)
                |   perQlateS$!c:?c
                  &     sing
                      $ ( map
                        $ ( ( 
                            =   
                              .       !arg
                                    : (?.? (Q.?Q) ?,?)
                                  & !Q
                                | 
                            )
                          . !c
                          )
                        )
                    : ?Q
                  & (!e.(!Q:|(Q.!Q)) !a,!c)
                )
            | !arg:% %&map$(perQlateS.!arg)
            | !arg
        )
      & ( adjustDAordinal
        =   e a t c
          .     !arg:? (?.? (T.@) ?,?) ?
              & inverse$!arg:?arg
              & (   !language:da
                  & !arg:(?.?,".") (?.?,#) ?
                  & !XYZ:(?e.?a (T.?t) ?c,?) ?arg
                  & (!e.!a (T.!t+1) !c,".") !arg
                | !arg
                )
            | !arg:(?e.?a,?c)&(!e.!a,adjustDAordinal$!c)
            | !arg:% %&map$(adjustDAordinal.!arg)
            | !arg
        )
      & "Create a R attribute in all elements contained in <s> elements that have (a descendant having) a T attrubite. R's value is the set of T values."
      & ( peRlaT
        =   e a c T R
          .   !arg:@
            |   !arg:(?e.?a,?c)
              & (   !a:? (T.?T) ?
                  & (!e.(R.!T) !a,!c)
                |   peRlaT$!c:?c
                  &     sing
                      $ ( map
                        $ ( ( 
                            =   
                              .       !arg
                                    : (?.? (R.?R) ?,?)
                                  & !R
                                | 
                            )
                          . !c
                          )
                        )
                    : ?R
                  & (!e.(!R:|(R.!R)) !a,!c)
                )
            | !arg:% %&map$(peRlaT.!arg)
            | !arg
        )
      & ( skweez
        =   e a c u r1 r2 R t break
          .     !arg:? (?.? (R.@) ?,?) ?
              & !arg:?u
              & noppes:?R
              & :?c:?t
              &   whl
                ' ( !u:%?e ?u
                  & (     !e
                        : ( ?
                          .     ?
                                (R.%?r1 ? %?r2|?r1:?r2)
                                ?
                            , ?
                          )
                      & ( !r1:!R&!e !t:?t
                        |   !r2:?R
                          &     (     !t
                                    :   ?
                                        (?.? (R.?) ?,?)
                                        ?
                                        (?.? (R.?) ?,?)
                                        ?
                                  & (     !t
                                        :   ?break
                                            (   ( `%
                                                : ~( (?.?,)
                                                   | ( c
                                                     .   ? (type.s) ?
                                                       , ?
                                                     )
                                                   )
                                                )
                                                ?
                                            : ?t
                                            )
                                      & !break (w.,!t)
                                    | (w.,!t)
                                    )
                                | !t
                                )
                                !c
                            : ?c
                          & !e:?t
                        )
                    | !e !t:?t
                    )
                  )
              & !t !c:?c
              & !c
            | !arg:(?e.?a,?c)&(!e.!a,skweez$!c)
            | !arg:% %&map$(skweez.!arg)
            | !arg
        )
      & ( complexTok
        =   e a c
          .   !arg:@
            |   !arg:(?e.?a,?c)
              & (   !e:s
                  & adjustDAordinal$!c:?c
                  & peRlaT$!c:?c
                  & (s.!a,skweez$!c)
                | (!e.!a,complexTok$!c)
                )
            | !arg:% %&map$(complexTok.!arg)
            | !arg
        )
      & ( COLLECT
        =   foundS L s M S N
          .     !arg
              : ?L ((?.? (S.?foundS) ?,?):?s) ?arg
            & InsertS$!L:?L
            &   whl
              ' (   !arg
                  : ?M ((?.? (S.?S) ?,?):?N) ?arg
                & ( !S:!foundS&!s !M !N:?s
                  |   !L (s.,!s) InsertS$!M:?L
                    & !N:?s
                    & !S:?foundS
                  )
                )
            & (!s:|!L (s.,!s):?L)
            & !L InsertS$!arg
        )
      & ( InsertS
        =   e a c A B M Z
          .   !arg:@
            |   !arg:(?e.?a,?c)
              & (   !a:? (Q.?) ?
                  & (   !a:? (Q.% %) ?
                      & (     !c
                            : ? (?.? (S.?) ?,?) ?
                          & (!e.!a,COLLECT$!c)
                        | (!e.!a,InsertS$!c)
                        )
                    |     !c
                        :   ?A
                            (   (?.? (Q.?) ?,?)
                                ?
                                (?.? (Q.?) ?,?)
                                ?
                            : ?B
                            )
                      &   inverse$!B
                        :   ?Z
                            (   (?.? (Q.?) ?,?)
                                ?
                                (?.? (Q.?) ?,?)
                                ?
                            : ?M
                            )
                      & (!e.!a,!A (s.,inverse$!M) inverse$!Z)
                    | !a:? (S.?) ?&(s.,!arg)
                    | (!e.!a,InsertS$!c)
                    )
                | !arg
                )
            | !arg:% %&map$(InsertS.!arg)
            | !arg
        )
      & ( moveLeadingAndTrailingSpacesOutside
        =   e a c sp1 sp2
          .     !arg:(?e.?a,?c)
              & moveLeadingAndTrailingSpacesOutside$!c:?c
              & :?sp1:?sp2
              &   whl
                ' ( !c
                  : ((c.? (type.s) ?,?):?sp1) ?c
                  )
              &   whl
                ' ( !c
                  : ?c ((c.? (type.s) ?,?):?sp2)
                  )
              & !sp1 (!e.!a,!c) !sp2:?arg
            |   !arg:% %
              & map$(moveLeadingAndTrailingSpacesOutside.!arg)
            | !arg
        )
      & ( removeSuperfluousSpaces
        =   A SP Z
          .       whl
                ' (!arg:(c.? (type.s) ?,?) ?arg)
              & inverse$!arg:?arg
              &   whl
                ' (!arg:(c.? (type.s) ?,?) ?arg)
              & :?Z
              &   whl
                ' (   !arg
                    :   ?A
                        ((c.? (type.s) ?,?):?SP)
                        (c.? (type.s) ?,?)
                        ?arg
                  & !SP inverse$!A !Z:?Z
                  )
              & inverse$!arg !Z:?arg
              & !arg
            | !arg
        )
      & ( removeSpacesIfNoTokens
        =   L e a c A
          .   (   !arg:? (?.? (S.?) ?,?) ?
                & 
              |   :?L
                &   whl
                  ' (   !arg
                      : ?A (c.? (type.s) ?,?) ?arg
                    & !L !A:?L
                    )
                & !L !arg:?arg
              )
            &   map
              $ ( ( 
                  =   
                    .     !arg:(?e.?a,?c)
                        & (!e.!a,removeSpacesIfNoTokens$!c)
                      | !arg
                  )
                . !arg
                )
        )
      & ( RemoveSpaceFromS
        =   e a c
          .   !arg:@
            |   !arg:(?e.?a,?c)
              & (   !c:? (?.? (S.?) ?,?) ?
                  & ( !e
                    .   !a
                      ,   removeSuperfluousSpaces
                        $ (removeSpacesIfNoTokens$(moveLeadingAndTrailingSpacesOutside$!c))
                    )
                | ( !e
                  .   !a
                    ,   map
                      $ ( ( 
                          =   
                            .       !arg
                                  : (c.? (type.s) ?,?)
                                & 
                              | RemoveSpaceFromS$!arg
                          )
                        . !c
                        )
                  )
                )
            | map$((=.RemoveSpaceFromS$!arg).!arg)
        )
      & ( RemoveSpace
        =   e a c
          .   !arg:@
            |   !arg:(c.? (type.s) ?,?)
              & 
            | !arg:(s.?,?)&RemoveSpaceFromS$!arg
            | !arg:(?e.?a,?c)&(!e.!a,RemoveSpace$!c)
            | !arg:% %&map$(RemoveSpace.!arg)
            | !arg
        )
      & ( removeOutliers
        =   
          .   map
            $ ( ( 
                =   e a c
                  .   !arg:(s.?,?)
                    |   !arg:(w|c.?,?)
                      & 
                    |   !arg:(?e.?a,?c)
                      & (!e.!a,removeOutliers$!c)
                    | !arg
                )
              . !arg
              )
        )
      & ( vlooi
        =   
          .   map
            $ ( ( 
                =   e a c
                  .     !arg:((w|c):?e.?a,?c)
                      &     map
                          $ ( ( 
                              =   
                                .       !arg
                                      : (   Q
                                          | R
                                          | S
                                          | T
                                        . ?
                                        )
                                    & 
                                  | !arg
                              )
                            . !a
                            )
                        : ?a
                      & (!e.("xml:id".IDgen$!a) !a,vlooi$!c)
                    |   !arg:(?e.?a,?c)
                      &     map
                          $ ( ( 
                              =   
                                .       !arg
                                      : (   Q
                                          | R
                                          | S
                                          | T
                                        . ?
                                        )
                                    & 
                                  | !arg
                              )
                            . !a
                            )
                        : ?a
                      & (!e.!a,vlooi$!c)
                    |   !arg:((w|c):?e.?a)
                      &     map
                          $ ( ( 
                              =   
                                .       !arg
                                      : (   Q
                                          | S
                                          | T
                                        . ?
                                        )
                                    & 
                                  | !arg
                              )
                            . !a
                            )
                        : ?a
                      & (!e.("xml:id".IDgen$!a) !a,vlooi$!c)
                    | !arg
                )
              . !arg
              )
        )
      & ( smukkeser
        =   e a c A Z ZZ AA ca cz Name
          .   !arg:@
            | !arg:(?e.?a,?c)&(!e.!a,smukkeser$!c)
            |   !arg:?A (@(?Name:? Name).?a,(s.,?c)) ?Z
              & (     !A
                    :   ?AA
                        ( s
                        .   
                          ,     ?
                                ( (~c.?,?)
                                | (c.?,","|";"|":")
                                )
                            : ?ca
                        )
                  & (   !Z:(s.,?cz) ?ZZ
                      &   smukkeser
                        $ (!AA (s.,!ca (!Name.!a,!c) !cz) !ZZ)
                    | smukkeser$(!AA (s.,!ca (!Name.!a,!c)) !Z)
                    )
                |   !Z:(s.,?cz) ?ZZ
                  & smukkeser$(!A (s.,(!Name.!a,!c) !cz) !ZZ)
                )
            | !arg:% %&map$(smukkeser.!arg)
            | !arg
        )
      & !arg:(?input.?style.?abbreviations.?language)
      & :?SentenceEndingAbbrSeen
      & new$hash:?Mabbr
      & new$hash:?Eabbr
      & (Mabbr..ISO)$
      & (Eabbr..ISO)$
      &   map
        $ ( ( 
            =   
              .   (   @(!arg:" " ?arg)
                    & (Eabbr..insert)$(!arg.)
                  | (Mabbr..insert)$(!arg.)
                  )
                & !arg
            )
          . !abbreviations
          )
      & get$(!input,X ML TRM):?xml
      & nestML$!xml:?xml
      &   !xml
        : ?XXX (TEI.?teiatt,?AAA (text.?textatt,?text) ?DDD) ?YYY
      & 0:?tok:?sen:?IS
      & findIDs$!text:?IDs
      & 0:?ID
      & trav$(!text..):?nbody
      & contractwadddel$!nbody:?nbody2
      &   (!style:PT&rcontr$!nbody2|!nbody2)
        : ?nmbody2
      & assignIDs$!nmbody2:?nnbody
      & retrieveSsequences$!nnbody:?Sseq
      & perQlateS$!nnbody:?Sseq0
      & InsertS$!Sseq0:?Sseq1
      & complexTok$!Sseq1:?Sseq2
      & RemoveSpace$!Sseq2:?Sseq3
      & 0:?ID
      & removeOutliers$!Sseq3:?Sseq4
      & vlooi$!Sseq4:?XYZ
      & smukkeser$!XYZ:?XYZ
      & !XXX (TEI.!teiatt,!AAA (text.!textatt,!XYZ) !DDD) !YYY
  )
  ( new
  =   input abbr style,XMLL XMLLL abbreviations lang language nabbr output
    .   ~
      |   ~
        & vap$((=.!arg).get$(abbr,STR).\n):?abbr
        &   (   get$(nabbr,STR):?nabbr
              & vap$((=.!arg).!nabbr.\n)
            | 
            )
          : ?nabbr
        &     (its.teitok)
            $ ( "test\\acc-1992_0005_031_Uldall_0060-tei-final.hnger.xml"
              . simple
              . !nabbr !abbr
              . da
              )
          : ?XMLL
        & toML$!XMLL:?XMLLL
        & put$(!XMLLL,"test\\ellipsis.out.xml",NEW)
      |   arg$:?input
        & arg$:?output
        & arg$:(PT|simple):?style
        & arg$:?abbreviations
        & arg$:?language
        &   ( !abbreviations:"-"&
            | vap$((=.!arg).get$(!abbreviations.STR).\n)
            | 
            )
          : ?abbr
        &   (   get$(nabbr,STR):?nabbr
              & vap$((=.!arg).!nabbr.\n)
            | 
            )
          : ?nabbr
        & (!language:~"-"|):?lang
        &   put
          $ (toML$((its.teitok)$(!input.!style.!nabbr !abbr.!lang)),!output,NEW)
  );

r=
  get'("teitok.bra",TXT)
& rmv$(str$(teitok ".bak"))
& ren$("teitok.bra".str$(teitok ".bak"))
&   put
  $ ( "{teitok.bra
ùïåùïãùîΩ-ùü†
Takes a TEI P5 document and creates <w> and <c> elementsout
Get the casing right for Danish TEI P5 texts}

"
    , "teitok.bra"
    , NEW
    , WYD
    , BIN
    )
& lst'(X,"teitok.bra",APP,WYD,BIN)
& put'(\n,"teitok.bra",APP,WYD,BIN)
& lst'(r,"teitok.bra",APP,WYD,BIN)
& put$(str$("\nnew'" X ";\n"),"teitok.bra",APP,BIN)
& ;

new'X;
