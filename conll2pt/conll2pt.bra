{conll2pt.bra

Convert dependency tree in CONLL9 format to Penn Treebank format}

X=
  ( conll2pt
  =   inp outp
    .   !arg:(?inp.?outp)
      & get$(!inp,STR):?conll
      & :?trees:?sent
      & put$(,!outp,NEW)
      & ( rtrm
        =   
          .   @(!arg:?arg " ")&rtrm$!arg
            | !arg
        )
      & ( trim
        =   
          .   @(!arg:" " ?arg)&trim$!arg
            | rtrm$!arg
            | !arg
        )
      & "https://ufal.mff.cuni.cz/conll2009-st/task-description.html
        ID      FORM LEMMA  PLEMMA       POS    PPOS  FEAT    PFEAT   HEAD     PHEAD   DEPREL PDEPREL FILLPRED PRED APREDs
        1       Kan     _       _       VERB    VERB    -       _       0       -       ROOT    -       _       _
         https://github.com/UniversalDependencies/docs/issues/229
        Change naming in CoNLL-U: CPOSTAG --> UPOSTAG #229 
        
         https://universaldependencies.org/docs/format.html

        CoNLL-U Format

        ID: Word index, integer starting at 1 for each new sentence; may be a range for tokens with multiple words.
        FORM: Word form or punctuation symbol.
        LEMMA: Lemma or stem of word form.
        UPOSTAG: Universal part-of-speech tag drawn from our revised version of the Google universal POS tags.
        XPOSTAG: Language-specific part-of-speech tag; underscore if not available.
        FEATS: List of morphological features from the universal feature inventory or from a defined language-specific extension; underscore if not available.
        HEAD: Head of the current token, which is either a value of ID or zero (0).
        DEPREL: Universal Stanford dependency relation to the HEAD (root iff HEAD = 0) or a defined language-specific subtype of one.
        DEPS: List of secondary dependencies (head-deprel pairs).
        MISC: Any other annotation.
        "
      & ( pat14
        =   ?ID
            \t
            ?FORM
            \t
            ?
            \t
            ?
            \t
            ?
            \t
            ?CPOSTAG
            \t
            ?
            \t
            ?
            \t
            ?HEAD
            \t
            ?
            \t
            ?DEPREL
            \t
            ?
            \t
            ?
            \t
            ?
        )
      
      & ( pat10
        =   ?ID
            \t
            ?FORM
            \t
            ?
            \t
            ?CPOSTAG
            \t
            ?
            \t
            ?
            \t
            ?HEAD
            \t
            ?DEPREL
            \t
            ?
            \t
            ?
        )
      &     
          ' (   $pat14
              & '$($pat14):(=?pat)
            |   $pat10
              & '$($pat10):(=?pat)
            )
        : (=?pat)
      &     vap
          $ ( ( 
              =   
                .     "1	Kan	_	_	_	VERB	_	_	-1	0	_	ROOT	_	_"
                    & @(!arg:!pat)
                    & ( trim$!HEAD
                      . trim$!ID
                      . trim$!FORM
                      . trim$!CPOSTAG
                      . trim$!DEPREL
                      )
                  | (.)
              )
            . !conll
            . \n
            )
        : ?lines
      & :?stnes
      &   whl
        ' ( !lines:?sent (.) ?lines
          & (.!sent) !stnes:?stnes
          )
      & (.!lines) !stnes:?stnes
      & :?sents
      &   whl
        ' ( !stnes:(.?sent) ?stnes
          & ( !sent:
            | (.!sent) !sents:?sents
            )
          )
      & ( !stnes:
        | (.!stnes) !sents:?sents
        )
      &   map
        $ ( ( 
            =   
              .   ( PT
                  =     deprel words left right lrem rrem
                      , rrem2 id form cpostag babydeprel
                    .     !arg:(?deprel.?words)
                        &   !words
                          :   ?left
                              (!deprel.?id.?form.?cpostag.?babydeprel)
                              ?right
                        & PT$(!id.!left):(?left.?lrem)
                        & PT$(!id.!lrem !right):(?right.?rrem)
                        & PT$(!deprel.!rrem):(?next.?rrem2)
                        & (   ( !babydeprel
                              . !left (!cpostag.!form) !right
                              )
                              !next
                          . !rrem2
                          )
                      | (.!words)
                  )
                & ( indent
                  =   tree trees ind cl co Ou sep esc bck
                    .   !arg:(?trees.?ind)
                      & :?Ou
                      & :?sep
                      & ( bck
                        =   A
                          .     @(!arg:?A "\\" ?arg)
                              & !A "\\\\" bck$!arg
                            | !arg
                        )
                      & ( esc
                        =   A
                          .     @(!arg:?A \" ?arg)
                              & bck$!A "\\\"" esc$!arg
                            | bck$!arg
                        )
                      &   whl
                        ' ( !trees:%?tree ?trees
                          & (   !tree:(?cl.?co)
                              &     !Ou
                                    !sep
                                    "("
                                    str$(esc$!cl)
                                    " "
                                    indent$(!co."    " !ind)
                                    ")"
                                : ?Ou
                            | !Ou str$(esc$!tree):?Ou
                            )
                          & \n !ind:?sep
                          )
                      & !Ou
                  )
                & !arg:(.?sent)
                & PT$(0.!sent):(?tree.?rem)
                & put$(str$(indent$(!tree.) \n\n),!outp,APP)
                & :?sent
            )
          . !sents
          )
  )
  ( new
  =   
    .   ~ 
      |   (arg$:?inp|:?inp)
        & (arg$:?outp|:?outp)
        & (its.conll2pt)$(!inp.!outp)
  );

r=
  get'"conll2pt.bra"
& rmv$(str$(conll2pt ".bak"))
& ren$("conll2pt.bra".str$(conll2pt ".bak"))
&   put
  $ ( "{conll2pt.bra

Convert dependency tree in CONLL9 format to Penn Treebank format}

"
    , "conll2pt.bra"
    , NEW
    )
& lst'(X,"conll2pt.bra",APP)
& put'(\n,"conll2pt.bra",APP)
& lst'(r,"conll2pt.bra",APP)
& put$(str$("\nnew'" X ";\n"),"conll2pt.bra",APP);

new'X;
