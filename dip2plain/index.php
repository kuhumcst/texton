<?php
header('Content-type:text/plain; charset=UTF-8');
/*
 * This PHP script is generated by CLARIN-DK's tool registration form
 * (http://localhost/texton/register). It should, with no or few adaptations
 * work out of the box as a dummy for your web service. The output returned
 * to the Text Tonsorium (CLARIN-DK's workflow manager) is just a listing of
 * the HTTP parameters received by this web service from the Text Tonsorium,
 * and not the output proper. For that you have to add your code to this script
 * and deactivate the dummy functionality. (The comments near the end of this
 * script explain how that is done.)
 *
 * Places in this script that require your attention are marked 'TODO'.
 */
/*
ToolID         : dip2plain
PassWord       :
Version        : 1.0
Title          : Diplom fetch corrected text
Path in URL    : dip2plain	*** TODO make sure your web service listens on this path and that this script is readable for the webserver. ***
Publisher      : NoRS
ContentProvider: NoRS
Creator        : Bart Jongejan
InfoAbout      : -
Description    : Fetch the column with corrected transcriptions. This column contains words with additions between parentheses. The parentheses are removed in the output.
ExternalURI    :
XMLparms       :
PostData       :
Inactive       :
*/

/*******************
* helper functions *
*******************/
$toollog = '../log/dip2plain.log'; /* Used by the logit() function. TODO make sure the folder exists and is writable. Adapt if needed */

/*  TODO Set $dodelete to false if temporary files in /tmp should not be deleted before returning. */
$dodelete = true;
$tobedeleted = array();


function loginit()  /* Wipes the contents of the log file! TODO Change this behaviour if needed. */
    {
    global $toollog,$ftemp;
    $ftemp = fopen($toollog,'w');
    if($ftemp)
        {
        fwrite($ftemp,$toollog . "\n");
        fclose($ftemp);
        }
    }

function logit($str) /* TODO You can use this function to write strings to the log file. */
    {
    return;
    global $toollog,$ftemp;
    $ftemp = fopen($toollog,'a');
    if($ftemp)
        {
        fwrite($ftemp,$str . "\n");
        fclose($ftemp);
        }
    }

function scripinit($inputF,$input,$output)  /* Initialises outputfile. */
    {
    global $fscrip, $dip2plainfile;
    $fscrip = fopen($dip2plainfile,'w');
    if($fscrip)
        {
        fwrite($fscrip,"/*\n");
        fwrite($fscrip," * ToolID           : dip2plain\n");
        fwrite($fscrip," * Version          : 1.0\n");
        fwrite($fscrip," * Title            : Diplom fetch corrected text\n");
        fwrite($fscrip," * ServiceURL       : http://localhost/dip2plain\n");
        fwrite($fscrip," * Publisher        : NoRS\n");
        fwrite($fscrip," * ContentProvider  : NoRS\n");
        fwrite($fscrip," * Creator          : Bart Jongejan\n");
        fwrite($fscrip," * InfoAbout        : -\n");
        fwrite($fscrip," * Description      : Fetch the column with corrected transcriptions. This column contains words with additions between parentheses. The parentheses are removed in the output.\n");
        fwrite($fscrip," * ExternalURI      : \n");
        fwrite($fscrip," * inputF " . $inputF . "\n");
        fwrite($fscrip," * input  " . $input  . "\n");
        fwrite($fscrip," * output " . $output . "\n");
        fwrite($fscrip," */\n");
        fwrite($fscrip,"\ncd " . getcwd() . "\n");
        fclose($fscrip);
        }
    }

function scrip($str) /* TODO send comments and command line instructions. Don't forget to terminate string with new line character, if needed.*/
    {
    global $fscrip, $dip2plainfile;
    $fscrip = fopen($dip2plainfile,'a');
    if($fscrip)
        {
        fwrite($fscrip,$str . "\n");
        fclose($fscrip);
        }
    }

class SystemExit extends Exception {}
try {
    function hasArgument ($parameterName)
        {
        return isset($_REQUEST["$parameterName"]);
        }

    function getArgument ($parameterName)
        {
        return isset($_REQUEST["$parameterName"]) ? $_REQUEST["$parameterName"] : "";
        }

    function existsArgumentWithValue ($parameterName, $parameterValue)
        {
        /* Check whether there is an argument <parameterName> that has value
           <parameterValue>.
           There may be any number of arguments with name <parameterName> !
        */
        $query  = explode('&', $_SERVER['QUERY_STRING']);

        foreach( $query as $param )
            {
            list($name, $value) = explode('=', $param);
            if($parameterName == urldecode($name) && $parameterValue == urldecode($value))
                return true;
            }
        return false;
        }

    function tempFileName($suff) /* TODO Use this to create temporary files, if needed. */
        {
        global $dodelete;
        global $tobedeleted;
        $tmpno = tempnam('/tmp', $suff);
        if($dodelete)
            $tobedeleted[$tmpno] = true;
        return $tmpno;
        }

    function requestFile($requestParm) // e.g. "IfacettokF"
        {
        logit("requestFile({$requestParm})");

        if(isset($_REQUEST[$requestParm]))
            {
            $urlbase = isset($_REQUEST["base"]) ? $_REQUEST["base"] : "http://localhost/toolsdata/";

            $item = $_REQUEST[$requestParm];
            $url = $urlbase . urlencode($item);
            logit("requestParm:$requestParm");
            logit("urlbase:$urlbase");
            logit("item:$item");
            logit("url[$url]");

            $handle = fopen($url, "r");
            if($handle == false)
                {
                logit("Cannot open url[$url]");
                return "";
                }
            else
                {
                $tempfilename = tempFileName("dip2plain_{$requestParm}_");
                $temp_fh = fopen($tempfilename, 'w');
                if($temp_fh == false)
                    {
                    fclose($handle);
                    logit("handle closed. Cannot open $tempfilename");
                    return "";
                    }
                else
                    {
                    while (!feof($handle))
                        {
                        $read = fread($handle, 8192);
                        fwrite($temp_fh, $read);
                        }
                    fclose($temp_fh);
                    fclose($handle);
                    return $tempfilename;
                    }
                }
            }
        logit("empty");
        return "";
        }

    function do_dip2plain()
        {
        global $dip2plainfile;
        global $dodelete;
        global $tobedeleted;
/***************
* declarations *
***************/

/*
 * TODO Use the variables defined below to configure your tool for the right
 * input files and the right settings.
 * The input files are local files that your tool can open and close like any
 * other file.
 * If your tool needs to create temporary files, use the tempFileName()
 * function. It can mark the temporary files for deletion when the webservice
 * is done. (See the global dodelete variable.)
 */
        $base = "";	/* URL from where this web service downloads input. The generated script takes care of that, so you can ignore this variable. */
        $job = "";	/* Only used if this web service returns 201 and POSTs result later. In that case the uploaded file must have the name of the job. */
        $post2 = "";	/* Only used if this web service returns 201 and POSTs result later. In that case the uploaded file must be posted to this URL. */
        $mode = "";	/* If the value is 'dry', the wrapper is expected to return a script of what will be done if the value is not 'dry', but 'run'. */
        $inputF = "";	/* List of all input files. */
        $input = "";	/* List of all input features. */
        $output = "";	/* List of all output features. */
        $echos = "";	/* List arguments and their actual values. For sanity check of this generated script. All references to this variable can be removed once your web service is working as intended. */
        $F = "";	/* Input (ONLY used if there is exactly ONE input to this workflow step) */
        $Iambiguna = false;	/* Ambiguity in input is unambiguous (utvetydig) if true */
        $Iappunn = false;	/* Appearance in input is unnormalised (ikke-normaliseret) if true */
        $Ifacettok = false;	/* Type of content in input is tokens (tokens) if true */
        $Iformatdipl = false;	/* Format in input is Org-mode if true */
        $Ilangda = false;	/* Language in input is Danish (dansk) if true */
        $Ilanggml = false;	/* Language in input is Middle Low German (middelnedertysk) if true */
        $Ilangla = false;	/* Language in input is Latin (latin) if true */
        $Ilangsv = false;	/* Language in input is Swedish (svensk) if true */
        $Iperiodc13 = false;	/* Historical period in input is medieval (middelalderen) if true */
        $Ipresnml = false;	/* Assemblage in input is normal if true */
        $Oambiguna = false;	/* Ambiguity in output is unambiguous (utvetydig) if true */
        $Oappunn = false;	/* Appearance in output is unnormalised (ikke-normaliseret) if true */
        $Ofacetseg = false;	/* Type of content in output is segments (s√¶tningssegmenter) if true */
        $Ofacettok = false;	/* Type of content in output is tokens (tokens) if true */
        $OformatplainD = false;	/* Format in output is plain text with ASCII 127 characters (flad tekst with ASCII 127 tegn) if true */
        $Olangda = false;	/* Language in output is Danish (dansk) if true */
        $Olanggml = false;	/* Language in output is Middle Low German (middelnedertysk) if true */
        $Olangla = false;	/* Language in output is Latin (latin) if true */
        $Olangsv = false;	/* Language in output is Swedish (svensk) if true */
        $Operiodc13 = false;	/* Historical period in output is medieval (middelalderen) if true */
        $Opresnml = false;	/* Assemblage in output is normal if true */

        if( hasArgument("base") )
            {
            $base = getArgument("base");
            }
        if( hasArgument("job") )
            {
            $job = getArgument("job");
            }
        if( hasArgument("post2") )
            {
            $post2 = getArgument("post2");
            }
        if( hasArgument("mode") )
            {
            $mode = getArgument("mode");
            }
        $echos = "base=$base job=$job post2=$post2 mode=$mode ";

/*********
* input  *
*********/
        if( hasArgument("F") )
            {
            $F = requestFile("F");
            if($F == '')
                {
                header("HTTP/1.0 404 Input not found (F parameter). ");
                return;
                }
            $echos = $echos . "F=$F ";
            $inputF = $inputF . " \$F ";
            }

/************************
* input/output features *
************************/
        if( hasArgument("Iambig") )
            {
            $Iambiguna = existsArgumentWithValue("Iambig", "una");
            $echos = $echos . "Iambiguna=$Iambiguna ";
            $input = $input . ($Iambiguna ? " \$Iambiguna" : "") ;
            }
        if( hasArgument("Iapp") )
            {
            $Iappunn = existsArgumentWithValue("Iapp", "unn");
            $echos = $echos . "Iappunn=$Iappunn ";
            $input = $input . ($Iappunn ? " \$Iappunn" : "") ;
            }
        if( hasArgument("Ifacet") )
            {
            $Ifacettok = existsArgumentWithValue("Ifacet", "tok");
            $echos = $echos . "Ifacettok=$Ifacettok ";
            $input = $input . ($Ifacettok ? " \$Ifacettok" : "") ;
            }
        if( hasArgument("Iformat") )
            {
            $Iformatdipl = existsArgumentWithValue("Iformat", "dipl");
            $echos = $echos . "Iformatdipl=$Iformatdipl ";
            $input = $input . ($Iformatdipl ? " \$Iformatdipl" : "") ;
            }
        if( hasArgument("Ilang") )
            {
            $Ilangda = existsArgumentWithValue("Ilang", "da");
            $Ilanggml = existsArgumentWithValue("Ilang", "gml");
            $Ilangla = existsArgumentWithValue("Ilang", "la");
            $Ilangsv = existsArgumentWithValue("Ilang", "sv");
            $echos = $echos . "Ilangda=$Ilangda " . "Ilanggml=$Ilanggml " . "Ilangla=$Ilangla " . "Ilangsv=$Ilangsv ";
            $input = $input . ($Ilangda ? " \$Ilangda" : "")  . ($Ilanggml ? " \$Ilanggml" : "")  . ($Ilangla ? " \$Ilangla" : "")  . ($Ilangsv ? " \$Ilangsv" : "") ;
            }
        if( hasArgument("Iperiod") )
            {
            $Iperiodc13 = existsArgumentWithValue("Iperiod", "c13");
            $echos = $echos . "Iperiodc13=$Iperiodc13 ";
            $input = $input . ($Iperiodc13 ? " \$Iperiodc13" : "") ;
            }
        if( hasArgument("Ipres") )
            {
            $Ipresnml = existsArgumentWithValue("Ipres", "nml");
            $echos = $echos . "Ipresnml=$Ipresnml ";
            $input = $input . ($Ipresnml ? " \$Ipresnml" : "") ;
            }
        if( hasArgument("Oambig") )
            {
            $Oambiguna = existsArgumentWithValue("Oambig", "una");
            $echos = $echos . "Oambiguna=$Oambiguna ";
            $output = $output . ($Oambiguna ? " \$Oambiguna" : "") ;
            }
        if( hasArgument("Oapp") )
            {
            $Oappunn = existsArgumentWithValue("Oapp", "unn");
            $echos = $echos . "Oappunn=$Oappunn ";
            $output = $output . ($Oappunn ? " \$Oappunn" : "") ;
            }
        if( hasArgument("Ofacet") )
            {
            $Ofacetseg = existsArgumentWithValue("Ofacet", "seg");
            $Ofacettok = existsArgumentWithValue("Ofacet", "tok");
            $echos = $echos . "Ofacetseg=$Ofacetseg " . "Ofacettok=$Ofacettok ";
            $output = $output . ($Ofacetseg ? " \$Ofacetseg" : "")  . ($Ofacettok ? " \$Ofacettok" : "") ;
            }
        if( hasArgument("Oformat") )
            {
            $OformatplainD = existsArgumentWithValue("Oformat", "plainD");
            $echos = $echos . "OformatplainD=$OformatplainD ";
            $output = $output . ($OformatplainD ? " \$OformatplainD" : "") ;
            }
        if( hasArgument("Olang") )
            {
            $Olangda = existsArgumentWithValue("Olang", "da");
            $Olanggml = existsArgumentWithValue("Olang", "gml");
            $Olangla = existsArgumentWithValue("Olang", "la");
            $Olangsv = existsArgumentWithValue("Olang", "sv");
            $echos = $echos . "Olangda=$Olangda " . "Olanggml=$Olanggml " . "Olangla=$Olangla " . "Olangsv=$Olangsv ";
            $output = $output . ($Olangda ? " \$Olangda" : "")  . ($Olanggml ? " \$Olanggml" : "")  . ($Olangla ? " \$Olangla" : "")  . ($Olangsv ? " \$Olangsv" : "") ;
            }
        if( hasArgument("Operiod") )
            {
            $Operiodc13 = existsArgumentWithValue("Operiod", "c13");
            $echos = $echos . "Operiodc13=$Operiodc13 ";
            $output = $output . ($Operiodc13 ? " \$Operiodc13" : "") ;
            }
        if( hasArgument("Opres") )
            {
            $Opresnml = existsArgumentWithValue("Opres", "nml");
            $echos = $echos . "Opresnml=$Opresnml ";
            $output = $output . ($Opresnml ? " \$Opresnml" : "") ;
            }

/*******************************
* input/output features styles *
*******************************/

/* DUMMY CODE TO SANITY CHECK GENERATED SCRIPT (TODO Remove one of the two solidi from the beginning of this line to activate your own code)
        $dip2plainfile = tempFileName("dip2plain-results");
        $command = "echo $echos >> $dip2plainfile";
        logit($command);

        if(($cmd = popen($command, "r")) == NULL)
            {
            throw new SystemExit(); // instead of exit()
            }

        while($read = fgets($cmd))
            {
            }

        pclose($cmd);
/*/
// YOUR CODE STARTS HERE.
//        TODO your code!
        if($mode == 'dry')
        {
            $dip2plainfile = tempFileName("dip2plain-results");
            scripinit($inputF,$input,$output);
            scrip("../bin/bracmat 'get\$\"dip2plain.bra\"' '\$F' '\$dip2plainfile'");
        }
        else
        {
            if($F != '')
            {
                logit("NOW dip2plain");
            }
            else
            {
                header("HTTP/1.0 404 Input not found (IF). ");
                return;
            }
            if($OformatplainD)
            {
                logit("OformatplainD");
                $dip2plainfile = tempFileName("d2p");
                logit('dip2plainfile='.$dip2plainfile);
                $command = "../bin/bracmat 'get\$\"dip2plain.bra\"' '$F' '$dip2plainfile'";

                logit($command);

                if(($cmd = popen($command, "r")) == NULL)
                {
                    throw new SystemExit(); // instead of exit()
                }

                while($read = fgets($cmd))
                {
                }

                pclose($cmd);
            }
        }
// YOUR CODE ENDS HERE. OUTPUT EXPECTED IN $dip2plainfile
//*/
        $tmpf = fopen($dip2plainfile,'r');

        if($tmpf)
            {
            //logit('output from dip2plain:');
            while($line = fgets($tmpf))
                {
                //logit($line);
                print $line;
                }
            fclose($tmpf);
            }

        if($dodelete)
            {
            foreach ($tobedeleted as $filename => $dot)
                {
                if($dot)
                    unlink($filename);
                }
            unset($tobedeleted);
            }
        }
    loginit();
    do_dip2plain();
    }
catch (SystemExit $e)
    {
    header('HTTP/1.0 404 An error occurred: ' . $ERROR);
    logit('An error occurred' . $ERROR);
    echo $ERROR;
    }
?>

