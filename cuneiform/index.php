<?php
header("Content-type:text/plain; charset=UTF-8");
/*
 * This PHP script is generated by CLARIN-DK's tool registration form 
 * (http://localhost/texton/register). It should, with no or few adaptations
 * work out of the box as a dummy for your web service. The output returned
 * to the CLARIN-DK workflow manager is just a listing of the HTTP parameters
 * received by this web service from the CLARIN-DK workflow manager, and not
 * the output proper. For that you have to add your code to this script and
 * deactivate the dummy functionality. (The comments near the end of this
 * script explain how that is done.)
 *
 * Places in this script that require your attention are marked 'TODO'.
 */
/*
ToolID         : CuneiForm
PassWord       : 
Version        : 0.1.0
Title          : CuneiForm
Path in URL    : cuneiform/	*** TODO make sure your web service listens on this path and that this script is readable for the webserver. ***
Publisher      : Cognitive Technologies
ContentProvider: Cognitive Technologies
Creator        : Cognitive Technologies
InfoAbout      : http://cognitiveforms.ru/products/cuneiform/
Description    : Интеллектуальная система распознавания текста - Optical Character Recognition
ExternalURI    : 
XMLparms       : 
PostData       : 
Inactive       : 
*/

/*******************
* helper functions *
*******************/
$toollog = '../log/CuneiForm.log'; /* Used by the logit() function. TODO make sure the folder exists and is writable. Adapt if needed */
                
/*  TODO Set $dodelete to false if temporary files in /tmp should not be deleted before returning. */
$dodelete = true;
$tobedeleted = array();


function loginit()  /* Wipes the contents of the log file! TODO Change this behaviour if needed. */
    {
    return;
    global $toollog,$ftemp;
    $ftemp = fopen($toollog,'w');
    if($ftemp)
        {
        fwrite($ftemp,$toollog . "\n");
        fclose($ftemp);
        }
    }
    
function logit($str) /* TODO You can use this function to write strings to the log file. */
    {
    return;
    global $toollog,$ftemp;
    $ftemp = fopen($toollog,'a');
    if($ftemp)
        {
        fwrite($ftemp,$str . "\n");
        fclose($ftemp);
        }
    }
    
class SystemExit extends Exception {}
try {
    function hasArgument ($parameterName)
        {
        return isset($_REQUEST["$parameterName"]);
        }

    function getArgument ($parameterName)
        {
        return isset($_REQUEST["$parameterName"]) ? $_REQUEST["$parameterName"] : "";
        }

    function existsArgumentWithValue ($parameterName, $parameterValue)
        {
        /* Check whether there is an argument <parameterName> that has value 
           <parameterValue>. 
           There may be any number of arguments with name <parameterName> !
        */
        $query  = explode('&', $_SERVER['QUERY_STRING']);

        foreach( $query as $param )
            {
            list($name, $value) = explode('=', $param);
            if($parameterName == urldecode($name) && $parameterValue == urldecode($value))
                return true;
            }
        return false;
        }

    function tempFileName($suff) /* TODO Use this to create temporary files, if needed. */
        {
        global $dodelete;
        global $tobedeleted;
        $tmpno = tempnam('/tmp', $suff);
        if($dodelete)
            $tobedeleted[$tmpno] = true;
        return $tmpno;
        }
        
    function requestFile($requestParm) // e.g. "IfacettokF"
        {
        logit("requestFile({$requestParm})");

        if(isset($_REQUEST[$requestParm]))
            {
            $urlbase = isset($_REQUEST["base"]) ? $_REQUEST["base"] : "http://localhost/toolsdata/";

            $item = $_REQUEST[$requestParm];
            $url = $urlbase . $item;
            logit("requestParm:$requestParm");
            logit("urlbase:$urlbase");
            logit("item:$item");
            logit("url[$url]");

            $handle = fopen($url, "r");
            if($handle == false)
                {
                logit("Cannot open url[$url]");
                return "";
                }
            else
                {
                $tempfilename = tempFileName("CuneiForm_{$requestParm}_");
                $temp_fh = fopen($tempfilename, 'w');
                if($temp_fh == false)
                    {
                    fclose($handle);
                    logit("handle closed. Cannot open $tempfilename");
                    return "";
                    }
                else
                    {
                    while (!feof($handle)) 
                        {
                        $read = fread($handle, 8192);
                        fwrite($temp_fh, $read);    
                        }
                    fclose($temp_fh);
                    fclose($handle);
                    return $tempfilename;
                    }
                }
            }
        logit("empty");
        return "";
        }    

    function do_CuneiForm()
        {
        global $dodelete;
        global $tobedeleted;
/***************
* declarations *
***************/

/*
 * TODO Use the variables defined below to configure your tool for the right 
 * input files and the right settings.
 * The input files are local files that your tool can open and close like any
 * other file.
 * If your tool needs to create temporary files, use the tempFileName() 
 * function. It can mark the temporary files for deletion when the webservice
 * is done. (See the global dodelete variable.)
 */
        $base = "";	/* URL from where this web service downloads input. The generated script takes care of that, so you can ignore this variable. */
        $job = "";	/* Only used if this web service returns 201 and POSTs result later. In that case the uploaded file must have the name of the job. */
        $post2 = "";	/* Only used if this web service returns 201 and POSTs result later. In that case the uploaded file must be posted to this URL. */
        $echos = "";	/* List arguments and their actual values. For sanity check of this generated script. All references to this variable can be removed once your web service is working as intended. */
        $F = "";	/* Input (ONLY used if there is exactly ONE input to this workflow step) */
        $Iapprom = false;	/* Appearance in input is roman (roman) if true */
        $Ifacettxt = false;	/* Type of content in input is text (Ingen annotation) if true */
        $Iformatimg = false;	/* Format in input is image (billede) if true */
        $Iformatpdf = false;	/* Format in input is PDF if true */
        $Ilangbg = false;	/* Language in input is Bulgarian (bulgarsk) if true */
        $Ilangcs = false;	/* Language in input is Czech (tjekkisk) if true */
        $Ilangda = false;	/* Language in input is Danish (dansk) if true */
        $Ilangde = false;	/* Language in input is German (tysk) if true */
        $Ilangen = false;	/* Language in input is English (engelsk) if true */
        $Ilanges = false;	/* Language in input is Spanish (spansk) if true */
        $Ilanget = false;	/* Language in input is Estonian (estisk) if true */
        $Ilangfr = false;	/* Language in input is French (fransk) if true */
        $Ilanghr = false;	/* Language in input is Croatian (kroatisk) if true */
        $Ilanghu = false;	/* Language in input is Hungarian (ungarsk) if true */
        $Ilangit = false;	/* Language in input is Italian (italiensk) if true */
        $Ilanglt = false;	/* Language in input is Lithuanian (litauisk) if true */
        $Ilanglv = false;	/* Language in input is Latvian (lettisk) if true */
        $Ilangnl = false;	/* Language in input is Dutch (nederlandsk) if true */
        $Ilangpl = false;	/* Language in input is Polish (polsk) if true */
        $Ilangpt = false;	/* Language in input is Portuguese (portugisisk) if true */
        $Ilangro = false;	/* Language in input is Romanian (rumænsk) if true */
        $Ilangru = false;	/* Language in input is Russian (russisk) if true */
        $Ilangsl = false;	/* Language in input is Slovene (slovensk) if true */
        $Ilangsr = false;	/* Language in input is Serbian (serbisk) if true */
        $Ilangsv = false;	/* Language in input is Swedish (svensk) if true */
        $Ilangtr = false;	/* Language in input is Turkish (tyrkisk) if true */
        $Ilanguk = false;	/* Language in input is Ukrainian (ukrainsk) if true */
        $Ismlsml = false;	/* Smell in input is any smell (lugt) if true */
        $Oappocr = false;	/* Appearance in output is OCR if true */
        $Ofacettxt = false;	/* Type of content in output is text (Ingen annotation) if true */
        $Oformatrtf = false;	/* Format in output is RTF if true */
        $Olangbg = false;	/* Language in output is Bulgarian (bulgarsk) if true */
        $Olangcs = false;	/* Language in output is Czech (tjekkisk) if true */
        $Olangda = false;	/* Language in output is Danish (dansk) if true */
        $Olangde = false;	/* Language in output is German (tysk) if true */
        $Olangen = false;	/* Language in output is English (engelsk) if true */
        $Olanges = false;	/* Language in output is Spanish (spansk) if true */
        $Olanget = false;	/* Language in output is Estonian (estisk) if true */
        $Olangfr = false;	/* Language in output is French (fransk) if true */
        $Olanghr = false;	/* Language in output is Croatian (kroatisk) if true */
        $Olanghu = false;	/* Language in output is Hungarian (ungarsk) if true */
        $Olangit = false;	/* Language in output is Italian (italiensk) if true */
        $Olanglt = false;	/* Language in output is Lithuanian (litauisk) if true */
        $Olanglv = false;	/* Language in output is Latvian (lettisk) if true */
        $Olangnl = false;	/* Language in output is Dutch (nederlandsk) if true */
        $Olangpl = false;	/* Language in output is Polish (polsk) if true */
        $Olangpt = false;	/* Language in output is Portuguese (portugisisk) if true */
        $Olangro = false;	/* Language in output is Romanian (rumænsk) if true */
        $Olangru = false;	/* Language in output is Russian (russisk) if true */
        $Olangsl = false;	/* Language in output is Slovene (slovensk) if true */
        $Olangsr = false;	/* Language in output is Serbian (serbisk) if true */
        $Olangsv = false;	/* Language in output is Swedish (svensk) if true */
        $Olangtr = false;	/* Language in output is Turkish (tyrkisk) if true */
        $Olanguk = false;	/* Language in output is Ukrainian (ukrainsk) if true */
        $Osmlnsl = false;	/* Smell in output is new smell (ny lugt) if true */
        $Iformatimggif = false;	/* Style of format image (billede) in input is 0 if true */
        $Iformatimgjpeg = false;	/* Style of format image (billede) in input is 0 if true */
        $Iformatimgpdf = false;	/* Style of format image (billede) in input is 0 if true */
        $Iformatimgpng = false;	/* Style of format image (billede) in input is 0 if true */
        $Iformatimgtiff = false;	/* Style of format image (billede) in input is 0 if true */

        if( hasArgument("base") )
            {
            $base = getArgument("base");
            }
        if( hasArgument("job") )
            {
            $job = getArgument("job");
            }
        if( hasArgument("post2") )
            {
            $post2 = getArgument("post2");
            }
        $echos = "base=$base job=$job post2=$post2 ";

/*********
* input  *
*********/
        if( hasArgument("F") )
            {        
            $F = requestFile("F");
            if($F == '')
                {
                header("HTTP/1.0 404 Input not found (F parameter). ");
                return;
                }
            $echos = $echos . "F=$F ";
            }

/************************
* input/output features *
************************/
        if( hasArgument("Iapp") )
            {
            $Iapprom = existsArgumentWithValue("Iapp", "rom");
            $echos = $echos . "Iapprom=$Iapprom ";
            }
        if( hasArgument("Ifacet") )
            {
            $Ifacettxt = existsArgumentWithValue("Ifacet", "txt");
            $echos = $echos . "Ifacettxt=$Ifacettxt ";
            }
        if( hasArgument("Iformat") )
            {
            $Iformatimg = existsArgumentWithValue("Iformat", "img");
            $Iformatpdf = existsArgumentWithValue("Iformat", "pdf");
            $echos = $echos . "Iformatimg=$Iformatimg " . "Iformatpdf=$Iformatpdf ";
            }
        if( hasArgument("Ilang") )
            {
            $Ilangbg = existsArgumentWithValue("Ilang", "bg");
            $Ilangcs = existsArgumentWithValue("Ilang", "cs");
            $Ilangda = existsArgumentWithValue("Ilang", "da");
            $Ilangde = existsArgumentWithValue("Ilang", "de");
            $Ilangen = existsArgumentWithValue("Ilang", "en");
            $Ilanges = existsArgumentWithValue("Ilang", "es");
            $Ilanget = existsArgumentWithValue("Ilang", "et");
            $Ilangfr = existsArgumentWithValue("Ilang", "fr");
            $Ilanghr = existsArgumentWithValue("Ilang", "hr");
            $Ilanghu = existsArgumentWithValue("Ilang", "hu");
            $Ilangit = existsArgumentWithValue("Ilang", "it");
            $Ilanglt = existsArgumentWithValue("Ilang", "lt");
            $Ilanglv = existsArgumentWithValue("Ilang", "lv");
            $Ilangnl = existsArgumentWithValue("Ilang", "nl");
            $Ilangpl = existsArgumentWithValue("Ilang", "pl");
            $Ilangpt = existsArgumentWithValue("Ilang", "pt");
            $Ilangro = existsArgumentWithValue("Ilang", "ro");
            $Ilangru = existsArgumentWithValue("Ilang", "ru");
            $Ilangsl = existsArgumentWithValue("Ilang", "sl");
            $Ilangsr = existsArgumentWithValue("Ilang", "sr");
            $Ilangsv = existsArgumentWithValue("Ilang", "sv");
            $Ilangtr = existsArgumentWithValue("Ilang", "tr");
            $Ilanguk = existsArgumentWithValue("Ilang", "uk");
            $echos = $echos . "Ilangbg=$Ilangbg " . "Ilangcs=$Ilangcs " . "Ilangda=$Ilangda " . "Ilangde=$Ilangde " . "Ilangen=$Ilangen " . "Ilanges=$Ilanges " . "Ilanget=$Ilanget " . "Ilangfr=$Ilangfr " . "Ilanghr=$Ilanghr " . "Ilanghu=$Ilanghu " . "Ilangit=$Ilangit " . "Ilanglt=$Ilanglt " . "Ilanglv=$Ilanglv " . "Ilangnl=$Ilangnl " . "Ilangpl=$Ilangpl " . "Ilangpt=$Ilangpt " . "Ilangro=$Ilangro " . "Ilangru=$Ilangru " . "Ilangsl=$Ilangsl " . "Ilangsr=$Ilangsr " . "Ilangsv=$Ilangsv " . "Ilangtr=$Ilangtr " . "Ilanguk=$Ilanguk ";
            }
        if( hasArgument("Isml") )
            {
            $Ismlsml = existsArgumentWithValue("Isml", "sml");
            $echos = $echos . "Ismlsml=$Ismlsml ";
            }
        if( hasArgument("Oapp") )
            {
            $Oappocr = existsArgumentWithValue("Oapp", "ocr");
            $echos = $echos . "Oappocr=$Oappocr ";
            }
        if( hasArgument("Ofacet") )
            {
            $Ofacettxt = existsArgumentWithValue("Ofacet", "txt");
            $echos = $echos . "Ofacettxt=$Ofacettxt ";
            }
        if( hasArgument("Oformat") )
            {
            $Oformatrtf = existsArgumentWithValue("Oformat", "rtf");
            $echos = $echos . "Oformatrtf=$Oformatrtf ";
            }
        if( hasArgument("Olang") )
            {
            $Olangbg = existsArgumentWithValue("Olang", "bg");
            $Olangcs = existsArgumentWithValue("Olang", "cs");
            $Olangda = existsArgumentWithValue("Olang", "da");
            $Olangde = existsArgumentWithValue("Olang", "de");
            $Olangen = existsArgumentWithValue("Olang", "en");
            $Olanges = existsArgumentWithValue("Olang", "es");
            $Olanget = existsArgumentWithValue("Olang", "et");
            $Olangfr = existsArgumentWithValue("Olang", "fr");
            $Olanghr = existsArgumentWithValue("Olang", "hr");
            $Olanghu = existsArgumentWithValue("Olang", "hu");
            $Olangit = existsArgumentWithValue("Olang", "it");
            $Olanglt = existsArgumentWithValue("Olang", "lt");
            $Olanglv = existsArgumentWithValue("Olang", "lv");
            $Olangnl = existsArgumentWithValue("Olang", "nl");
            $Olangpl = existsArgumentWithValue("Olang", "pl");
            $Olangpt = existsArgumentWithValue("Olang", "pt");
            $Olangro = existsArgumentWithValue("Olang", "ro");
            $Olangru = existsArgumentWithValue("Olang", "ru");
            $Olangsl = existsArgumentWithValue("Olang", "sl");
            $Olangsr = existsArgumentWithValue("Olang", "sr");
            $Olangsv = existsArgumentWithValue("Olang", "sv");
            $Olangtr = existsArgumentWithValue("Olang", "tr");
            $Olanguk = existsArgumentWithValue("Olang", "uk");
            $echos = $echos . "Olangbg=$Olangbg " . "Olangcs=$Olangcs " . "Olangda=$Olangda " . "Olangde=$Olangde " . "Olangen=$Olangen " . "Olanges=$Olanges " . "Olanget=$Olanget " . "Olangfr=$Olangfr " . "Olanghr=$Olanghr " . "Olanghu=$Olanghu " . "Olangit=$Olangit " . "Olanglt=$Olanglt " . "Olanglv=$Olanglv " . "Olangnl=$Olangnl " . "Olangpl=$Olangpl " . "Olangpt=$Olangpt " . "Olangro=$Olangro " . "Olangru=$Olangru " . "Olangsl=$Olangsl " . "Olangsr=$Olangsr " . "Olangsv=$Olangsv " . "Olangtr=$Olangtr " . "Olanguk=$Olanguk ";
            }
        if( hasArgument("Osml") )
            {
            $Osmlnsl = existsArgumentWithValue("Osml", "nsl");
            $echos = $echos . "Osmlnsl=$Osmlnsl ";
            }

/*******************************
* input/output features styles *
*******************************/
        if( hasArgument("Iformatimg") )
            {
            $Iformatimggif = existsArgumentWithValue("Iformatimg", "gif");
            $Iformatimgjpeg = existsArgumentWithValue("Iformatimg", "jpeg");
            $Iformatimgpdf = existsArgumentWithValue("Iformatimg", "pdf");
            $Iformatimgpng = existsArgumentWithValue("Iformatimg", "png");
            $Iformatimgtiff = existsArgumentWithValue("Iformatimg", "tiff");
            $echos = $echos . "Iformatimggif=$Iformatimggif " . "Iformatimgjpeg=$Iformatimgjpeg " . "Iformatimgpdf=$Iformatimgpdf " . "Iformatimgpng=$Iformatimgpng " . "Iformatimgtiff=$Iformatimgtiff ";
            }

/* DUMMY CODE TO SANITY CHECK GENERATED SCRIPT (TODO Remove one of the two solidi from the beginning of this line to activate your own code)
        $CuneiFormfile = tempFileName("CuneiForm-results");
        $command = "echo $echos >> $CuneiFormfile";
        logit($command);

        if(($cmd = popen($command, "r")) == NULL)
            {
            throw new SystemExit(); // instead of exit()
            }

        while($read = fgets($cmd))
            {
            }

        pclose($cmd);
/*/
// YOUR CODE STARTS HERE.
//        TODO your code!
	logit("AAA");
        $langs = array(
                   "bg" => "bul", //Bulgarian
                   "cs" => "cze", //Czech
                   "da" => "dan", //Danish
                   "de" => "ger", //German
                   "en" => "eng", //English
                   "es" => "spa", //Spanish
                   "et" => "est", //Estonian
                   "fr" => "fra", //French
                   "hr" => "hrv", //Croatian
                   "hu" => "hun", //Hungarian
                   "it" => "ita", //Italian
                   "lt" => "lit", //Lithuanian
                   "lv" => "lav", //Latvian
                   "nl" => "dut", //Dutch
                   "pl" => "pol", //Polish
                   "pt" => "por", //Portugese
                   "ro" => "rum", //Romanian
                   "ru" => "rus", //Russian
                   //"ru" => "ruseng",   //mixed Russian/English
                   "sl" => "slv", //Slovenian
                   "sr" => "srp", //Serbian
                   "sv" => "swe", //Swedish
                   "tr" => "tur", //Turkish
                   "uk" => "ukr", //Ukrainian
                   );
        $Ilang = getArgument("Ilang");
	logit("BBB");
        $lang = $langs[$Ilang];
        logit("lang $lang");
        if($Oformatrtf)
             {
             $format = 'rtf';
             }
        else {
	     $format = 'text';
             }

        $CuneiFormfile = tempFileName("cune-results");
        if($Iformatpdf)
            {
            $command = "./ocr.sh $lang $format $F $CuneiFormfile";
            }
        else
            {
            $command = "cuneiform -f $format -l $lang -o $CuneiFormfile $F 2> ../log/cuneiform.log";
            }

        logit($command);

        if(($cmd = popen($command, "r")) == NULL)
            {
            throw new SystemExit(); // instead of exit()
            }

        while($read = fgets($cmd))
            {
            }

        pclose($cmd);

// YOUR CODE ENDS HERE. OUTPUT EXPECTED IN $CuneiFormfile
//*/
        $tmpf = fopen($CuneiFormfile,'r');

        if($tmpf)
            {
            //logit('output from CuneiForm:');
            while($line = fgets($tmpf))
                {
                //logit($line);
                print $line;
                }
            fclose($tmpf);
            }

        if($dodelete)
            {
            foreach ($tobedeleted as $filename => $dot) 
                {
                if($dot)
                    unlink($filename);
                }
            unset($tobedeleted);
            }
        }
    loginit();
    do_CuneiForm();
    }
catch (SystemExit $e) 
    { 
    header ('An error occurred.' . $ERROR, true , 404 );
    logit('An error occurred' . $ERROR);
    echo $ERROR;
    }

?>


