<?php
header('Content-type:text/plain; charset=UTF-8');
/*
 * This PHP script is generated by CLARIN-DK's tool registration form
 * (http://localhost/texton/register). It should, with no or few adaptations
 * work out of the box as a dummy for your web service. The output returned
 * to the Text Tonsorium (CLARIN-DK's workflow manager) is just a listing of
 * the HTTP parameters received by this web service from the Text Tonsorium,
 * and not the output proper. For that you have to add your code to this script
 * and deactivate the dummy functionality. (The comments near the end of this
 * script explain how that is done.)
 *
 * Places in this script that require your attention are marked 'TODO'.
 */
/*
ToolID         : CST-Lem
PassWord       : 
Version        : 5.06.2014.0809
Title          : CSTlemma
Path in URL    : CST-lemma/	*** TODO make sure your web service listens on this path and that this script is readable for the webserver. ***
Publisher      : CST
ContentProvider: cst.ku.dk
Creator        : CST
InfoAbout      : cst.dk
Description    : Produces the dictionary look-up form (or lemma) for each word, inflected or not, in the input.
ExternalURI    : https://nlpweb01.nors.ku.dk/tools/
MultiInp       : 
PostData       : 
Inactive       : 
*/

/*******************
* helper functions *
*******************/
$toollog = '../log/CSTLem.log'; /* Used by the logit() function. TODO make sure the folder exists and is writable. Adapt if needed */

/*  TODO Set $dodelete to false if temporary files in /tmp should not be deleted before returning. */
$dodelete = true;
$tobedeleted = array();

function loginit()  /* Wipes the contents of the log file! TODO Change this behaviour if needed. */
    {
    return;
    global $toollog,$ftemp;
    $ftemp = fopen($toollog,'w');
    if($ftemp)
        {
        fwrite($ftemp,$toollog . "\n");
        fclose($ftemp);
        }
    }

function logit($str) /* TODO You can use this function to write strings to the log file. */
    {
    return;
    global $toollog,$ftemp;
    $ftemp = fopen($toollog,'a');
    if($ftemp)
        {
        fwrite($ftemp,$str . "\n");
        fclose($ftemp);
        }
    }

function scripinit($inputF,$input,$output)  /* Initialises outputfile. */
    {
    global $fscrip, $CSTLemfile;
    $fscrip = fopen($CSTLemfile,'w');
    if($fscrip)
        {
        fwrite($fscrip,"/*\n");
        fwrite($fscrip," * ToolID           : CST-Lem\n");
        fwrite($fscrip," * Version          : 5.06.2014.0809\n");
        fwrite($fscrip," * Title            : CSTlemma\n");
        fwrite($fscrip," * ServiceURL       : http://localhost/CST-lemma/\n");
        fwrite($fscrip," * Publisher        : CST\n");
        fwrite($fscrip," * ContentProvider  : cst.ku.dk\n");
        fwrite($fscrip," * Creator          : CST\n");
        fwrite($fscrip," * InfoAbout        : cst.dk\n");
        fwrite($fscrip," * Description      : Produces the dictionary look-up form (or lemma) for each word, inflected or not, in the input.\n");
        fwrite($fscrip," * ExternalURI      : https://nlpweb01.nors.ku.dk/tools/\n");
        fwrite($fscrip," * inputF " . $inputF . "\n");
        fwrite($fscrip," * input  " . $input  . "\n");
        fwrite($fscrip," * output " . $output . "\n");
        fwrite($fscrip," */\n");
        fwrite($fscrip,"\ncd " . getcwd() . "\n");
        fclose($fscrip);
        }
    }

function scrip($str) /* TODO send comments and command line instructions. Don't forget to terminate string with new line character, if needed.*/
    {
    global $fscrip, $CSTLemfile;
    $fscrip = fopen($CSTLemfile,'a');
    if($fscrip)
        {
        fwrite($fscrip,$str . "\n");
        fclose($fscrip);
        }
    }

class SystemExit extends Exception {}
try {
    function hasArgument ($parameterName)
        {
        return isset($_REQUEST["$parameterName"]);
        }

    function getArgument ($parameterName)
        {
        return isset($_REQUEST["$parameterName"]) ? $_REQUEST["$parameterName"] : "";
        }

    function existsArgumentWithValue ($parameterName, $parameterValue)
        {
        /* Check whether there is an argument <parameterName> that has value
           <parameterValue>.
           There may be any number of arguments with name <parameterName> !
        */
        $query  = explode('&', $_SERVER['QUERY_STRING']);

        foreach( $query as $param )
            {
            list($name, $value) = explode('=', $param);
            if($parameterName === urldecode($name) && $parameterValue === urldecode($value))
                return true;
            }
        return false;
        }

    function tempFileName($suff) /* TODO Use this to create temporary files, if needed. */
        {
        global $dodelete;
        global $tobedeleted;
        $tmpno = tempnam('/tmp', $suff);
        if($dodelete)
            $tobedeleted[$tmpno] = true;
        return $tmpno;
        }

    function requestFile($requestParm) // e.g. "IfacettokF"
        {
        logit("requestFile({$requestParm})");

        if(isset($_REQUEST[$requestParm]))
            {
            $urlbase = isset($_REQUEST["base"]) ? $_REQUEST["base"] : "http://localhost/toolsdata/";

            $item = $_REQUEST[$requestParm];
            $url = $urlbase . urlencode($item);
            logit("requestParm:$requestParm");
            logit("urlbase:$urlbase");
            logit("item:$item");
            logit("url[$url]");

            $handle = fopen($url, "r");
            if($handle == false)
                {
                logit("Cannot open url[$url]");
                return "";
                }
            else
                {
                $tempfilename = tempFileName("CSTLem_{$requestParm}_");
                $temp_fh = fopen($tempfilename, 'w');
                if($temp_fh == false)
                    {
                    fclose($handle);
                    logit("handle closed. Cannot open $tempfilename");
                    return "";
                    }
                else
                    {
                    while (!feof($handle))
                        {
                        $read = fread($handle, 8192);
                        fwrite($temp_fh, $read);
                        }
                    fclose($temp_fh);
                    fclose($handle);
                    return $tempfilename;
                    }
                }
            }
        logit("empty");
        return "";
    }

    function splits($toolbin,$filename,$attribute,$annotation,$idprefix,$ancestor,$element)
        {
        global $mode;
        if($mode === 'dry')
            {
            $lemfile = "\$CSTLemfile";
            scrip("python3 ../shared_scripts/pysplit.py $filename $lemfile $ancestor $element $attribute $annotation $idprefix Slem");
            }
        else
            {
            $lemfile = tempFileName("split-".$attribute);
            $command = "python3 ../shared_scripts/pysplit.py $filename $lemfile $ancestor $element $attribute $annotation $idprefix Slem";

            logit($command);

            if(($cmd = popen($command, "r")) === NULL)
                {
                throw new SystemExit(); // instead of exit()
                }

            while($read = fgets($cmd))
                {
                }
            }
        return $lemfile;
        }

    function lemmatiser($Oformat,$Ofacetlem,$Ofacetpos,$Ofacetseg,$Ofacettok,$ShowTag, $Ipresnml, $Opresalf ,$Opresfrq,$OOV,$Opresnml, $Oambiguna, $Iappnrm,$element,$ancestor,$toolres,$toolbin,$language,$toptarg,$foptarg,$filename,$pos,$posattribute,$emptyattribute,$XMLinput,$Iperiodc13,$Iperiodc20)
        {
        global $fscrip, $CSTLemfile,$mode;

        if($mode === 'dry')
            $tmpno = '$CSTLemfile';
        else
            $tmpno = tempFileName("lemma-results");
        $dict = "/dict";
        $periodsubdir = "";
        $Uminus = "-";
        $H = "2";
        //$c = "\$b1[[\$b~1]?\$B]";
        //$c = "\$b[[\$b0]?(\$B)]";
        $cx = "\$b1[[\$b?]~1\$B]";
        if($Oformat === "flat" || $Oformat === "3cole")
            $sep = " -s'|' ";
        else
            $sep = " -s'\\011' ";
        $i = false;

        $wt = "\$w\\t";

        /* $Ofacetlem */
        if($Ofacetlem && !$Ofacetpos && !$Ofacettok)
            $wt = "";

        if($Oformat === "flat")
            $eind = "\$s";
        else
            $eind = "\$s\\n";
        /* $Ofacetlem */
        if($Ofacetlem && !$Ofacetseg)
            $eind = "\\n";
        if($OOV)
            {
            if($i)
                {
                if($Opresnml && !$ShowTag)
                    $c = "[[\$b?]0$wt\$b\$B\\t\$i$eind]";
                else if($toptarg === '-')
                    $c = "[[\$b?]0$wt\$b\$B\\t\$i$eind]";
                else
                    //$c = "$wt\$t\\t\$b[[\$b?]0\$B]\\t\$i$eind"; // word tag lemma info
                    $c = "[[\$b?]0$wt\$b\$B\\t\$t\\t\$i$eind]"; // word lemma tag info
                }
            else
                {
                if($Opresnml && !$ShowTag)
                    $c = "[[\$b?]0$wt\$b\$B$eind]";
                else if($toptarg === '-')
                    $c = "[[\$b?]0$wt\$b\$B$eind]";
                else
                    //$c = "$wt\$t\\t\$b[[\$b?]0\$B]$eind"; // word tag lemma
                    $c = "[[\$b?]0$wt\$b\$B\\t\$t$eind]"; // word lemma tag
                }
            }
        else // $OOV === false;
            {
            if($i)
                {
                if($Opresnml && !$ShowTag)
                    $c = "$wt\$b[[\$b?]0\$B]\\t\$i$eind";
                else if($toptarg === '-')
                    $c = "$wt\$b[[\$b?]0\$B]\\t\$i$eind";
                else
                    //$c = "$wt\$t\\t\$b[[\$b?]0\$B]\\t\$i$eind"; // word tag lemma info
                    $c = "$wt\$b[[\$b?]0\$B]\\t\$t\\t\$i$eind"; // word lemma tag info
                }
            else
                {
                if($Opresnml && !$ShowTag)
                    $c = "$wt\$b[[\$b?]0\$B]$eind";
                else if($toptarg === '-')
                    $c = "$wt\$b[[\$b?]0\$B]$eind";
                else
                    //$c = "$wt\$t\\t\$b[[\$b?]0\$B]$eind"; // word tag lemma
                    $c = "$wt\$b[[\$b?]0\$B]\\t\$t$eind"; // word lemma tag
                }
            }

        logit("c=" . $c);

        $v = "";
        $x = "";
        $z = "";

        $flexrules = "flexrules";


        if($language === 'af')
            {
            $flexrulessubdir = "/1";
            }
        else if($language === 'ast')
            {
            $flexrulessubdir = "/1";
            $flexrules = "flexrules.lemmatization-ast.txt.swp-79.sort-393-step6.2cole_ziggurat_XC";
            }
        else if($language === 'be')
            {
//            $dict = "";
            $flexrulessubdir = "/0";
            $flexrules = "flexrules.BE2.srt-208.txt-54-step1.2cole_XC";
            }
        else if($language === 'bg')
            {
            $flexrulessubdir = "/1";
            }
        else if($language === 'ca')
            {
            $flexrulessubdir = "/1";
            $flexrules = "flexrules.lemmatization-ca.txt.swp-78.sort-393-step7.2cole_ziggurat_XD";
            }
        else if($language === 'cs')
            {
            $flexrulessubdir = "/1";
            }
        else if($language === 'cy')
            {
            $flexrulessubdir = "/0";
            $flexrules = "flexrules.lemmatization-cy.txt.swp-73.sort-393-step1.2cole_ziggurat_XD";
            }
        else if($language === 'da')
            {
            if($Iperiodc20)
                {
                if($Iappnrm)
                    {
                    $periodsubdir = "/c20n";
                    $flexrules = "flexrules.ods_170412.csv.corrected-lems.txt.ph_12_XC";
                    if($pos === 'n')
                        $flexrulessubdir = "/0";
                    else
                        {
                        $flexrules = "flexrules";
                        $flexrulessubdir = "/links";
                        $x = "-x'$toolres/da/lemmatiser/tags/c20n/translationTable'";
                        }
                    }
                else
                    {
                    $periodsubdir = "/c19n";
                    $flexrules = "flexrules.ods_170412.csv.corrected.ph_12_XC";
                    if($pos === 'n')
                        $flexrulessubdir = "/0";
                    else
                        {
                        $flexrules = "flexrules";
                        $flexrulessubdir = "/links";
                        $x = "-x'$toolres/da/lemmatiser/tags/c19n/translationTable'";
                        }
                    }
                }
            else if($Iperiodc13)
                {
                $periodsubdir = "/c13-c18";
                if($pos === 'n')
                    $flexrulessubdir = "/1";
                else // Not the case, currently (May 2018)
                    {
                    $flexrulessubdir = "/links";
                    $x = "-x'$toolres/da/lemmatiser/tags/c13-c18/translationTable'";
                    }
                }
            else
                {
                $periodsubdir = "/c21";
                if($pos === 'n')
                    $flexrulessubdir = "/0";
                else
                    {
                    $flexrulessubdir = "/links";
                    $x = "-x'$toolres/da/lemmatiser/tags/c21/translationTable'";
                    if($Oambiguna)
                        {
                        $z = "-z'$toolres/da/lemmatiser/tags/c21/lemmatags'";
                        //$v = "-v'$toolres/da/lemmatiser/tags/c21/friends'";
                        }
                    }
                }
            }
        else if($language === 'de')
            {
            $flexrulessubdir = "/0";
            $flexrules = "flexrules.dict_de_without_doubles.ph_ziggurat_XC";
            }
        else if($language === 'el')
            {
            $flexrulessubdir = "/1";
            }
        else if($language === 'en')
            {
            if($pos==='n')
                {
                $flexrulessubdir = "/1";
                $flexrules = "flexrules.dict_en_without_doubles_github_node-lemmatizer_additions-2-1070-step1.2cole_XC";
                }
            else
                {
                $flexrulessubdir = "/links";
                $flexrules = "flexrules";
                }
            if($toptarg === '')
                $x = "-x'$toolres/en/lemmatiser/tags/translation'";
            if($toptarg === '')
                {
                $z = "-z'$toolres/en/lemmatiser/tags/lemmatags'";
                $v = "-v'$toolres/en/lemmatiser/tags/friends'";
                }
            }
        else if($language === 'es')
            {
            $flexrulessubdir = "/1";
            }
        else if($language === 'et')
            {
            $flexrulessubdir = "/1";
            }
        else if($language === 'fa')
            {
            $flexrulessubdir = "/1";
            $flexrules = "flexrules.fa-817.3col-752-step1.2cole_prefixed_XD";
            $dict = "/dict.fa";
            }
        else if($language === 'fo')
            {
            $flexrulessubdir = "/1";
            $flexrules = "flexrules.edfm-WrdLemTag-Storasnid-196.sorted-39-step1.2cole_XC";
            }
        else if($language === 'fr')
            {
            $flexrulessubdir = "/1";
            $flexrules = "flexrules.frlexambi.uden.dubletter.ph_XC";
          }
        else if($language === 'ga')
            {
            $flexrulessubdir = "/0";
            $flexrules = "flexrules.lemmatization-ga.txt.swp-77.sort-393-step2.2cole_ziggurat_XD";
            }
        else if($language === 'gd')
            {
            $flexrulessubdir = "/0";
            $flexrules = "flexrules.lemmatization-gd.txt.swp-76.sort-393-step3.2cole_ziggurat_XD";
            }
        else if($language === 'gl')
            {
            $flexrulessubdir = "/1";
            $flexrules = "flexrules.lemmatization-gl.txt.swp-75.sort-393-step4.2cole_ziggurat_XD";
            }
        else if($language === 'gml')
            {
            $flexrulessubdir = "/1";
            $flexrules = "flexrules";
            if($Iperiodc13)
                {
                $periodsubdir = "/c13";
                if($pos === 'n')
                    {
                //  $flexrulessubdir = "/1";
                    $flexrulessubdir = "/0";
                    $flexrules = "flexrules.toklem.tab.uniq2.sort.ph_L8_XD";
                    }
                else
                    {
                    $flexrulessubdir = "/links";
                    $x = "";
                    }
                }
            }
        else if($language === 'gv')
            {
            $flexrulessubdir = "/1";
            $flexrules = "flexrules.lemmatization-gv.txt.swp-74.sort-393-step5.2cole_ziggurat_XC";
            }
        else if($language === 'hr')
            {
            $flexrulessubdir = "/1";
            }
        else if($language === 'hu')
            {
            $flexrulessubdir = "/0";
            }
        else if($language === 'is')
            {
            $flexrules = "icelandic.flexrules";
            }
        else if($language === 'it')
            {
            $flexrulessubdir = "/1";
            }
        else if($language === 'ka')
            {
            $flexrulessubdir = "/0";
            $flexrules = "flexrules.ka-lemma.lex-393.txt-289-step1.2cole_XC";
            }
        else if($language === 'la')
            {
            $flexrulessubdir = "/2";
            }
        else if($language === 'mk')
            {
            $flexrulessubdir = "/1";
            }
        else if($language === 'nl')
            {
            $flexrulessubdir = "/1";
            }
        else if($language === 'no')
            {
            $flexrulessubdir = "/1";
            $flexrules = "flexrules.trainingpairs_-172.plus_scarrie-16-step1.2cole_zigguratC_XC";
            }
        else if($language === 'pl')
            {
            $flexrulessubdir = "/0";
            $flexrules = "flexrules.polimorfologik.txt.ph_ziggurat_XC";
            }
        else if($language === 'pt')
            {
            $flexrulessubdir = "/1";
            }
        else if($language === 'ro')
            {
            $flexrulessubdir = "/1";
            }
        else if($language === 'ru')
            {
            $flexrulessubdir = "/1";
            $flexrules = "flexrules.ru-lemma.tabru-msd-ru-lemma-cleaned.ph_XC";
            }
        else if($language === 'sk')
            {
            $flexrulessubdir = "/0";
            }
        else if($language === 'sl')
            {
            $flexrulessubdir = "/1";
            $flexrules = "flexrules.clearedFile-40.sort-349-step1.2cole_ziggurat_XC";
            }
        else if($language === 'sq')
            {
            $flexrulessubdir = "/3";
            $flexrules = "flexrules.verbs_tagged_plus_albanian-everything-3.conllu-1072-step1.3col-4.txt-1075-step1.2cole_XE";
            }
        else if($language === 'sr')
            {
            $flexrulessubdir = "/1";
            }
        else if($language === 'sv')
            {
            $flexrulessubdir = "/1";
            $flexrules = "flexrules.lemmatization-sv-swedishroottable_without_doubles-UD.ph_ziggurat_XC";
            }
        else if($language === 'tr')
            {
            $flexrulessubdir = "/1";
            }
        else if($language === 'uk')
            {
            $flexrulessubdir = "";
            }
        else
            {
            $flexrulessubdir = "";
            }

        if($toptarg === '')
        // input is tagged
            {
            $Iflat = ''; // Important! '$w/$t\\s' does not find last occurrence of slash
            // Default is that slash separates word from tag. This uses different code.
            }
        else
        // input is not tagged
            {
            $Iflat = "-I'\$w\\s'";
            }
        logit("language $language");
        if($Oambiguna)
            {
            $Uminus = "";
            $uminus = "";
            $H = "0";
            logit("Uminus $Uminus");
            }

        if($Ipresnml && !$Opresnml || $ShowTag)
            {
            if($Opresalf)
                {
                if($OOV)
                    {
                    if($Ofacetlem)
                        {
                        if(!$Ofacettok && !$ShowTag)
                            {
                            $command =             "-qwft -B'\$f\\t\$w\\n'       -b''                                       $Iflat";
                            }
                        else if($ShowTag)
                            {
                            $command =             "-qwft -B'\$f\\t\$w\\t\$W\\n' -b''                   -W'\$f\\t\$w\\t\$t' $Iflat";
                            }
                        else
                            {
                            $command =             "-qwft -B'\$f\\t\$w\\t\$W\\n' -b''                   -W'\$f\\t\$w'       $Iflat";
                            }
                        }
                    else
                        {
                        if($ShowTag)
                            {
                            $command =             "-qwft -B'\$W\\n'             -b''                   -W'\$f\\t\$w\\t\$t' $Iflat";
                            }
                        else
                            {
                            $command =             "-qwft -B'\$W\\n'             -b''                   -W'\$f\\t\$w'       $Iflat";
                            }
                        }
                    }
                else 
                    {
                    if($Ofacetlem)
                        {
                        if(!$Ofacettok && !$ShowTag)
                            {
                            $command =             "-qwft -B'\$f\\t\$w\\n'       -b'\$f\\t\$w\\n'                           $Iflat";
                            }
                        else if($ShowTag)
                            {
                            $command =             "-qwft -B'\$f\\t\$w\\t\$W\\n' -b'\$f\\t\$w\\t\$W\\n' -W'\$f\\t\$w\\t\$t' $Iflat";
                            }
                        else
                            {
                            $command =             "-qwft -B'\$f\\t\$w\\t\$W\\n' -b'\$f\\t\$w\\t\$W\\n' -W'\$f\\t\$w'       $Iflat";
                            }
                        }
                    else
                        {
                        if($ShowTag)
                            {
                            $command =             "-qwft -B'\$W\\n'             -b'\$W\\n'             -W'\$f\\t\$w\\t\$t' $Iflat";
                            }
                        else
                            {
                            $command =             "-qwft -B'\$W\\n'             -b'\$W\\n'             -W'\$f\\t\$w'       $Iflat";
                            }
                        }
                    }
                }
            else if($Opresfrq )
                {
                if($OOV)
                    {
                    if($Ofacetlem)
                        {
                        if(!$Ofacettok && !$ShowTag)
                            {
                            $command =             "-qfwt -B'\$f\\t\$w\\n'       -b''                                       $Iflat";
                            }
                        else if($ShowTag)
                            {
                            $command =             "-qfwt -B'\$f\\t\$w\\t\$W\\n' -b''                   -W'\$f\\t\$w\\t\$t' $Iflat";
                            }
                        else
                            {
                            $command =             "-qfwt -B'\$f\\t\$w\\t\$W\\n' -b''                   -W'\$f\\t\$w'       $Iflat";
                            }
                        }
                    else
                        {
                        if($ShowTag)
                            {
                            $command =             "-qfwt -B'\$W\\n'             -b''                   -W'\$f\\t\$w\\t\$t' $Iflat";
                            }
                        else
                            {
                            $command =             "-qfwt -B'\$W\\n'             -b''                   -W'\$f\\t\$w'       $Iflat";
                            }
                        }
                    }
                else
                    {
                    if($Ofacetlem)
                        {
                        if(!$Ofacettok && !$ShowTag)
                            {
                            $command =             "-qfwt -B'\$f\\t\$w\\n'       -b'\$f\\t\$w\\n'                           $Iflat";
                            }
                        else if($ShowTag)
                            {
                            $command =             "-qfwt -B'\$f\\t\$w\\t\$W\\n' -b'\$f\\t\$w\\t\$W\\n' -W'\$f\\t\$w\\t\$t' $Iflat";
                            }
                        else
                            {
                            $command =             "-qfwt -B'\$f\\t\$w\\t\$W\\n' -b'\$f\\t\$w\\t\$W\\n' -W'\$f\\t\$w'       $Iflat";
                            }
                        }
                    else
                        {
                        if($ShowTag)
                            {
                            $command =             "-qfwt -B'\$W\\n'             -b'\$W\\n'             -W'\$f\\t\$w\\t\$t' $Iflat";
                            }
                        else
                            {
                            $command =             "-qfwt -B'\$W\\n'             -b'\$W\\n'             -W'\$f\\t\$w'       $Iflat";
                            }
                        }
                    }
                }
            else
                {
                $command =             "-q-   -B'\$w'                -b'\$w'                -c'$c'              $Iflat";
                }
            }
        else if($emptyattribute !== "")
            if($posattribute !== "")
                {
                $command =             "-q-   -B'\$w'                -b'\$w'                -c'$cx'                        -Xl$emptyattribute -Xp$posattribute";
                }
            else
                {
                $command =             "-q-   -B'\$w'                -b'\$w'                -c'$cx'             -I'\$w\\s' -Xl$emptyattribute";
                }
        else if($XMLinput === 'j')
            {
            $command =             "-q-   -B'\$w'                -b'\$w'                -c'$cx'             $Iflat -X";
            }
        else
            {
            $command =             "-q-   -B'\$w'                -b'\$w'                -c'$c'              $Iflat";
            }

        logit("commandA:" . $command);

        if(file_exists("$toolres/$language/lemmatiser/$foptarg$periodsubdir$dict.gz"))
            {
            logit("gunzip $toolres/$language/lemmatiser/$foptarg$periodsubdir$dict.gz");
            system("gunzip $toolres/$language/lemmatiser/$foptarg$periodsubdir$dict.gz");
            }

        if($dict !== "")
            $command = $command . " -d'$toolres/$language/lemmatiser/$foptarg$periodsubdir$dict'";

        $command = "$toolbin/cstlemma -L -eU -p -t$toptarg -U$Uminus -u$Uminus -H$H -l- -f'$toolres/$language/lemmatiser/$foptarg$periodsubdir$flexrulessubdir/$flexrules' -i $filename -o $tmpno " . $command;
        
        logit("commandB:" . $command);

        if($XMLinput === 'j')
            {
            if($pos !== 'n')
                {
                $command = $command . " -Xppos";
                }
            if($ancestor !== '')
                {
                $command = $command . ' -Xa' . $ancestor;
                }
            if($element !== '')
                {
                $command = $command . ' -Xe' . $element;
                }
            }

        if($z !== "")
            $command = $command . " " . $z;

        if($v !== "")
            $command = $command . " " . $v;

        if($x !== "")
            $command = $command . " " . $x;


        $command = $command . $sep;

        logit($command);
        // ../bin/cstlemma -L -eU -p -t- -U- -u- -H1 -l- -f'../texton-linguistic-resources/da/lemmatiser/notags/c21/0/flexrules' -d'../texton-linguistic-resources/da/lemmatiser/notags/c21/dict' -i /tmp/CSTLem_F_7338gJ -o /tmp/lemma-results3OobbI -qfwt -B'$f\t$w\t$W\n' -b'$f\t$w\t$W\n' -W'$f\t$w'       -I'$w\s' -s'|'
        logit(getcwd());
        if($mode === 'dry')
            {
                scrip("$command");
            }
        else
            {
            if(($cmd = popen($command, "r")) === NULL)
                {
                throw new SystemExit(); // instead of exit()
                }

            while($read = fgets($cmd))
                {
                }

            pclose($cmd);
            }
        return $tmpno;
        }


    function merge($toolbin,$uploadfile,$uploadfileAnnotation,$mergeattribute,$emptyattribute)
        {
        global $mode;
        if($mode === 'dry')
            {
            $lemmainputfile = "\$lemmainputfile";
            scrip("python3 pymerge.py $uploadfile $uploadfileAnnotation $mergeattribute $lemmainputfile $emptyattribute");
            }
        else
            {
            $lemmainputfile = tempFileName("merge");
            $command = "python3 pymerge.py $uploadfile $uploadfileAnnotation $mergeattribute $lemmainputfile $emptyattribute";
            logit($command);

            if(($cmd = popen($command, "r")) === NULL)
                {
                throw new SystemExit(); // instead of exit()
                }

            while($read = fgets($cmd))
                {
                }
            }
        return $lemmainputfile;
        }


    function add($toolbin,$uploadfile,$attribute,$element,$idprefix,$ancestor)
        {
        global $ERROR;
        global $mode;
        $lemmainputfile = tempFileName("add-" . $attribute . "-attribute");
        if($mode === 'dry')
            {
            if($idprefix === '')
                scrip("python3 pyaddatt.py $uploadfile \$lemmainputfile $attribute $ancestor $element -");
            else
                scrip("python3 pyaddatt.py $uploadfile \$lemmainputfile $attribute $ancestor $element id");
            }
        else
            {
            if($idprefix === '')
                $command = "python3 pyaddatt.py $uploadfile $lemmainputfile $attribute $ancestor $element -";
            else
                $command = "python3 pyaddatt.py $uploadfile $lemmainputfile $attribute $ancestor $element id";
            logit($command);
            if(($cmd = popen($command, "r")) === NULL)
                {
                throw new SystemExit(); // instead of exit()
                }

            while($read = fgets($cmd))
                {
                }
            $handle = @fopen("$lemmainputfile", "r");
            if ($handle)
                {
                if(($buffer = fgets($handle, 4096)) !== false)
                    {
                    //logit("buffer:[" . $buffer . "]");
                    if(strncmp($buffer,"ERROR",5) === 0)
                        {
                        fclose($handle);
                        $ERROR = $buffer;
                        throw new SystemExit(); // instead of exit()
                        }
                    }
                fclose($handle);
                }
            }
        return $lemmainputfile;
        }

    function do_CSTLem()
        {
        global $CSTLemfile;
        global $dodelete;
        global $tobedeleted;
        global $mode;
/***************
* declarations *
***************/

/*
 * TODO Use the variables defined below to configure your tool for the right
 * input files and the right settings.
 * The input files are local files that your tool can open and close like any
 * other file.
 * If your tool needs to create temporary files, use the tempFileName()
 * function. It can mark the temporary files for deletion when the webservice
 * is done. (See the global dodelete variable.)
 */
        $base = "";	/* URL from where this web service downloads input. The generated script takes care of that, so you can ignore this variable. */
        $job = "";	/* Only used if this web service returns 201 and POSTs result later. In that case the uploaded file must have the name of the job. */
        $post2 = "";	/* Only used if this web service returns 201 and POSTs result later. In that case the uploaded file must be posted to this URL. */
        $mode = "";	/* If the value is 'dry', the wrapper is expected to return a script of what will be done if the value is not 'dry', but 'run'. */
        $inputF = "";	/* List of all input files. */
        $input = "";	/* List of all input features. */
        $output = "";	/* List of all output features. */
        $echos = "";	/* List arguments and their actual values. For sanity check of this generated script. All references to this variable can be removed once your web service is working as intended. */
        $F = "";	/* Input (ONLY used if there is exactly ONE input to this workflow step) */
        $IfacetposF = "";	/* Input with type of content PoS-tags (PoS-tags) */
        $IfacettokF = "";	/* Input with type of content tokens (tokens) */
        $Iambigamb = false;	/* Ambiguity in input is ambiguous (tvetydig) if true */
        $Iambiguna = false;	/* Ambiguity in input is unambiguous (utvetydig) if true */
        $Iappnrm = false;	/* Appearance in input is normalised (normaliseret) if true */
        $Iappunn = false;	/* Appearance in input is unnormalised (ikke-normaliseret) if true */
        $Ifacet_par_pos_seg_tok = false;	/* Type of content in input is paragraphs (paragrafsegmenter) and PoS-tags (PoS-tags) and segments (sætningssegmenter) and tokens (tokens) if true */
        $Ifacet_par_seg_tok = false;	/* Type of content in input is paragraphs (paragrafsegmenter) and segments (sætningssegmenter) and tokens (tokens) if true */
        $Ifacet_pos_seg_tok = false;	/* Type of content in input is PoS-tags (PoS-tags) and segments (sætningssegmenter) and tokens (tokens) if true */
        $Ifacet_seg_tok = false;	/* Type of content in input is segments (sætningssegmenter) and tokens (tokens) if true */
        $Ifacetpos = false;	/* Type of content in input is PoS-tags (PoS-tags) if true */
        $Ifacettok = false;	/* Type of content in input is tokens (tokens) if true */
        $Iformatflat = false;	/* Format in input is plain (flad) if true */
        $Iformattxtann = false;	/* Format in input is TEIP5DKCLARIN_ANNOTATION if true */
        $Ilangaf = false;	/* Language in input is Afrikaans (afrikaans) if true */
        $Ilangast = false;	/* Language in input is Asturian (asturisk) if true */
        $Ilangbe = false;	/* Language in input is Belarusian (hviderussisk) if true */
        $Ilangbg = false;	/* Language in input is Bulgarian (bulgarsk) if true */
        $Ilangca = false;	/* Language in input is Catalan (katalansk) if true */
        $Ilangcs = false;	/* Language in input is Czech (tjekkisk) if true */
        $Ilangcy = false;	/* Language in input is Welsh (walisisk) if true */
        $Ilangda = false;	/* Language in input is Danish (dansk) if true */
        $Ilangde = false;	/* Language in input is German (tysk) if true */
        $Ilangel = false;	/* Language in input is Greek (græsk) if true */
        $Ilangen = false;	/* Language in input is English (engelsk) if true */
        $Ilanges = false;	/* Language in input is Spanish (spansk) if true */
        $Ilanget = false;	/* Language in input is Estonian (estisk) if true */
        $Ilangfa = false;	/* Language in input is Persian (persisk) if true */
        $Ilangfo = false;	/* Language in input is Faroese (færøsk) if true */
        $Ilangfr = false;	/* Language in input is French (fransk) if true */
        $Ilangga = false;	/* Language in input is Irish (irsk) if true */
        $Ilanggd = false;	/* Language in input is Scottish Gaelic (skotsk gælisk) if true */
        $Ilanggl = false;	/* Language in input is Galician (galicisk) if true */
        $Ilanggml = false;	/* Language in input is Middle Low German (middelnedertysk) if true */
        $Ilanggv = false;	/* Language in input is Manx (mansk) if true */
        $Ilanghr = false;	/* Language in input is Croatian (kroatisk) if true */
        $Ilanghu = false;	/* Language in input is Hungarian (ungarsk) if true */
        $Ilangis = false;	/* Language in input is Icelandic (islandsk) if true */
        $Ilangit = false;	/* Language in input is Italian (italiensk) if true */
        $Ilangka = false;	/* Language in input is Georgian (georgisk) if true */
        $Ilangla = false;	/* Language in input is Latin (latin) if true */
        $Ilangmk = false;	/* Language in input is Macedonian (makedonsk) if true */
        $Ilangnl = false;	/* Language in input is Dutch (nederlandsk) if true */
        $Ilangno = false;	/* Language in input is Norwegian (norsk) if true */
        $Ilangpl = false;	/* Language in input is Polish (polsk) if true */
        $Ilangpt = false;	/* Language in input is Portuguese (portugisisk) if true */
        $Ilangro = false;	/* Language in input is Romanian (rumænsk) if true */
        $Ilangru = false;	/* Language in input is Russian (russisk) if true */
        $Ilangsk = false;	/* Language in input is Slovak (slovakisk) if true */
        $Ilangsl = false;	/* Language in input is Slovene (slovensk) if true */
        $Ilangsq = false;	/* Language in input is Albanian (albansk) if true */
        $Ilangsr = false;	/* Language in input is Serbian (serbisk) if true */
        $Ilangsv = false;	/* Language in input is Swedish (svensk) if true */
        $Ilanguk = false;	/* Language in input is Ukrainian (ukrainsk) if true */
        $Iperiodc13 = false;	/* Historical period in input is medieval (middelalderen) if true */
        $Iperiodc20 = false;	/* Historical period in input is late modern (moderne tid) if true */
        $Iperiodc21 = false;	/* Historical period in input is contemporary (efterkrigstiden) if true */
        $Ipresnml = false;	/* Assemblage in input is normal if true */
        $Oambigamb = false;	/* Ambiguity in output is ambiguous (tvetydig) if true */
        $Oambiguna = false;	/* Ambiguity in output is unambiguous (utvetydig) if true */
        $Oappnrm = false;	/* Appearance in output is normalised (normaliseret) if true */
        $Oappunn = false;	/* Appearance in output is unnormalised (ikke-normaliseret) if true */
        $Ofacetlem = false;	/* Type of content in output is lemmas (lemmaer) if true */
        $Ofacetpar = false;	/* Type of content in output is paragraphs (paragrafsegmenter) if true */
        $Ofacetpos = false;	/* Type of content in output is PoS-tags (PoS-tags) if true */
        $Ofacetseg = false;	/* Type of content in output is segments (sætningssegmenter) if true */
        $Ofacettok = false;	/* Type of content in output is tokens (tokens) if true */
        $Oformatcols = false;	/* Format in output is columns, tab separated fields (kolonner, tab separeret) if true */
        $Oformatflat = false;	/* Format in output is plain (flad) if true */
        $Oformattxtann = false;	/* Format in output is TEIP5DKCLARIN_ANNOTATION if true */
        $Olangaf = false;	/* Language in output is Afrikaans (afrikaans) if true */
        $Olangast = false;	/* Language in output is Asturian (asturisk) if true */
        $Olangbe = false;	/* Language in output is Belarusian (hviderussisk) if true */
        $Olangbg = false;	/* Language in output is Bulgarian (bulgarsk) if true */
        $Olangca = false;	/* Language in output is Catalan (katalansk) if true */
        $Olangcs = false;	/* Language in output is Czech (tjekkisk) if true */
        $Olangcy = false;	/* Language in output is Welsh (walisisk) if true */
        $Olangda = false;	/* Language in output is Danish (dansk) if true */
        $Olangde = false;	/* Language in output is German (tysk) if true */
        $Olangel = false;	/* Language in output is Greek (græsk) if true */
        $Olangen = false;	/* Language in output is English (engelsk) if true */
        $Olanges = false;	/* Language in output is Spanish (spansk) if true */
        $Olanget = false;	/* Language in output is Estonian (estisk) if true */
        $Olangfa = false;	/* Language in output is Persian (persisk) if true */
        $Olangfo = false;	/* Language in output is Faroese (færøsk) if true */
        $Olangfr = false;	/* Language in output is French (fransk) if true */
        $Olangga = false;	/* Language in output is Irish (irsk) if true */
        $Olanggd = false;	/* Language in output is Scottish Gaelic (skotsk gælisk) if true */
        $Olanggl = false;	/* Language in output is Galician (galicisk) if true */
        $Olanggml = false;	/* Language in output is Middle Low German (middelnedertysk) if true */
        $Olanggv = false;	/* Language in output is Manx (mansk) if true */
        $Olanghr = false;	/* Language in output is Croatian (kroatisk) if true */
        $Olanghu = false;	/* Language in output is Hungarian (ungarsk) if true */
        $Olangis = false;	/* Language in output is Icelandic (islandsk) if true */
        $Olangit = false;	/* Language in output is Italian (italiensk) if true */
        $Olangka = false;	/* Language in output is Georgian (georgisk) if true */
        $Olangla = false;	/* Language in output is Latin (latin) if true */
        $Olangmk = false;	/* Language in output is Macedonian (makedonsk) if true */
        $Olangnl = false;	/* Language in output is Dutch (nederlandsk) if true */
        $Olangno = false;	/* Language in output is Norwegian (norsk) if true */
        $Olangpl = false;	/* Language in output is Polish (polsk) if true */
        $Olangpt = false;	/* Language in output is Portuguese (portugisisk) if true */
        $Olangro = false;	/* Language in output is Romanian (rumænsk) if true */
        $Olangru = false;	/* Language in output is Russian (russisk) if true */
        $Olangsk = false;	/* Language in output is Slovak (slovakisk) if true */
        $Olangsl = false;	/* Language in output is Slovene (slovensk) if true */
        $Olangsq = false;	/* Language in output is Albanian (albansk) if true */
        $Olangsr = false;	/* Language in output is Serbian (serbisk) if true */
        $Olangsv = false;	/* Language in output is Swedish (svensk) if true */
        $Olanguk = false;	/* Language in output is Ukrainian (ukrainsk) if true */
        $Operiodc13 = false;	/* Historical period in output is medieval (middelalderen) if true */
        $Operiodc20 = false;	/* Historical period in output is late modern (moderne tid) if true */
        $Operiodc21 = false;	/* Historical period in output is contemporary (efterkrigstiden) if true */
        $Opresalf = false;	/* Assemblage in output is alphabetic list (alfabetisk liste) if true */
        $Opresfrq = false;	/* Assemblage in output is frequency list (frekvensliste) if true */
        $Opresnml = false;	/* Assemblage in output is normal if true */
        $Opresuaf = false;	/* Assemblage in output is alphabetic list, OOV only (alfabetisk liste, kun ukendte ord) if true */
        $Opresufq = false;	/* Assemblage in output is frequency list, OOV only (frekvensliste, kun ukendte ord) if true */
        $Ifacet_par_pos_seg_tok__pos_DSL = false;	/* Style of type of content paragraphs (paragrafsegmenter) and PoS-tags (PoS-tags) and segments (sætningssegmenter) and tokens (tokens) in input is DSL-tagset for the PoS-tags (PoS-tags) component if true */
        $Ifacet_par_pos_seg_tok__pos_HiNTS = false;	/* Style of type of content paragraphs (paragrafsegmenter) and PoS-tags (PoS-tags) and segments (sætningssegmenter) and tokens (tokens) in input is HiNTS (Historisches-Niederdeutsch-Tagset) for the PoS-tags (PoS-tags) component if true */
        $Ifacet_par_pos_seg_tok__pos_PT = false;	/* Style of type of content paragraphs (paragrafsegmenter) and PoS-tags (PoS-tags) and segments (sætningssegmenter) and tokens (tokens) in input is Penn Treebank for the PoS-tags (PoS-tags) component if true */
        $Ifacet_par_pos_seg_tok__pos_Par = false;	/* Style of type of content paragraphs (paragrafsegmenter) and PoS-tags (PoS-tags) and segments (sætningssegmenter) and tokens (tokens) in input is CST-tagset for the PoS-tags (PoS-tags) component if true */
        $Ifacet_par_pos_seg_tok__pos_Uni = false;	/* Style of type of content paragraphs (paragrafsegmenter) and PoS-tags (PoS-tags) and segments (sætningssegmenter) and tokens (tokens) in input is Universal Part-of-Speech Tagset for the PoS-tags (PoS-tags) component if true */
        $Ifacet_pos_seg_tok__pos_DSL = false;	/* Style of type of content PoS-tags (PoS-tags) and segments (sætningssegmenter) and tokens (tokens) in input is DSL-tagset for the PoS-tags (PoS-tags) component if true */
        $Ifacet_pos_seg_tok__pos_HiNTS = false;	/* Style of type of content PoS-tags (PoS-tags) and segments (sætningssegmenter) and tokens (tokens) in input is HiNTS (Historisches-Niederdeutsch-Tagset) for the PoS-tags (PoS-tags) component if true */
        $Ifacet_pos_seg_tok__pos_PT = false;	/* Style of type of content PoS-tags (PoS-tags) and segments (sætningssegmenter) and tokens (tokens) in input is Penn Treebank for the PoS-tags (PoS-tags) component if true */
        $Ifacet_pos_seg_tok__pos_Par = false;	/* Style of type of content PoS-tags (PoS-tags) and segments (sætningssegmenter) and tokens (tokens) in input is CST-tagset for the PoS-tags (PoS-tags) component if true */
        $Ifacet_pos_seg_tok__pos_Uni = false;	/* Style of type of content PoS-tags (PoS-tags) and segments (sætningssegmenter) and tokens (tokens) in input is Universal Part-of-Speech Tagset for the PoS-tags (PoS-tags) component if true */
        $IfacetposDSL = false;	/* Style of type of content PoS-tags (PoS-tags) in input is DSL-tagset if true */
        $IfacetposHiNTS = false;	/* Style of type of content PoS-tags (PoS-tags) in input is HiNTS (Historisches-Niederdeutsch-Tagset) if true */
        $IfacetposPT = false;	/* Style of type of content PoS-tags (PoS-tags) in input is Penn Treebank if true */
        $IfacetposPar = false;	/* Style of type of content PoS-tags (PoS-tags) in input is CST-tagset if true */
        $IfacetposUni = false;	/* Style of type of content PoS-tags (PoS-tags) in input is Universal Part-of-Speech Tagset if true */
        $OfacetposDSL = false;	/* Style of type of content PoS-tags (PoS-tags) in output is DSL-tagset if true */
        $OfacetposHiNTS = false;	/* Style of type of content PoS-tags (PoS-tags) in output is HiNTS (Historisches-Niederdeutsch-Tagset) if true */
        $OfacetposPT = false;	/* Style of type of content PoS-tags (PoS-tags) in output is Penn Treebank if true */
        $OfacetposPar = false;	/* Style of type of content PoS-tags (PoS-tags) in output is CST-tagset if true */
        $OfacetposUni = false;	/* Style of type of content PoS-tags (PoS-tags) in output is Universal Part-of-Speech Tagset if true */

        if( hasArgument("base") )
            {
            $base = getArgument("base");
            }
        if( hasArgument("job") )
            {
            $job = getArgument("job");
            }
        if( hasArgument("post2") )
            {
            $post2 = getArgument("post2");
            }
        if( hasArgument("mode") )
            {
            $mode = getArgument("mode");
            }
        $echos = "base=$base job=$job post2=$post2 mode=$mode ";

/*********
* input  *
*********/
        if( hasArgument("F") )
            {
            $F = requestFile("F");
            if($F === '')
                {
                header("HTTP/1.0 404 Input not found (F parameter). ");
                return;
                }
            $echos = $echos . "F=$F ";
            $inputF = $inputF . " \$F ";
            }
        if( hasArgument("IfacetposF") )
            {
            $IfacetposF = requestFile("IfacetposF");
            if($IfacetposF === '')
                {
                header("HTTP/1.0 404 Input with type of content 'PoS-tags (PoS-tags)' not found (IfacetposF parameter). ");
                return;
                }
            $echos = $echos . "IfacetposF=$IfacetposF ";
            $inputF = $inputF . " \$IfacetposF ";
            }
        if( hasArgument("IfacettokF") )
            {
            $IfacettokF = requestFile("IfacettokF");
            if($IfacettokF === '')
                {
                header("HTTP/1.0 404 Input with type of content 'tokens (tokens)' not found (IfacettokF parameter). ");
                return;
                }
            $echos = $echos . "IfacettokF=$IfacettokF ";
            $inputF = $inputF . " \$IfacettokF ";
            }

/************************
* input/output features *
************************/
        if( hasArgument("Iambig") )
            {
            $Iambigamb = existsArgumentWithValue("Iambig", "amb");
            $Iambiguna = existsArgumentWithValue("Iambig", "una");
            $echos = $echos . "Iambigamb=$Iambigamb " . "Iambiguna=$Iambiguna ";
            $input = $input . ($Iambigamb ? " \$Iambigamb" : "")  . ($Iambiguna ? " \$Iambiguna" : "") ;
            }
        if( hasArgument("Iapp") )
            {
            $Iappnrm = existsArgumentWithValue("Iapp", "nrm");
            $Iappunn = existsArgumentWithValue("Iapp", "unn");
            $echos = $echos . "Iappnrm=$Iappnrm " . "Iappunn=$Iappunn ";
            $input = $input . ($Iappnrm ? " \$Iappnrm" : "")  . ($Iappunn ? " \$Iappunn" : "") ;
            }
        if( hasArgument("Ifacet") )
            {
            $Ifacet_par_pos_seg_tok = existsArgumentWithValue("Ifacet", "_par_pos_seg_tok");
            $Ifacet_par_seg_tok = existsArgumentWithValue("Ifacet", "_par_seg_tok");
            $Ifacet_pos_seg_tok = existsArgumentWithValue("Ifacet", "_pos_seg_tok");
            $Ifacet_seg_tok = existsArgumentWithValue("Ifacet", "_seg_tok");
            $Ifacetpos = existsArgumentWithValue("Ifacet", "pos");
            $Ifacettok = existsArgumentWithValue("Ifacet", "tok");
            $echos = $echos . "Ifacet_par_pos_seg_tok=$Ifacet_par_pos_seg_tok " . "Ifacet_par_seg_tok=$Ifacet_par_seg_tok " . "Ifacet_pos_seg_tok=$Ifacet_pos_seg_tok " . "Ifacet_seg_tok=$Ifacet_seg_tok " . "Ifacetpos=$Ifacetpos " . "Ifacettok=$Ifacettok ";
            $input = $input . ($Ifacet_par_pos_seg_tok ? " \$Ifacet_par_pos_seg_tok" : "")  . ($Ifacet_par_seg_tok ? " \$Ifacet_par_seg_tok" : "")  . ($Ifacet_pos_seg_tok ? " \$Ifacet_pos_seg_tok" : "")  . ($Ifacet_seg_tok ? " \$Ifacet_seg_tok" : "")  . ($Ifacetpos ? " \$Ifacetpos" : "")  . ($Ifacettok ? " \$Ifacettok" : "") ;
            }
        if( hasArgument("Iformat") )
            {
            $Iformatflat = existsArgumentWithValue("Iformat", "flat");
            $Iformattxtann = existsArgumentWithValue("Iformat", "txtann");
            $echos = $echos . "Iformatflat=$Iformatflat " . "Iformattxtann=$Iformattxtann ";
            $input = $input . ($Iformatflat ? " \$Iformatflat" : "")  . ($Iformattxtann ? " \$Iformattxtann" : "") ;
            }
        if( hasArgument("Ilang") )
            {
            $Ilangaf = existsArgumentWithValue("Ilang", "af");
            $Ilangast = existsArgumentWithValue("Ilang", "ast");
            $Ilangbe = existsArgumentWithValue("Ilang", "be");
            $Ilangbg = existsArgumentWithValue("Ilang", "bg");
            $Ilangca = existsArgumentWithValue("Ilang", "ca");
            $Ilangcs = existsArgumentWithValue("Ilang", "cs");
            $Ilangcy = existsArgumentWithValue("Ilang", "cy");
            $Ilangda = existsArgumentWithValue("Ilang", "da");
            $Ilangde = existsArgumentWithValue("Ilang", "de");
            $Ilangel = existsArgumentWithValue("Ilang", "el");
            $Ilangen = existsArgumentWithValue("Ilang", "en");
            $Ilanges = existsArgumentWithValue("Ilang", "es");
            $Ilanget = existsArgumentWithValue("Ilang", "et");
            $Ilangfa = existsArgumentWithValue("Ilang", "fa");
            $Ilangfo = existsArgumentWithValue("Ilang", "fo");
            $Ilangfr = existsArgumentWithValue("Ilang", "fr");
            $Ilangga = existsArgumentWithValue("Ilang", "ga");
            $Ilanggd = existsArgumentWithValue("Ilang", "gd");
            $Ilanggl = existsArgumentWithValue("Ilang", "gl");
            $Ilanggml = existsArgumentWithValue("Ilang", "gml");
            $Ilanggv = existsArgumentWithValue("Ilang", "gv");
            $Ilanghr = existsArgumentWithValue("Ilang", "hr");
            $Ilanghu = existsArgumentWithValue("Ilang", "hu");
            $Ilangis = existsArgumentWithValue("Ilang", "is");
            $Ilangit = existsArgumentWithValue("Ilang", "it");
            $Ilangka = existsArgumentWithValue("Ilang", "ka");
            $Ilangla = existsArgumentWithValue("Ilang", "la");
            $Ilangmk = existsArgumentWithValue("Ilang", "mk");
            $Ilangnl = existsArgumentWithValue("Ilang", "nl");
            $Ilangno = existsArgumentWithValue("Ilang", "no");
            $Ilangpl = existsArgumentWithValue("Ilang", "pl");
            $Ilangpt = existsArgumentWithValue("Ilang", "pt");
            $Ilangro = existsArgumentWithValue("Ilang", "ro");
            $Ilangru = existsArgumentWithValue("Ilang", "ru");
            $Ilangsk = existsArgumentWithValue("Ilang", "sk");
            $Ilangsl = existsArgumentWithValue("Ilang", "sl");
            $Ilangsq = existsArgumentWithValue("Ilang", "sq");
            $Ilangsr = existsArgumentWithValue("Ilang", "sr");
            $Ilangsv = existsArgumentWithValue("Ilang", "sv");
            $Ilanguk = existsArgumentWithValue("Ilang", "uk");
            $echos = $echos . "Ilangaf=$Ilangaf " . "Ilangast=$Ilangast " . "Ilangbe=$Ilangbe " . "Ilangbg=$Ilangbg " . "Ilangca=$Ilangca " . "Ilangcs=$Ilangcs " . "Ilangcy=$Ilangcy " . "Ilangda=$Ilangda " . "Ilangde=$Ilangde " . "Ilangel=$Ilangel " . "Ilangen=$Ilangen " . "Ilanges=$Ilanges " . "Ilanget=$Ilanget " . "Ilangfa=$Ilangfa " . "Ilangfo=$Ilangfo " . "Ilangfr=$Ilangfr " . "Ilangga=$Ilangga " . "Ilanggd=$Ilanggd " . "Ilanggl=$Ilanggl " . "Ilanggml=$Ilanggml " . "Ilanggv=$Ilanggv " . "Ilanghr=$Ilanghr " . "Ilanghu=$Ilanghu " . "Ilangis=$Ilangis " . "Ilangit=$Ilangit " . "Ilangka=$Ilangka " . "Ilangla=$Ilangla " . "Ilangmk=$Ilangmk " . "Ilangnl=$Ilangnl " . "Ilangno=$Ilangno " . "Ilangpl=$Ilangpl " . "Ilangpt=$Ilangpt " . "Ilangro=$Ilangro " . "Ilangru=$Ilangru " . "Ilangsk=$Ilangsk " . "Ilangsl=$Ilangsl " . "Ilangsq=$Ilangsq " . "Ilangsr=$Ilangsr " . "Ilangsv=$Ilangsv " . "Ilanguk=$Ilanguk ";
            $input = $input . ($Ilangaf ? " \$Ilangaf" : "")  . ($Ilangast ? " \$Ilangast" : "")  . ($Ilangbe ? " \$Ilangbe" : "")  . ($Ilangbg ? " \$Ilangbg" : "")  . ($Ilangca ? " \$Ilangca" : "")  . ($Ilangcs ? " \$Ilangcs" : "")  . ($Ilangcy ? " \$Ilangcy" : "")  . ($Ilangda ? " \$Ilangda" : "")  . ($Ilangde ? " \$Ilangde" : "")  . ($Ilangel ? " \$Ilangel" : "")  . ($Ilangen ? " \$Ilangen" : "")  . ($Ilanges ? " \$Ilanges" : "")  . ($Ilanget ? " \$Ilanget" : "")  . ($Ilangfa ? " \$Ilangfa" : "")  . ($Ilangfo ? " \$Ilangfo" : "")  . ($Ilangfr ? " \$Ilangfr" : "")  . ($Ilangga ? " \$Ilangga" : "")  . ($Ilanggd ? " \$Ilanggd" : "")  . ($Ilanggl ? " \$Ilanggl" : "")  . ($Ilanggml ? " \$Ilanggml" : "")  . ($Ilanggv ? " \$Ilanggv" : "")  . ($Ilanghr ? " \$Ilanghr" : "")  . ($Ilanghu ? " \$Ilanghu" : "")  . ($Ilangis ? " \$Ilangis" : "")  . ($Ilangit ? " \$Ilangit" : "")  . ($Ilangka ? " \$Ilangka" : "")  . ($Ilangla ? " \$Ilangla" : "")  . ($Ilangmk ? " \$Ilangmk" : "")  . ($Ilangnl ? " \$Ilangnl" : "")  . ($Ilangno ? " \$Ilangno" : "")  . ($Ilangpl ? " \$Ilangpl" : "")  . ($Ilangpt ? " \$Ilangpt" : "")  . ($Ilangro ? " \$Ilangro" : "")  . ($Ilangru ? " \$Ilangru" : "")  . ($Ilangsk ? " \$Ilangsk" : "")  . ($Ilangsl ? " \$Ilangsl" : "")  . ($Ilangsq ? " \$Ilangsq" : "")  . ($Ilangsr ? " \$Ilangsr" : "")  . ($Ilangsv ? " \$Ilangsv" : "")  . ($Ilanguk ? " \$Ilanguk" : "") ;
            }
        if( hasArgument("Iperiod") )
            {
            $Iperiodc13 = existsArgumentWithValue("Iperiod", "c13");
            $Iperiodc20 = existsArgumentWithValue("Iperiod", "c20");
            $Iperiodc21 = existsArgumentWithValue("Iperiod", "c21");
            $echos = $echos . "Iperiodc13=$Iperiodc13 " . "Iperiodc20=$Iperiodc20 " . "Iperiodc21=$Iperiodc21 ";
            $input = $input . ($Iperiodc13 ? " \$Iperiodc13" : "")  . ($Iperiodc20 ? " \$Iperiodc20" : "")  . ($Iperiodc21 ? " \$Iperiodc21" : "") ;
            }
        if( hasArgument("Ipres") )
            {
            $Ipresnml = existsArgumentWithValue("Ipres", "nml");
            $echos = $echos . "Ipresnml=$Ipresnml ";
            $input = $input . ($Ipresnml ? " \$Ipresnml" : "") ;
            }
        if( hasArgument("Oambig") )
            {
            $Oambigamb = existsArgumentWithValue("Oambig", "amb");
            $Oambiguna = existsArgumentWithValue("Oambig", "una");
            $echos = $echos . "Oambigamb=$Oambigamb " . "Oambiguna=$Oambiguna ";
            $output = $output . ($Oambigamb ? " \$Oambigamb" : "")  . ($Oambiguna ? " \$Oambiguna" : "") ;
            }
        if( hasArgument("Oapp") )
            {
            $Oappnrm = existsArgumentWithValue("Oapp", "nrm");
            $Oappunn = existsArgumentWithValue("Oapp", "unn");
            $echos = $echos . "Oappnrm=$Oappnrm " . "Oappunn=$Oappunn ";
            $output = $output . ($Oappnrm ? " \$Oappnrm" : "")  . ($Oappunn ? " \$Oappunn" : "") ;
            }
        if( hasArgument("Ofacet") )
            {
            $Ofacetlem = existsArgumentWithValue("Ofacet", "lem");
            $Ofacetpar = existsArgumentWithValue("Ofacet", "par");
            $Ofacetpos = existsArgumentWithValue("Ofacet", "pos");
            $Ofacetseg = existsArgumentWithValue("Ofacet", "seg");
            $Ofacettok = existsArgumentWithValue("Ofacet", "tok");
            $echos = $echos . "Ofacetlem=$Ofacetlem " . "Ofacetpar=$Ofacetpar " . "Ofacetpos=$Ofacetpos " . "Ofacetseg=$Ofacetseg " . "Ofacettok=$Ofacettok ";
            $output = $output . ($Ofacetlem ? " \$Ofacetlem" : "")  . ($Ofacetpar ? " \$Ofacetpar" : "")  . ($Ofacetpos ? " \$Ofacetpos" : "")  . ($Ofacetseg ? " \$Ofacetseg" : "")  . ($Ofacettok ? " \$Ofacettok" : "") ;
            }
        if( hasArgument("Oformat") )
            {
            $Oformatcols = existsArgumentWithValue("Oformat", "cols");
            $Oformatflat = existsArgumentWithValue("Oformat", "flat");
            $Oformattxtann = existsArgumentWithValue("Oformat", "txtann");
            $echos = $echos . "Oformatcols=$Oformatcols " . "Oformatflat=$Oformatflat " . "Oformattxtann=$Oformattxtann ";
            $output = $output . ($Oformatcols ? " \$Oformatcols" : "")  . ($Oformatflat ? " \$Oformatflat" : "")  . ($Oformattxtann ? " \$Oformattxtann" : "") ;
            }
        if( hasArgument("Olang") )
            {
            $Olangaf = existsArgumentWithValue("Olang", "af");
            $Olangast = existsArgumentWithValue("Olang", "ast");
            $Olangbe = existsArgumentWithValue("Olang", "be");
            $Olangbg = existsArgumentWithValue("Olang", "bg");
            $Olangca = existsArgumentWithValue("Olang", "ca");
            $Olangcs = existsArgumentWithValue("Olang", "cs");
            $Olangcy = existsArgumentWithValue("Olang", "cy");
            $Olangda = existsArgumentWithValue("Olang", "da");
            $Olangde = existsArgumentWithValue("Olang", "de");
            $Olangel = existsArgumentWithValue("Olang", "el");
            $Olangen = existsArgumentWithValue("Olang", "en");
            $Olanges = existsArgumentWithValue("Olang", "es");
            $Olanget = existsArgumentWithValue("Olang", "et");
            $Olangfa = existsArgumentWithValue("Olang", "fa");
            $Olangfo = existsArgumentWithValue("Olang", "fo");
            $Olangfr = existsArgumentWithValue("Olang", "fr");
            $Olangga = existsArgumentWithValue("Olang", "ga");
            $Olanggd = existsArgumentWithValue("Olang", "gd");
            $Olanggl = existsArgumentWithValue("Olang", "gl");
            $Olanggml = existsArgumentWithValue("Olang", "gml");
            $Olanggv = existsArgumentWithValue("Olang", "gv");
            $Olanghr = existsArgumentWithValue("Olang", "hr");
            $Olanghu = existsArgumentWithValue("Olang", "hu");
            $Olangis = existsArgumentWithValue("Olang", "is");
            $Olangit = existsArgumentWithValue("Olang", "it");
            $Olangka = existsArgumentWithValue("Olang", "ka");
            $Olangla = existsArgumentWithValue("Olang", "la");
            $Olangmk = existsArgumentWithValue("Olang", "mk");
            $Olangnl = existsArgumentWithValue("Olang", "nl");
            $Olangno = existsArgumentWithValue("Olang", "no");
            $Olangpl = existsArgumentWithValue("Olang", "pl");
            $Olangpt = existsArgumentWithValue("Olang", "pt");
            $Olangro = existsArgumentWithValue("Olang", "ro");
            $Olangru = existsArgumentWithValue("Olang", "ru");
            $Olangsk = existsArgumentWithValue("Olang", "sk");
            $Olangsl = existsArgumentWithValue("Olang", "sl");
            $Olangsq = existsArgumentWithValue("Olang", "sq");
            $Olangsr = existsArgumentWithValue("Olang", "sr");
            $Olangsv = existsArgumentWithValue("Olang", "sv");
            $Olanguk = existsArgumentWithValue("Olang", "uk");
            $echos = $echos . "Olangaf=$Olangaf " . "Olangast=$Olangast " . "Olangbe=$Olangbe " . "Olangbg=$Olangbg " . "Olangca=$Olangca " . "Olangcs=$Olangcs " . "Olangcy=$Olangcy " . "Olangda=$Olangda " . "Olangde=$Olangde " . "Olangel=$Olangel " . "Olangen=$Olangen " . "Olanges=$Olanges " . "Olanget=$Olanget " . "Olangfa=$Olangfa " . "Olangfo=$Olangfo " . "Olangfr=$Olangfr " . "Olangga=$Olangga " . "Olanggd=$Olanggd " . "Olanggl=$Olanggl " . "Olanggml=$Olanggml " . "Olanggv=$Olanggv " . "Olanghr=$Olanghr " . "Olanghu=$Olanghu " . "Olangis=$Olangis " . "Olangit=$Olangit " . "Olangka=$Olangka " . "Olangla=$Olangla " . "Olangmk=$Olangmk " . "Olangnl=$Olangnl " . "Olangno=$Olangno " . "Olangpl=$Olangpl " . "Olangpt=$Olangpt " . "Olangro=$Olangro " . "Olangru=$Olangru " . "Olangsk=$Olangsk " . "Olangsl=$Olangsl " . "Olangsq=$Olangsq " . "Olangsr=$Olangsr " . "Olangsv=$Olangsv " . "Olanguk=$Olanguk ";
            $output = $output . ($Olangaf ? " \$Olangaf" : "")  . ($Olangast ? " \$Olangast" : "")  . ($Olangbe ? " \$Olangbe" : "")  . ($Olangbg ? " \$Olangbg" : "")  . ($Olangca ? " \$Olangca" : "")  . ($Olangcs ? " \$Olangcs" : "")  . ($Olangcy ? " \$Olangcy" : "")  . ($Olangda ? " \$Olangda" : "")  . ($Olangde ? " \$Olangde" : "")  . ($Olangel ? " \$Olangel" : "")  . ($Olangen ? " \$Olangen" : "")  . ($Olanges ? " \$Olanges" : "")  . ($Olanget ? " \$Olanget" : "")  . ($Olangfa ? " \$Olangfa" : "")  . ($Olangfo ? " \$Olangfo" : "")  . ($Olangfr ? " \$Olangfr" : "")  . ($Olangga ? " \$Olangga" : "")  . ($Olanggd ? " \$Olanggd" : "")  . ($Olanggl ? " \$Olanggl" : "")  . ($Olanggml ? " \$Olanggml" : "")  . ($Olanggv ? " \$Olanggv" : "")  . ($Olanghr ? " \$Olanghr" : "")  . ($Olanghu ? " \$Olanghu" : "")  . ($Olangis ? " \$Olangis" : "")  . ($Olangit ? " \$Olangit" : "")  . ($Olangka ? " \$Olangka" : "")  . ($Olangla ? " \$Olangla" : "")  . ($Olangmk ? " \$Olangmk" : "")  . ($Olangnl ? " \$Olangnl" : "")  . ($Olangno ? " \$Olangno" : "")  . ($Olangpl ? " \$Olangpl" : "")  . ($Olangpt ? " \$Olangpt" : "")  . ($Olangro ? " \$Olangro" : "")  . ($Olangru ? " \$Olangru" : "")  . ($Olangsk ? " \$Olangsk" : "")  . ($Olangsl ? " \$Olangsl" : "")  . ($Olangsq ? " \$Olangsq" : "")  . ($Olangsr ? " \$Olangsr" : "")  . ($Olangsv ? " \$Olangsv" : "")  . ($Olanguk ? " \$Olanguk" : "") ;
            }
        if( hasArgument("Operiod") )
            {
            $Operiodc13 = existsArgumentWithValue("Operiod", "c13");
            $Operiodc20 = existsArgumentWithValue("Operiod", "c20");
            $Operiodc21 = existsArgumentWithValue("Operiod", "c21");
            $echos = $echos . "Operiodc13=$Operiodc13 " . "Operiodc20=$Operiodc20 " . "Operiodc21=$Operiodc21 ";
            $output = $output . ($Operiodc13 ? " \$Operiodc13" : "")  . ($Operiodc20 ? " \$Operiodc20" : "")  . ($Operiodc21 ? " \$Operiodc21" : "") ;
            }
        if( hasArgument("Opres") )
            {
            $Opresalf = existsArgumentWithValue("Opres", "alf");
            $Opresfrq = existsArgumentWithValue("Opres", "frq");
            $Opresnml = existsArgumentWithValue("Opres", "nml");
            $Opresuaf = existsArgumentWithValue("Opres", "uaf");
            $Opresufq = existsArgumentWithValue("Opres", "ufq");
            $echos = $echos . "Opresalf=$Opresalf " . "Opresfrq=$Opresfrq " . "Opresnml=$Opresnml " . "Opresuaf=$Opresuaf " . "Opresufq=$Opresufq ";
            $output = $output . ($Opresalf ? " \$Opresalf" : "")  . ($Opresfrq ? " \$Opresfrq" : "")  . ($Opresnml ? " \$Opresnml" : "")  . ($Opresuaf ? " \$Opresuaf" : "")  . ($Opresufq ? " \$Opresufq" : "") ;
            }

/*******************************
* input/output features styles *
*******************************/
        if( hasArgument("Ifacet_par_pos_seg_tok") )
            {
            $Ifacet_par_pos_seg_tok__pos_DSL = existsArgumentWithValue("Ifacet_par_pos_seg_tok", "__pos_DSL");
            $Ifacet_par_pos_seg_tok__pos_HiNTS = existsArgumentWithValue("Ifacet_par_pos_seg_tok", "__pos_HiNTS");
            $Ifacet_par_pos_seg_tok__pos_PT = existsArgumentWithValue("Ifacet_par_pos_seg_tok", "__pos_PT");
            $Ifacet_par_pos_seg_tok__pos_Par = existsArgumentWithValue("Ifacet_par_pos_seg_tok", "__pos_Par");
            $Ifacet_par_pos_seg_tok__pos_Uni = existsArgumentWithValue("Ifacet_par_pos_seg_tok", "__pos_Uni");
            $echos = $echos . "Ifacet_par_pos_seg_tok__pos_DSL=$Ifacet_par_pos_seg_tok__pos_DSL " . "Ifacet_par_pos_seg_tok__pos_HiNTS=$Ifacet_par_pos_seg_tok__pos_HiNTS " . "Ifacet_par_pos_seg_tok__pos_PT=$Ifacet_par_pos_seg_tok__pos_PT " . "Ifacet_par_pos_seg_tok__pos_Par=$Ifacet_par_pos_seg_tok__pos_Par " . "Ifacet_par_pos_seg_tok__pos_Uni=$Ifacet_par_pos_seg_tok__pos_Uni ";
            $input = $input . ($Ifacet_par_pos_seg_tok__pos_DSL ? " \$Ifacet_par_pos_seg_tok__pos_DSL" : "")  . ($Ifacet_par_pos_seg_tok__pos_HiNTS ? " \$Ifacet_par_pos_seg_tok__pos_HiNTS" : "")  . ($Ifacet_par_pos_seg_tok__pos_PT ? " \$Ifacet_par_pos_seg_tok__pos_PT" : "")  . ($Ifacet_par_pos_seg_tok__pos_Par ? " \$Ifacet_par_pos_seg_tok__pos_Par" : "")  . ($Ifacet_par_pos_seg_tok__pos_Uni ? " \$Ifacet_par_pos_seg_tok__pos_Uni" : "") ;
            }
        if( hasArgument("Ifacet_pos_seg_tok") )
            {
            $Ifacet_pos_seg_tok__pos_DSL = existsArgumentWithValue("Ifacet_pos_seg_tok", "__pos_DSL");
            $Ifacet_pos_seg_tok__pos_HiNTS = existsArgumentWithValue("Ifacet_pos_seg_tok", "__pos_HiNTS");
            $Ifacet_pos_seg_tok__pos_PT = existsArgumentWithValue("Ifacet_pos_seg_tok", "__pos_PT");
            $Ifacet_pos_seg_tok__pos_Par = existsArgumentWithValue("Ifacet_pos_seg_tok", "__pos_Par");
            $Ifacet_pos_seg_tok__pos_Uni = existsArgumentWithValue("Ifacet_pos_seg_tok", "__pos_Uni");
            $echos = $echos . "Ifacet_pos_seg_tok__pos_DSL=$Ifacet_pos_seg_tok__pos_DSL " . "Ifacet_pos_seg_tok__pos_HiNTS=$Ifacet_pos_seg_tok__pos_HiNTS " . "Ifacet_pos_seg_tok__pos_PT=$Ifacet_pos_seg_tok__pos_PT " . "Ifacet_pos_seg_tok__pos_Par=$Ifacet_pos_seg_tok__pos_Par " . "Ifacet_pos_seg_tok__pos_Uni=$Ifacet_pos_seg_tok__pos_Uni ";
            $input = $input . ($Ifacet_pos_seg_tok__pos_DSL ? " \$Ifacet_pos_seg_tok__pos_DSL" : "")  . ($Ifacet_pos_seg_tok__pos_HiNTS ? " \$Ifacet_pos_seg_tok__pos_HiNTS" : "")  . ($Ifacet_pos_seg_tok__pos_PT ? " \$Ifacet_pos_seg_tok__pos_PT" : "")  . ($Ifacet_pos_seg_tok__pos_Par ? " \$Ifacet_pos_seg_tok__pos_Par" : "")  . ($Ifacet_pos_seg_tok__pos_Uni ? " \$Ifacet_pos_seg_tok__pos_Uni" : "") ;
            }
        if( hasArgument("Ifacetpos") )
            {
            $IfacetposDSL = existsArgumentWithValue("Ifacetpos", "DSL");
            $IfacetposHiNTS = existsArgumentWithValue("Ifacetpos", "HiNTS");
            $IfacetposPT = existsArgumentWithValue("Ifacetpos", "PT");
            $IfacetposPar = existsArgumentWithValue("Ifacetpos", "Par");
            $IfacetposUni = existsArgumentWithValue("Ifacetpos", "Uni");
            $echos = $echos . "IfacetposDSL=$IfacetposDSL " . "IfacetposHiNTS=$IfacetposHiNTS " . "IfacetposPT=$IfacetposPT " . "IfacetposPar=$IfacetposPar " . "IfacetposUni=$IfacetposUni ";
            $input = $input . ($IfacetposDSL ? " \$IfacetposDSL" : "")  . ($IfacetposHiNTS ? " \$IfacetposHiNTS" : "")  . ($IfacetposPT ? " \$IfacetposPT" : "")  . ($IfacetposPar ? " \$IfacetposPar" : "")  . ($IfacetposUni ? " \$IfacetposUni" : "") ;
            }
        if( hasArgument("Ofacetpos") )
            {
            $OfacetposDSL = existsArgumentWithValue("Ofacetpos", "DSL");
            $OfacetposHiNTS = existsArgumentWithValue("Ofacetpos", "HiNTS");
            $OfacetposPT = existsArgumentWithValue("Ofacetpos", "PT");
            $OfacetposPar = existsArgumentWithValue("Ofacetpos", "Par");
            $OfacetposUni = existsArgumentWithValue("Ofacetpos", "Uni");
            $echos = $echos . "OfacetposDSL=$OfacetposDSL " . "OfacetposHiNTS=$OfacetposHiNTS " . "OfacetposPT=$OfacetposPT " . "OfacetposPar=$OfacetposPar " . "OfacetposUni=$OfacetposUni ";
            $output = $output . ($OfacetposDSL ? " \$OfacetposDSL" : "")  . ($OfacetposHiNTS ? " \$OfacetposHiNTS" : "")  . ($OfacetposPT ? " \$OfacetposPT" : "")  . ($OfacetposPar ? " \$OfacetposPar" : "")  . ($OfacetposUni ? " \$OfacetposUni" : "") ;
            }

        /* DUMMY CODE TO SANITY CHECK GENERATED SCRIPT (TODO Remove one of the two solidi from the beginning of this line to activate your own code)
        $CSTLemfile = tempFileName("CSTLem-results");
        $command = "echo $echos >> $CSTLemfile";
        logit($command);

        if(($cmd = popen($command, "r")) == NULL)
            {
            throw new SystemExit(); // instead of exit()
            }

        while($read = fgets($cmd))
            {
            }

        pclose($cmd);
        /*/
        // YOUR CODE STARTS HERE.
        //        TODO your code!
        $OOV = false;

        if($Opresuaf)
            {
            $Opresalf = true;
            $OOV = true;
            }
        else if($Opresufq)
            {
            $Opresfrq = true;
            $OOV = true;
            }
        
        if($mode === 'dry')
            {
            $CSTLemfile = tempFileName("CSTLem-results");
            scripinit($inputF,$input,$output);
            }
        $toolbin = '../bin';
        $currdir = getcwd();
        $toolres = '../texton-linguistic-resources';

        if(hasArgument("Ilang"))
            {
            $language = getArgument("Ilang");
            }
        else if(hasArgument("Olang"))
            {
            $language = getArgument("Olang");
            }
        else
            $language = "";

        if(hasArgument("Oformat"))
            {
            $Oformat = getArgument("Oformat");
            }
        else
            $Oformat = "flat";

        if(   $language === ""
          || (  $language !== "af"
             && $language !== "ast"
             && $language !== "be"
             && $language !== "bg"
             && $language !== "ca"
             && $language !== "cs"
             && $language !== "cy"
             && $language !== "da"
             && $language !== "de"

             && $language !== "el"
             && $language !== "en"
             && $language !== "es"
             && $language !== "et"
             && $language !== "fa"

             && $language !== "fo"
             && $language !== "fr"
             && $language !== "ga"
             && $language !== "gd"
             && $language !== "gl"
             && $language !== "gml"
             && $language !== "gv"
             && $language !== "hu"
             && $language !== "is"
             && $language !== "it"

             && $language !== "ka"
             && $language !== "mk"
             && $language !== "la"
             && $language !== "nl"
             && $language !== "no"
             && $language !== "pl"

             && $language !== "pt"
             && $language !== "ro"
             && $language !== "ru"
             && $language !== "sk"
             && $language !== "sl"

             && $language !== "sr"
             && $language !== "sq"
             && $language !== "sv"
             && $language !== "uk"
             )
          )
            $language = "da";

        $ancestor = "spanGrp";
        $element = "span";
        $annotation = "lemma";
        $idprefix = "L";

        logit   ( " currdir=" . $currdir
                . " toolres=" . $toolres
                . " toolbin=" . $toolbin
                . " language=" . $language
                . " ancestor=" . $ancestor
                . " element=" . $element
                . " annotation=" . $annotation
                . " idprefix=" . $idprefix
                );

        //chdir($toolres);


        //logit("doit($language,$ancestor,$element,$annotation,$idprefix)");
        $filename = '';

        if($mode === 'dry')
            {
            $uploadfile = "\$F";
            if($F === "")
                $uploadfile = "\$IfacettokF";
            }
        else
            {
            $uploadfile = $F;
            if($uploadfile === "")
                $uploadfile = $IfacettokF;
            }
        if($uploadfile === '')
            {
            header("HTTP/1.0 404 Input tokens not found (F or IfacettokF parameter). ");
            return;
            }
        //copy($uploadfile,"uploadfile");
        logit("uploadfile = $uploadfile");

        if($Ifacetpos || $Ifacet_pos_seg_tok)
            { // lemmatise with pos input
            logit("Input has tags");
            $ShowTag = $Ofacetpos;
            logit("ShowTag=$ShowTag");
            if($Iformattxtann)
                {
                if($mode === 'dry')
                    {
                    $uploadfileAnnotation = '$IfacetposF';
                    merge($toolbin,$uploadfile,$uploadfileAnnotation,'pos','lemma');
                    lemmatiser($Oformat,$Ofacetlem,$Ofacetpos,$Ofacetseg,$Ofacettok,$ShowTag, $Ipresnml, $Opresalf ,$Opresfrq,$OOV,$Opresnml, $Oambiguna, $Iappnrm,$element,$ancestor,$toolres,$toolbin,$language,'','tags',"\$lemmainputfile",'j','pos','lemma','j',$Iperiodc13,$Iperiodc20);
                    }
                else
                    {
                    $uploadfileAnnotation = $IfacetposF;
                    $lemmainputfile = merge($toolbin,$uploadfile,$uploadfileAnnotation,'pos','lemma');
                    logit("lemmatise with pos in stand off annotation.");
                    $CSTLemfile = lemmatiser($Oformat,$Ofacetlem,$Ofacetpos,$Ofacetseg,$Ofacettok,$ShowTag, $Ipresnml, $Opresalf ,$Opresfrq,$OOV,$Opresnml, $Oambiguna, $Iappnrm,$element,$ancestor,$toolres,$toolbin,$language,'','tags',$lemmainputfile,'j','pos','lemma','j',$Iperiodc13,$Iperiodc20);
                    }
                }
            else
                {
                if($Iformatflat)
                    {
                    logit('lemmatise flat text that has pos tags embedded');
                    if($mode === 'dry')
                        lemmatiser($Oformat,$Ofacetlem,$Ofacetpos,$Ofacetseg,$Ofacettok,$ShowTag, $Ipresnml, $Opresalf ,$Opresfrq,$OOV,$Opresnml, $Oambiguna, $Iappnrm,$element,$ancestor,$toolres,$toolbin,$language,'','tags',$uploadfile,'j','','','n',$Iperiodc13,$Iperiodc20);
                    else
                        $CSTLemfile = lemmatiser($Oformat,$Ofacetlem,$Ofacetpos,$Ofacetseg,$Ofacettok,$ShowTag, $Ipresnml, $Opresalf ,$Opresfrq,$OOV,$Opresnml, $Oambiguna, $Iappnrm,$element,$ancestor,$toolres,$toolbin,$language,'','tags',$uploadfile,'j','','','n',$Iperiodc13,$Iperiodc20);
                    }
                else
                    {
                    logit('lemmatise TEI-P5 (not an annotation file)');
                    if($mode === 'dry')
                        lemmatiser($Oformat,$Ofacetlem,$Ofacetpos,$Ofacetseg,$Ofacettok,$ShowTag, $Ipresnml, $Opresalf ,$Opresfrq,$OOV,$Opresnml, $Oambiguna, $Iappnrm,$element,$ancestor,$toolres,$toolbin,$language,'','tags',$uploadfile,'j','','','j',$Iperiodc13,$Iperiodc20);
                    else
                        $CSTLemfile = lemmatiser($Oformat,$Ofacetlem,$Ofacetpos,$Ofacetseg,$Ofacettok,$ShowTag, $Ipresnml, $Opresalf ,$Opresfrq,$OOV,$Opresnml, $Oambiguna, $Iappnrm,$element,$ancestor,$toolres,$toolbin,$language,'','tags',$uploadfile,'j','','','j',$Iperiodc13,$Iperiodc20);
                    }
                }
            }
        else
            {
            logit("No tags in input");
            $ShowTag = false;
            if($Iformattxtann)
                {
                logit('add lemma attribute');
                if($mode === 'dry')
                    {
                    add($toolbin,$uploadfile,'lemma',$element,$idprefix,$ancestor);
                    lemmatiser($Oformat,$Ofacetlem,$Ofacetpos,$Ofacetseg,$Ofacettok,$ShowTag, $Ipresnml, $Opresalf ,$Opresfrq,$OOV,$Opresnml, $Oambiguna, $Iappnrm,$element,$ancestor,$toolres,$toolbin,$language,'-','notags',"\$lemmainputfile",'n','','lemma','j',$Iperiodc13,$Iperiodc20);
                    }
                else
                    {
                    $lemmainputfile = add($toolbin,$uploadfile,'lemma',$element,$idprefix,$ancestor);
                    logit('lemmatise without pos, stand off tokens');
                    $CSTLemfile = lemmatiser($Oformat,$Ofacetlem,$Ofacetpos,$Ofacetseg,$Ofacettok,$ShowTag, $Ipresnml, $Opresalf ,$Opresfrq,$OOV,$Opresnml, $Oambiguna, $Iappnrm,$element,$ancestor,$toolres,$toolbin,$language,'-','notags',$lemmainputfile,'n','','lemma','j',$Iperiodc13,$Iperiodc20);
                    }
                }
            else
                {
                if($Iformatflat)
                    {
                    logit('lemmatise flat text');
                    if($mode === 'dry')
                        lemmatiser($Oformat,$Ofacetlem,$Ofacetpos,$Ofacetseg,$Ofacettok,$ShowTag, $Ipresnml, $Opresalf ,$Opresfrq,$OOV,$Opresnml, $Oambiguna, $Iappnrm,$element,$ancestor,$toolres,$toolbin,$language,'-','notags',$uploadfile,'n','','','n',$Iperiodc13,$Iperiodc20);
                    else
                        $CSTLemfile = lemmatiser($Oformat,$Ofacetlem,$Ofacetpos,$Ofacetseg,$Ofacettok,$ShowTag, $Ipresnml, $Opresalf ,$Opresfrq,$OOV,$Opresnml, $Oambiguna, $Iappnrm,$element,$ancestor,$toolres,$toolbin,$language,'-','notags',$uploadfile,'n','','','n',$Iperiodc13,$Iperiodc20);
                    }
                else
                    {
                    logit('lemmatise TEI-P5 (not an annotation file)');
                    if($mode === 'dry')
                        lemmatiser($Oformat,$Ofacetlem,$Ofacetpos,$Ofacetseg,$Ofacettok,$ShowTag, $Ipresnml, $Opresalf ,$Opresfrq,$OOV,$Opresnml, $Oambiguna, $Iappnrm,$element,$ancestor,$toolres,$toolbin,$language,'-','notags',$uploadfile,'n','','','j',$Iperiodc13,$Iperiodc20);
                    else
                        $CSTLemfile = lemmatiser($Oformat,$Ofacetlem,$Ofacetpos,$Ofacetseg,$Ofacettok,$ShowTag, $Ipresnml, $Opresalf ,$Opresfrq,$OOV,$Opresnml, $Oambiguna, $Iappnrm,$element,$ancestor,$toolres,$toolbin,$language,'-','notags',$uploadfile,'n','','','j',$Iperiodc13,$Iperiodc20);
                    }
                }
            }

        logit("CSTLemfile $CSTLemfile");
        if($Oformat === "txtann")
            {
            if($mode === 'dry')
                splits($toolbin,"\$CSTLemfile",'lemma',$annotation,$idprefix,$ancestor,$element);
            else
                $CSTLemfile = splits($toolbin,$CSTLemfile,'lemma',$annotation,$idprefix,$ancestor,$element);
            }

        //chdir($currdir);
        // YOUR CODE ENDS HERE. OUTPUT EXPECTED IN $CSTLemfile
        //*/
        $tmpf = fopen($CSTLemfile,'r');

        if($tmpf)
            {
            //logit('output from CSTLem:');
            while($line = fgets($tmpf))
                {
                //logit($line);
                print $line;
                }
            fclose($tmpf);
            }

        if($dodelete)
            {
            foreach ($tobedeleted as $filename => $dot)
                {
                if($dot)
                    unlink($filename);
                }
            unset($tobedeleted);
            }
        }
    loginit();
    do_CSTLem();
    }
catch (SystemExit $e)
    {
    header('HTTP/1.0 404 An error occurred: ' . $ERROR);
    logit('An error occurred' . $ERROR);
    echo $ERROR;
    }
?>

