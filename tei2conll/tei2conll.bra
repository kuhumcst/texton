{tei2conll.bra

Create CoNLL-U formatted output from TEI P5 input containing POS, lemma and dependency annotations.}

X=
  ( doit
  =   input output
    .   !arg:(?input.?output)
      & nestML$(get$(!input.X ML TRM)):?xml
      & !xml:? (TEI.?,? (text.?,?text) ?) ?
      & 0:?sentno
      & new$hash:?tokids
      & ( content
        =   
          .   map
            $ ( ( 
                =   a e c
                  .     !arg:(~del:?e.?a,?c)
                      & (     !a
                            : ? ("xml:id"|id.?) ?
                          & str$(content$!c)
                        | content$!c
                        )
                    | !arg:(?.?)&
                    | !arg:~" "
                    | 
                )
              . !arg
              )
        )
      & ( getIDs
        =   id n e a c
          .   !arg:(?arg.?n)
            &   whl
              ' ( !arg:? (?e.?a,?c) ?arg
                & (   !e:(w|c)
                    &   !a
                      : ? ("xml:id"|id.?id) ?
                    & (tokids..insert)$(!id.1+!n:?n)
                  | getIDs$(!c.!n):?n
                  )
                )
            & !n
        )
      & ( doLine
        =   a c e C msd pos id lemma ana to nBI
          .     !arg:(?e.?a,?c)
              & (     !a
                    : (   ? (msd.?msd) ?
                        & (   @(!msd:? "UPosTag=" ?pos)
                            & (   @(!pos:?pos "|" ?msd)
                                & ( (!msd.":"):("_".?msd)
                                  | 
                                  )
                              | "_":?msd
                              )
                          | "_":?pos
                          )
                      |   ? (pos.?pos) ?
                        & "_":?msd
                      )
                    : ? ("xml:id".?id) ?
                    : ( ? (join.?join) ?
                      | ?&:?join
                      )
                  & str$(content$!c):?C
                  &   !a
                    : ( ? (lemma.?lemma) ?
                      | ?&!C:?lemma
                      )
                  & (tokids..find)$!id:(?.?id)
                  & !linkGrp:? (!id.?ana.?to) ?
                  &   !id
                      \t
                      !C
                      \t
                      !lemma
                      \t
                      !pos
                      "\t_\t"
                      !msd
                      \t
                      !to
                      \t
                      ( (@(!ana:"ud-syn:" ?ana)|)
                      & !ana
                      )
                      "\t_\tNER="
                      ( !Type:&O
                      |   !BI:?nBI
                        & I:?BI
                        & !nBI "-" !Type
                      )
                      ( join:
                      |   "|"
                          ( !join:right&SpaceAfter
                          | SpaceBefore
                          )
                          "=No"
                      )
                      \n
                |   !e:name
                  & !a:? (type.?type) ?
                  & DoLine$(!c.!type)
                | DoLine$(!c.!Type)
                )
            | 
        )
      & ( DoLine
        =   Type c BI
          .   !arg:(?c.?Type)
            & (!Type:|B:?BI)
            & map$(doLine.!c)
        )
      & ( write
        =   att s U V
          .   !arg:(?att.?s)
            & ( !att:? ("xml:id".?id) ?
              | 1+!sentno:?sentno:?id
              )
            & (tokids..insert)$(!id.0)
            & ( aggIDS
              =   
                .   map
                  $ ( ( 
                      =   id c
                        .       !arg
                              : ( w|pc
                                .     ?
                                      ("xml:id"|id.?id)
                                      ?
                                  , ?
                                )
                            & (tokids..insert)$(!id.1+!n:?n)
                          | !arg:(?.?,?c)&aggIDS$!c
                      )
                    . !arg
                    )
              )
            &   ( 
                = id n.0:?n&aggIDS$!arg
                )
              $ !s
            & !s:?U (linkGrp.?,?linkGrp) ?V
            & !U !V:?s
            &     map
                $ ( ( 
                    =   to from ana
                      .       !arg
                            : ( link
                              .     (ana.?ana)
                                    ( target
                                    . @( ?
                                       :   ?
                                           "#"
                                           ?to
                                           ( " "
                                           | \n
                                           | \r
                                           | \t
                                           )
                                           ?
                                           "#"
                                           ?from
                                       )
                                    )
                                , ?
                              )
                          & (tokids..find)$!to:(?.?to)
                          & (tokids..find)$!from:(?.?from)
                          & (!from.!ana.!to)
                        | 
                    )
                  . !linkGrp
                  )
              : ?linkGrp
            &   str
              $ ( "# sent_id = "
                  !id
                  \n
                  "# text ="
                  map$((=." " !arg).content$!s)
                  \n
                  DoLine$(!s.)
                  \n
                )
        )
      & ( makeCoNLL
        =   
          .   map
            $ ( ( 
                =   e att id
                  .     !arg:(?e.?att,?arg)
                      & (   !arg:? (linkGrp.?,?) ?
                          & write$(!att.!arg)
                        |   (   !att:? ("xml:id".?id) ?
                              & (   !e:u
                                  & "# newdoc id = " !id \n
                                |   !e:seg
                                  & "# newpar id = " !id \n
                                )
                            | 
                            )
                            makeCoNLL$!arg
                        )
                    | 
                )
              . !arg
              )
        )
      & put$(str$(makeCoNLL$!text),!output,NEW,BIN)
  )
  ( new
  =   
    .   ~
      |   ~
        &   (its.doit)
          $ ( ".\\BIG\\425-all\\ParlaMint-DK_20151_M78_2016-04-19-115.xml-425-step9.xml"
            . ".\\BIG\\step10-bracmat.conll"
            )
      |   ~
        &   (its.doit)
          $ ( ".\\BIG\\271-all\\JEB-058-74.xml-271-step9.xml"
            . ".\\BIG\\JEB-058-74.xml-271-step9-bracmat.conll"
            )
      |   ~
        &   (its.doit)
          $ ( "C:\\projects\\parlamint\\BIG\\457-all\\JEB-103ab-121.xml-457-step9.xml"
            . "C:\\projects\\parlamint\\JEB-103ab-121.xml-457-step9.conll"
            )
      | (its.doit)$(arg$.arg$)
  );

r=
  get'("tei2conll.bra",TXT)
& rmv$(str$(tei2conll ".bak"))
& ren$("tei2conll.bra".str$(tei2conll ".bak"))
&   put
  $ ( "{tei2conll.bra

Create CoNLL-U formatted output from TEI P5 input containing POS, lemma and dependency annotations.}

"
    , "tei2conll.bra"
    , NEW
    , BIN
    )
& lst'(X,"tei2conll.bra",APP)
& put'(\n,"tei2conll.bra",APP,BIN)
& lst'(r,"tei2conll.bra",APP)
& put$(str$("\nnew'" X ";\n"),"tei2conll.bra",APP,BIN)
& ;

new'X;
