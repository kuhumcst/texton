<?php
header('Content-type:text/plain; charset=UTF-8');
/*
 * This PHP script is generated by CLARIN-DK's tool registration form
 * (http://localhost/texton/register). It should, with no or few adaptations
 * work out of the box as a dummy for your web service. The output returned
 * to the Text Tonsorium (CLARIN-DK's workflow manager) is just a listing of
 * the HTTP parameters received by this web service from the Text Tonsorium,
 * and not the output proper. For that you have to add your code to this script
 * and deactivate the dummy functionality. (The comments near the end of this
 * script explain how that is done.)
 *
 * Places in this script that require your attention are marked 'TODO'.
 */
/*
ToolID         : pdfminer
PassWord       :
Version        : 2014.03.24
Title          : PDFMiner
Path in URL    : PDFMiner/	*** TODO make sure your web service listens on this path and that this script is readable for the webserver. ***
Publisher      : Yusuke Shinyama
ContentProvider: Yusuke Shinyama
Creator        : Yusuke Shinyama
InfoAbout      : http://www.unixuser.org/~euske/python/pdfminer/
Description    : Extracts information from PDF documents. Focuses entirely on getting and analyzing text data.
ExternalURI    : http://pdf2html.tabesugi.net:8080
XMLparms       :
PostData       :
Inactive       :
*/

/*******************
* helper functions *
*******************/
$toollog = '../log/pdfminer.log'; /* Used by the logit() function. TODO make sure the folder exists and is writable. Adapt if needed */

/*  TODO Set $dodelete to false if temporary files in /tmp should not be deleted before returning. */
$dodelete = true;
$tobedeleted = array();


function loginit()  /* Wipes the contents of the log file! TODO Change this behaviour if needed. */
    {
    return;
    global $toollog,$ftemp;
    $ftemp = fopen($toollog,'w');
    if($ftemp)
        {
        fwrite($ftemp,$toollog . "\n");
        fclose($ftemp);
        }
    }

function logit($str) /* TODO You can use this function to write strings to the log file. */
    {
    return;
    global $toollog,$ftemp;
    $ftemp = fopen($toollog,'a');
    if($ftemp)
        {
        fwrite($ftemp,$str . "\n");
        fclose($ftemp);
        }
    }

function scripinit($inputF,$input,$output)  /* Initialises outputfile. */
    {
    global $fscrip, $pdfminerfile;
    $fscrip = fopen($pdfminerfile,'w');
    if($fscrip)
        {
        fwrite($fscrip,"/*\n");
        fwrite($fscrip," * ToolID           : pdfminer\n");
        fwrite($fscrip," * Version          : 2014.03.24\n");
        fwrite($fscrip," * Title            : PDFMiner\n");
        fwrite($fscrip," * ServiceURL       : http://localhost/PDFMiner/\n");
        fwrite($fscrip," * Publisher        : Yusuke Shinyama\n");
        fwrite($fscrip," * ContentProvider  : Yusuke Shinyama\n");
        fwrite($fscrip," * Creator          : Yusuke Shinyama\n");
        fwrite($fscrip," * InfoAbout        : http://www.unixuser.org/~euske/python/pdfminer/\n");
        fwrite($fscrip," * Description      : Extracts information from PDF documents. Focuses entirely on getting and analyzing text data.\n");
        fwrite($fscrip," * ExternalURI      : http://pdf2html.tabesugi.net:8080\n");
        fwrite($fscrip," * inputF " . $inputF . "\n");
        fwrite($fscrip," * input  " . $input  . "\n");
        fwrite($fscrip," * output " . $output . "\n");
        fwrite($fscrip," */\n");
        fwrite($fscrip,"\ncd " . getcwd() . "\n");
        fclose($fscrip);
        }
    }

function scrip($str) /* TODO send comments and command line instructions. Don't forget to terminate string with new line character, if needed.*/
    {
    global $fscrip, $pdfminerfile;
    $fscrip = fopen($pdfminerfile,'a');
    if($fscrip)
        {
        fwrite($fscrip,$str . "\n");
        fclose($fscrip);
        }
    }

class SystemExit extends Exception {}
try {
    function hasArgument ($parameterName)
        {
        return isset($_REQUEST["$parameterName"]);
        }

    function getArgument ($parameterName)
        {
        return isset($_REQUEST["$parameterName"]) ? $_REQUEST["$parameterName"] : "";
        }

    function existsArgumentWithValue ($parameterName, $parameterValue)
        {
        /* Check whether there is an argument <parameterName> that has value
           <parameterValue>.
           There may be any number of arguments with name <parameterName> !
        */
        $query  = explode('&', $_SERVER['QUERY_STRING']);

        foreach( $query as $param )
            {
            list($name, $value) = explode('=', $param);
            if($parameterName == urldecode($name) && $parameterValue == urldecode($value))
                return true;
            }
        return false;
        }

    function tempFileName($suff) /* TODO Use this to create temporary files, if needed. */
        {
        global $dodelete;
        global $tobedeleted;
        $tmpno = tempnam('/tmp', $suff);
        if($dodelete)
            $tobedeleted[$tmpno] = true;
        return $tmpno;
        }

    function requestFile($requestParm) // e.g. "IfacettokF"
        {
        logit("requestFile({$requestParm})");

        if(isset($_REQUEST[$requestParm]))
            {
            $urlbase = isset($_REQUEST["base"]) ? $_REQUEST["base"] : "http://localhost/toolsdata/";

            $item = $_REQUEST[$requestParm];
            $url = $urlbase . urlencode($item);
            logit("requestParm:$requestParm");
            logit("urlbase:$urlbase");
            logit("item:$item");
            logit("url[$url]");

            $handle = fopen($url, "r");
            if($handle == false)
                {
                logit("Cannot open url[$url]");
                return "";
                }
            else
                {
                $tempfilename = tempFileName("pdfminer_{$requestParm}_");
                $temp_fh = fopen($tempfilename, 'w');
                if($temp_fh == false)
                    {
                    fclose($handle);
                    logit("handle closed. Cannot open $tempfilename");
                    return "";
                    }
                else
                    {
                    while (!feof($handle))
                        {
                        $read = fread($handle, 8192);
                        fwrite($temp_fh, $read);
                        }
                    fclose($temp_fh);
                    fclose($handle);
                    return $tempfilename;
                    }
                }
            }
        logit("empty");
        return "";
        }

    function do_pdfminer()
        {
        global $pdfminerfile;
        global $dodelete;
        global $tobedeleted;
/***************
* declarations *
***************/

/*
 * TODO Use the variables defined below to configure your tool for the right
 * input files and the right settings.
 * The input files are local files that your tool can open and close like any
 * other file.
 * If your tool needs to create temporary files, use the tempFileName()
 * function. It can mark the temporary files for deletion when the webservice
 * is done. (See the global dodelete variable.)
 */
        $base = "";	/* URL from where this web service downloads input. The generated script takes care of that, so you can ignore this variable. */
        $job = "";	/* Only used if this web service returns 201 and POSTs result later. In that case the uploaded file must have the name of the job. */
        $post2 = "";	/* Only used if this web service returns 201 and POSTs result later. In that case the uploaded file must be posted to this URL. */
        $mode = "";	/* If the value is 'dry', the wrapper is expected to return a script of what will be done if the value is not 'dry', but 'run'. */
        $inputF = "";	/* List of all input files. */
        $input = "";	/* List of all input features. */
        $output = "";	/* List of all output features. */
        $echos = "";	/* List arguments and their actual values. For sanity check of this generated script. All references to this variable can be removed once your web service is working as intended. */
        $F = "";	/* Input (ONLY used if there is exactly ONE input to this workflow step) */
        $Iambiguna = false;	/* Ambiguity in input is unambiguous (utvetydig) if true */
        $Ifacettxt = false;	/* Type of content in input is text (ingen annotation) if true */
        $Iformatpdf = false;	/* Format in input is PDF if true */
        $Ipresnml = false;	/* Assemblage in input is normal if true */
        $Ismlsml = false;	/* Smell in input is any smell (lugt) if true */
        $Oambiguna = false;	/* Ambiguity in output is unambiguous (utvetydig) if true */
        $Ofacettxt = false;	/* Type of content in output is text (ingen annotation) if true */
        $Oformatflat = false;	/* Format in output is plain (flad) if true */
        $Opresnml = false;	/* Assemblage in output is normal if true */
        $Osmlnsl = false;	/* Smell in output is new smell (ny lugt) if true */
        $Oformatflatutf8 = false;	/* Style of format plain (flad) in output is UTF-8 if true */

        if( hasArgument("base") )
            {
            $base = getArgument("base");
            }
        if( hasArgument("job") )
            {
            $job = getArgument("job");
            }
        if( hasArgument("post2") )
            {
            $post2 = getArgument("post2");
            }
        if( hasArgument("mode") )
            {
            $mode = getArgument("mode");
            }
        $echos = "base=$base job=$job post2=$post2 mode=$mode ";

/*********
* input  *
*********/
        if( hasArgument("F") )
            {
            $F = requestFile("F");
            if($F == '')
                {
                header("HTTP/1.0 404 Input not found (F parameter). ");
                return;
                }
            $echos = $echos . "F=$F ";
            $inputF = $inputF . " \$F ";
            }

/************************
* input/output features *
************************/
        if( hasArgument("Iambig") )
            {
            $Iambiguna = existsArgumentWithValue("Iambig", "una");
            $echos = $echos . "Iambiguna=$Iambiguna ";
            $input = $input . ($Iambiguna ? " \$Iambiguna" : "") ;
            }
        if( hasArgument("Ifacet") )
            {
            $Ifacettxt = existsArgumentWithValue("Ifacet", "txt");
            $echos = $echos . "Ifacettxt=$Ifacettxt ";
            $input = $input . ($Ifacettxt ? " \$Ifacettxt" : "") ;
            }
        if( hasArgument("Iformat") )
            {
            $Iformatpdf = existsArgumentWithValue("Iformat", "pdf");
            $echos = $echos . "Iformatpdf=$Iformatpdf ";
            $input = $input . ($Iformatpdf ? " \$Iformatpdf" : "") ;
            }
        if( hasArgument("Ipres") )
            {
            $Ipresnml = existsArgumentWithValue("Ipres", "nml");
            $echos = $echos . "Ipresnml=$Ipresnml ";
            $input = $input . ($Ipresnml ? " \$Ipresnml" : "") ;
            }
        if( hasArgument("Isml") )
            {
            $Ismlsml = existsArgumentWithValue("Isml", "sml");
            $echos = $echos . "Ismlsml=$Ismlsml ";
            $input = $input . ($Ismlsml ? " \$Ismlsml" : "") ;
            }
        if( hasArgument("Oambig") )
            {
            $Oambiguna = existsArgumentWithValue("Oambig", "una");
            $echos = $echos . "Oambiguna=$Oambiguna ";
            $output = $output . ($Oambiguna ? " \$Oambiguna" : "") ;
            }
        if( hasArgument("Ofacet") )
            {
            $Ofacettxt = existsArgumentWithValue("Ofacet", "txt");
            $echos = $echos . "Ofacettxt=$Ofacettxt ";
            $output = $output . ($Ofacettxt ? " \$Ofacettxt" : "") ;
            }
        if( hasArgument("Oformat") )
            {
            $Oformatflat = existsArgumentWithValue("Oformat", "flat");
            $echos = $echos . "Oformatflat=$Oformatflat ";
            $output = $output . ($Oformatflat ? " \$Oformatflat" : "") ;
            }
        if( hasArgument("Opres") )
            {
            $Opresnml = existsArgumentWithValue("Opres", "nml");
            $echos = $echos . "Opresnml=$Opresnml ";
            $output = $output . ($Opresnml ? " \$Opresnml" : "") ;
            }
        if( hasArgument("Osml") )
            {
            $Osmlnsl = existsArgumentWithValue("Osml", "nsl");
            $echos = $echos . "Osmlnsl=$Osmlnsl ";
            $output = $output . ($Osmlnsl ? " \$Osmlnsl" : "") ;
            }

/*******************************
* input/output features styles *
*******************************/
        if( hasArgument("Oformatflat") )
            {
            $Oformatflatutf8 = existsArgumentWithValue("Oformatflat", "utf8");
            $echos = $echos . "Oformatflatutf8=$Oformatflatutf8 ";
            $output = $output . ($Oformatflatutf8 ? " \$Oformatflatutf8" : "") ;
            }

/* DUMMY CODE TO SANITY CHECK GENERATED SCRIPT (TODO Remove one of the two solidi from the beginning of this line to activate your own code)
        $pdfminerfile = tempFileName("pdfminer-results");
        $command = "echo $echos >> $pdfminerfile";
        logit($command);

        if(($cmd = popen($command, "r")) == NULL)
            {
            throw new SystemExit(); // instead of exit()
            }

        while($read = fgets($cmd))
            {
            }

        pclose($cmd);
/*/
// YOUR CODE STARTS HERE.
//        TODO your code!
        $pdfminerfile = tempFileName("pdfminer-results");
        if($mode == 'dry')
            scripinit($inputF,$input,$output);
        //$basepdfminerfile = basename($pdfminerfile);
        if(($cmd = popen("python3 /usr/local/bin/pdf2txt.py --version", "r")) == NULL)
            {
            throw new SystemExit(); // instead of exit()
            }
        $read = fgets($cmd);
        while(fgets($cmd))
            {
            }
        pclose($cmd);
        $six = "pdfminer.six";
        if($mode == 'dry')
            {
            if($Oformatflat)
                {
                if(substr($read,0,strlen($six)) == $six)
                    scrip("python3 /usr/local/bin/pdf2txt.py \$F -o \$pdfminerfile ## pdfminer.six");
                else
                    scrip("python3 /usr/local/bin/pdf2txt.py -o \$pdfminerfile \$F ## pdfminer EUSKE (original)");
                }
            else
                {
                if(substr($read,0,strlen($six)) == $six)
                    scrip("python3 /usr/local/bin/pdf2txt.py -t html \$F -o \$pdfminerfile ## pdfminer.six");
                else
                    scrip("python3 /usr/local/bin/pdf2txt.py -t html -o \$pdfminerfile \$F ## pdfminer EUSKE (original)");
                }
            }
        else
            {
            if($Oformatflat)
                {
                if(substr($read,0,strlen($six)) == $six)
                    $command = "python3 /usr/local/bin/pdf2txt.py $F -o $pdfminerfile"; // pdfminer.six
                else
                    $command = "python3 /usr/local/bin/pdf2txt.py -o $pdfminerfile $F"; // pdfminer EUSKE (original)
                }
            else
                {
                if(substr($read,0,strlen($six)) == $six)
                    $command = "python3 /usr/local/bin/pdf2txt.py -t html $F -o $pdfminerfile";
                else
                    $command = "python3 /usr/local/bin/pdf2txt.py -t html -o $pdfminerfile $F";
                }

            logit($command);

            if(($cmd = popen($command, "r")) == NULL)
                {
                throw new SystemExit(); // instead of exit()
                }

            while($read = fgets($cmd))
                {
                }
            pclose($cmd);
            }
// YOUR CODE ENDS HERE. OUTPUT EXPECTED IN $pdfminerfile
//*/
        $tmpf = fopen($pdfminerfile,'r');

        if($tmpf)
            {
            //logit('output from pdfminer:');
            while($line = fgets($tmpf))
                {
                //logit($line);
                print $line;
                }
            fclose($tmpf);
            }

        if($dodelete)
            {
            foreach ($tobedeleted as $filename => $dot)
                {
                if($dot)
                    unlink($filename);
                }
            unset($tobedeleted);
            }
        }
    loginit();
    do_pdfminer();
    }
catch (SystemExit $e)
    {
    header('HTTP/1.0 404 An error occurred: ' . $ERROR);
    logit('An error occurred' . $ERROR);
    echo $ERROR;
    }
?>

