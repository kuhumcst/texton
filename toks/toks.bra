{toks.bra

Create token annotation from Clarin Base Format file that already has <w> elements.
<w>elements can contain <w> and <c> elements. (One level deep.)}

X=
  ( readTables
  =   
    .   new$hash:?H
      & new$hash:?K
      & (H..ISO)$
      & (K..ISO)$
      &   map
        $ ( ( 
            =   what navn
              .   vap
                $ ( ( 
                    =   string remainder
                      .   !arg:
                        |   
                          &     map
                              $ ( ( 
                                  =   
                                    .   vap
                                      $ ((=.!arg).!arg." ")
                                  )
                                .   vap
                                  $ ((=.!arg).!arg."=")
                                )
                            : ?arg
                          & (   !arg:%?string %?remainder
                              & (K..insert)$(!string.!remainder)
                            |   !arg:?string
                              & (   (H..find)$!string:?XX
                                  & (     !XX
                                        : ?c (!string.?d) ?e
                                      & ( !d:?+!what+?
                                        |   (H..remove)$!arg
                                          &   (H..insert)
                                            $ (!string.!d+!what)
                                          &   map
                                            $ ( ( 
                                                =   
                                                  .   (H..insert)
                                                    $ !arg
                                                )
                                              . !c !e
                                              )
                                        )
                                    |   (H..insert)
                                      $ (!string.!what)
                                    )
                                | (H..insert)$(!string.!what)
                                )
                            )
                    )
                  .   !arg:?what:?navn
                    & (   @(rev$!what:?what "/" ?)
                        & rev$!what:?what
                      | 
                      )
                    & (@(!what:?what "." ?)|)
                    & get$(!navn.STR)
                  . \n
                  )
            )
          . !arg
          )
      & (!H.!K)
  )
  ( normalize
  =   
    .   (its.readTables)$!namefiles:(?H.?K)
      & ( checkName
        =   A Z z key val y c C S
          .   vap$((=.!arg).!arg):%@?A ?Z
            & upp$!A:!A
            & str$(!A low$(str$!Z)):?c
            & (     ( :?S&(H..find)$!c
                    |   @( !c
                         : ?C (("'"|"'s"):?S)
                         )
                      & (H..find)$!C
                    |   @(!c:?C s)
                      & s:?S
                      & (H..find)$!C
                    )
                  : (?key.?val) ?
                & ~(   Ned
                       Vi
                       Paa
                       Saa
                       Dag
                       Hold
                       Ting
                       Land
                       Andre
                   : ? !key ?
                   )
                & str$(!key !S)
              |   !Z:%?y "-" ?z
                &   (H..find)$(str$(!A !y))
                  : (?key.?val) ?
                & str$(!key "-" !z)
              )
        )
      & ( hyph
        =   A a z Z al au zl zu
          .       vap$((=.!arg).!arg)
                : ?A %@?a "-" %@?z ?Z
              & low$!a:?al
              & upp$!a:?au
              & low$!z:?zl
              & upp$!z:?zu
              & (   ( !al:!au
                    | !zl:!zu
                    | !a:!au
                    | !z:!zu
                    )
                  & !arg
                | str$(!A !a !z !Z)
                )
            | !arg
        )
      & ( compound
        =   A a z Z al au zl zu
          .   str
            $ ( vap
              $ ( ( 
                  =   
                    .       !arg
                          : ( " "
                            | \t
                            | \n
                            | \r
                            )
                        & 
                      | !arg
                  )
                . !arg
                )
              )
        )
      & ( norm
        =   a z
          .   !arg:I
            |   hyph$(str$!arg):?arg
              & compound$!arg:?arg
              & ( checkName$!arg
                |   out$!arg
                  &   vap$((=.!arg).low$!arg)
                    : ?arg
                  &   whl
                    ' ( !arg:?a a a ?z
                      & !a Ã¥ !z:?arg
                      )
                  & str$!arg
                )
        )
      & ( trav
        =   A e a s L M c R S C
          .   (   !arg:(span.?,?) ?
                & :?L
                & !arg:?M
                &   whl
                  ' ( !M:(span.?a,?c) ?M
                    & (   @(!c:? ".")
                        &     ( span
                              . (done.done) !a,!c
                              )
                              !L
                          : ?L
                      |     (   (K..find)$!c:?R
                              & 
                            |   @(!c:?C ~<>s)
                              & (K..find)$!C:?R
                              & s
                            )
                          : ?S
                        &     map
                            $ ( ( 
                                =     m
                                      key
                                      b
                                      remainders
                                      nyremainders
                                  .     !arg:(?key.?remainders)
                                      & !M:?m
                                      &   ( span
                                          .   (done.done) !a
                                            , str$(!key !S)
                                          )
                                        : ?MWU
                                      &   whl
                                        ' (   !remainders
                                            : %?v ?nyremainders
                                          & !m:%?f ?m
                                          &   !f
                                            : ( span
                                              .   ?b
                                                , @( ?
                                                   :   ~<>!v
                                                       ( (|~<>s)
                                                       : ?S
                                                       )
                                                   )
                                              )
                                          &     ( span
                                                .     (done.done)
                                                      !b
                                                  , str$(!v low$!S)
                                                )
                                                !MWU
                                            : ?MWU
                                          & !nyremainders:?remainders
                                          )
                                      & !remainders:
                                      & !MWU !L:?L
                                      & !m:?M
                                    | 
                                )
                              . !R
                              )
                          : ~
                      | (span.!a,!c) !L:?L
                      )
                    )
                &   whl
                  ' ( !L:%?A ?L
                    & !A !M:?M
                    )
                & !M:?arg
              | 
              )
            &   map
              $ ( ( 
                  =   
                    .     !arg:(?e.?a,?s)
                        & (   !a:(done.done) ?a
                            & (!e.!a,!s)
                          | ( !e
                            .   !a
                              ,   ( !e:span&norm
                                  | trav
                                  )
                                $ !s
                            )
                          )
                      | !arg
                  )
                . !arg
                )
        )
      & trav$!arg
  )
  ( doit
  =   normalizeYesOrNo
    .   !arg:(?arg.?normalizeYesOrNo)
      & nestML$(get$(!arg,X ML)):?xml
      &   !xml
        : (   ?
              (TEI.?,? (text.?,?xml) ?)
              ?
          | ? (text.?,?xml) ?
          )
      & ( content
        =   A M Z
          .   map
            $ ( ( 
                =   c
                  .       !arg
                        : ( (   del
                              | fw
                              | lb
                              | pb
                            . ?,?
                            )
                          | ("!--".?)
                          )
                      & 
                    |     !arg
                        : (choice.?,?A (corr.?,?M) ?Z)
                      &   !A !Z
                        : ? (sic.?) ?
                        : ?A (sic.?) ?Z
                      & !A !M !Z
                    |     !arg
                        : (c.? (type.s) ?,?)
                      & " "
                    |     !arg
                        : (c.? (type.p) ?,?c)
                      & !c
                    |   !arg:(?.?,?c)
                      & (!c:@|content$!c)
                    |   !arg:@
                      & vap$(.!arg." ")
                    | !arg
                )
              . !arg
              )
        )
      & 0:?id
      & (ID="xml:id".str$(t (1+!id:?id)))
      & ( recur
        =   
          .   map
            $ ( ( 
                =   att h S T from e
                  .     !arg:(?e.?att,?h)
                      & (   !att:? (type.s) ?
                          & 
                        |   !e:(w|c)
                          & (   ~(!h:? (?.?,?) ?)
                              &   !att
                                : ? ("xml:id".?from) ?
                              & ( span
                                .   !ID (from.str$("#" !from))
                                  , str$(vap$(.!h." "))
                                )
                            |     !h
                                :   @
                                    ( w|c
                                    .   ? ("xml:id".?from) ?
                                      , ?
                                    )
                                    ?
                                    ( w|c
                                    .   ? ("xml:id".?to) ?
                                      , ?
                                    )
                                    @
                              & ( span
                                .     !ID
                                      (from.str$("#" !from))
                                      (to.str$("#" !to))
                                  , str$(content$!h)
                                )
                            |     !att
                                : ? ("xml:id".?from) ?
                              & ( span
                                .   !ID (from.str$("#" !from))
                                  , str$(content$!h)
                                )
                            )
                        | recur$!h
                        )
                    | 
                )
              . !arg
              )
        )
      & (spanGrp.(ana.token),recur$!xml):?ret
      & (   @(low$!normalizeYesOrNo:y ?)
          & (its.normalize)$!ret:?ret
        | 
        )
      & !ret
  )
  ( new
  =   
    .   ~
      |   ~
        &   put
          $ (   toML
              $ ( (its.doit)
                $ ("C:\\gitprojects\\texton\\teitok\\test\\JEB-103ab.out.xml".y)
                )
            , "JEB-103ab.toks.xml"
            , NEW
            )
      |   ~
        &   put
          $ (   toML
              $ ( (its.doit)
                $ ("C:\\projects\\teitok\\test\\JEB-040.out.xml".y)
                )
            , "JEB-040.out3.xml"
            , NEW
            )
      |   ~
        &   put
          $ (   toML
              $ ( (its.doit)
                $ ("C:\\gitprojects\\texton\\plainD2cbf\\maak.xml".y)
                )
            , "maak.out2.xml"
            , NEW
            )
      |   ~
        &   put
          $ (   toML
              $ ( (its.doit)
                $ ( "C:\\downloads\\adl_brandes\\adl_brandes-18.xml-3887-step1.xml"
                  . y
                  )
                )
            , "adl_brandes.out3.xml"
            , NEW
            )
      |   ~
        &   put
          $ (   toML
              $ ( (its.doit)
                $ ( "C:\\downloads\\https___hr.wikipedia.org_wiki_Hrvatski_jezik-86-3542-step3.xml"
                  . y
                  )
                )
            , "out.xml"
            , NEW
            )
      |   ~
        &     "c:/gitprojects/texton-linguistic-resources/da/navnegenkenderCSTNER/DKcity"
              "c:/gitprojects/texton-linguistic-resources/da/navnegenkenderCSTNER/nonDKcity"
              "c:/gitprojects/texton-linguistic-resources/da/navnegenkenderCSTNER/surnames"
              "c:/gitprojects/texton-linguistic-resources/da/navnegenkenderCSTNER/firstnames"
              "c:/gitprojects/texton-linguistic-resources/da/navnegenkenderCSTNER/countrynames"
              "c:/gitprojects/texton-linguistic-resources/da/navnegenkenderCSTNER/islandnames"
              "c:/gitprojects/texton-linguistic-resources/da/navnegenkenderCSTNER/miscplace"
              "c:/gitprojects/texton-linguistic-resources/da/navnegenkenderCSTNER/company"
              "c:/gitprojects/texton-linguistic-resources/da/navnegenkenderCSTNER/street"
              "c:/gitprojects/texton-linguistic-resources/da/navnegenkenderCSTNER/organization"
          : ?namefiles
        &   put
          $ ( toML$((its.doit)$("text-142-738-step2.xml".n))
            , "out.xml"
            , NEW
            )
      |   arg$:?input
        & arg$:?output
        & arg$:?normalizeYesOrNo
        & :?namefiles
        &   whl
          ' ( arg$:?F
            & !F !namefiles:?namefiles
            )
        &   put
          $ ( toML$((its.doit)$(!input.!normalizeYesOrNo))
            , !output
            , NEW
            )
  );

r=
  get'("toks.bra",TXT)
& rmv$(str$(toks ".bak"))
& ren$("toks.bra".str$(toks ".bak"))
&   put
  $ ( "{toks.bra

Create token annotation from Clarin Base Format file that already has <w> elements.
<w>elements can contain <w> and <c> elements. (One level deep.)}

"
    , "toks.bra"
    , NEW
    , BIN
    )
& lst'(X,"toks.bra",APP)
& put'(\n,"toks.bra",APP,BIN)
& lst'(r,"toks.bra",APP)
& put$(str$("\nnew'" X ";\n"),"toks.bra",APP,BIN)
& ;

new'X;
