<?php
header('Content-type:text/plain; charset=UTF-8');
/*
 * This PHP script is generated by CLARIN-DK's tool registration form
 * (http://localhost/texton/register). It should, with no or few adaptations
 * work out of the box as a dummy for your web service. The output returned
 * to the Text Tonsorium (CLARIN-DK's workflow manager) is just a listing of
 * the HTTP parameters received by this web service from the Text Tonsorium,
 * and not the output proper. For that you have to add your code to this script
 * and deactivate the dummy functionality. (The comments near the end of this
 * script explain how that is done.)
 *
 * Places in this script that require your attention are marked 'TODO'.
 */
/*
ToolID         : udpipe
PassWord       :
Version        : 1.2
Title          : udpipe
Path in URL    : udpipe/	*** TODO make sure your web service listens on this path and that this script is readable for the webserver. ***
Publisher      : Charles University, Faculty of Mathematics and Physics, Institute of Formal and Applied Linguistics (UFAL)
ContentProvider: LINDAT / CLARIAH-CZ Data & Tools
Creator        : Milan Straka & Jana Straková
InfoAbout      : https://ufal.mff.cuni.cz/udpipe/1
Description    : Tokenizer, POS Tagger, Lemmatizer and Parser models for 94 treebanks of 61 languages of Universal Depenencies 2.5 Treebanks.
ExternalURI    :
XMLparms       :
PostData       :
Inactive       :
*/

/*******************
* helper functions *
*******************/
$toollog = '../log/udpipe.log'; /* Used by the logit() function. TODO make sure the folder exists and is writable. Adapt if needed */

/*  TODO Set $dodelete to false if temporary files in /tmp should not be deleted before returning. */
$dodelete = true;
$tobedeleted = array();


function loginit()  /* Wipes the contents of the log file! TODO Change this behaviour if needed. */
    {
    global $toollog,$ftemp;
    $ftemp = fopen($toollog,'w');
    if($ftemp)
        {
        fwrite($ftemp,$toollog . "\n");
        fclose($ftemp);
        }
    }

function logit($str) /* TODO You can use this function to write strings to the log file. */
    {
    global $toollog,$ftemp;
    $ftemp = fopen($toollog,'a');
    if($ftemp)
        {
        fwrite($ftemp,$str . "\n");
        fclose($ftemp);
        }
    }

function scripinit($inputF,$input,$output)  /* Initialises outputfile. */
    {
    global $fscrip, $udpipefile;
    $fscrip = fopen($udpipefile,'w');
    if($fscrip)
        {
        fwrite($fscrip,"/*\n");
        fwrite($fscrip," * ToolID           : udpipe\n");
        fwrite($fscrip," * Version          : 1.2\n");
        fwrite($fscrip," * Title            : udpipe\n");
        fwrite($fscrip," * ServiceURL       : http://localhost/udpipe/\n");
        fwrite($fscrip," * Publisher        : Charles University, Faculty of Mathematics and Physics, Institute of Formal and Applied Linguistics (UFAL)\n");
        fwrite($fscrip," * ContentProvider  : LINDAT / CLARIAH-CZ Data & Tools\n");
        fwrite($fscrip," * Creator          : Milan Straka & Jana Straková\n");
        fwrite($fscrip," * InfoAbout        : https://ufal.mff.cuni.cz/udpipe/1\n");
        fwrite($fscrip," * Description      : Tokenizer, POS Tagger, Lemmatizer and Parser models for 94 treebanks of 61 languages of Universal Depenencies 2.5 Treebanks.\n");
        fwrite($fscrip," * ExternalURI      : \n");
        fwrite($fscrip," * inputF " . $inputF . "\n");
        fwrite($fscrip," * input  " . $input  . "\n");
        fwrite($fscrip," * output " . $output . "\n");
        fwrite($fscrip," */\n");
        fwrite($fscrip,"\ncd " . getcwd() . "\n");
        fclose($fscrip);
        }
    }

function scrip($str) /* TODO send comments and command line instructions. Don't forget to terminate string with new line character, if needed.*/
    {
    global $fscrip, $udpipefile;
    $fscrip = fopen($udpipefile,'a');
    if($fscrip)
        {
        fwrite($fscrip,$str . "\n");
        fclose($fscrip);
        }
    }

class SystemExit extends Exception {}
try {
    function hasArgument ($parameterName)
        {
        return isset($_REQUEST["$parameterName"]);
        }

    function getArgument ($parameterName)
        {
        return isset($_REQUEST["$parameterName"]) ? $_REQUEST["$parameterName"] : "";
        }

    function existsArgumentWithValue ($parameterName, $parameterValue)
        {
        /* Check whether there is an argument <parameterName> that has value
           <parameterValue>.
           There may be any number of arguments with name <parameterName> !
        */
        $query  = explode('&', $_SERVER['QUERY_STRING']);

        foreach( $query as $param )
            {
            list($name, $value) = explode('=', $param);
            if($parameterName == urldecode($name) && $parameterValue == urldecode($value))
                return true;
            }
        return false;
        }

    function tempFileName($suff) /* TODO Use this to create temporary files, if needed. */
        {
        global $dodelete;
        global $tobedeleted;
        $tmpno = tempnam('/tmp', $suff);
        if($dodelete)
            $tobedeleted[$tmpno] = true;
        return $tmpno;
        }

    function requestFile($requestParm) // e.g. "IfacettokF"
        {
        logit("requestFile({$requestParm})");

        if(isset($_REQUEST[$requestParm]))
            {
            $urlbase = isset($_REQUEST["base"]) ? $_REQUEST["base"] : "http://localhost/toolsdata/";

            $item = $_REQUEST[$requestParm];
            $url = $urlbase . urlencode($item);
            logit("requestParm:$requestParm");
            logit("urlbase:$urlbase");
            logit("item:$item");
            logit("url[$url]");

            $handle = fopen($url, "r");
            if($handle == false)
                {
                logit("Cannot open url[$url]");
                return "";
                }
            else
                {
                $tempfilename = tempFileName("udpipe_{$requestParm}_");
                $temp_fh = fopen($tempfilename, 'w');
                if($temp_fh == false)
                    {
                    fclose($handle);
                    logit("handle closed. Cannot open $tempfilename");
                    return "";
                    }
                else
                    {
                    while (!feof($handle))
                        {
                        $read = fread($handle, 8192);
                        fwrite($temp_fh, $read);
                        }
                    fclose($temp_fh);
                    fclose($handle);
                    return $tempfilename;
                    }
                }
            }
        logit("empty");
        return "";
        }

    function do_udpipe()
        {
        global $udpipefile;
        global $dodelete;
        global $tobedeleted;
/***************
* declarations *
***************/

/*
 * TODO Use the variables defined below to configure your tool for the right
 * input files and the right settings.
 * The input files are local files that your tool can open and close like any
 * other file.
 * If your tool needs to create temporary files, use the tempFileName()
 * function. It can mark the temporary files for deletion when the webservice
 * is done. (See the global dodelete variable.)
 */
        $base = "";	/* URL from where this web service downloads input. The generated script takes care of that, so you can ignore this variable. */
        $job = "";	/* Only used if this web service returns 201 and POSTs result later. In that case the uploaded file must have the name of the job. */
        $post2 = "";	/* Only used if this web service returns 201 and POSTs result later. In that case the uploaded file must be posted to this URL. */
        $mode = "";	/* If the value is 'dry', the wrapper is expected to return a script of what will be done if the value is not 'dry', but 'run'. */
        $inputF = "";	/* List of all input files. */
        $input = "";	/* List of all input features. */
        $output = "";	/* List of all output features. */
        $echos = "";	/* List arguments and their actual values. For sanity check of this generated script. All references to this variable can be removed once your web service is working as intended. */
        $IfacetsegF = "";	/* Input with type of content segments (sætningssegmenter) */
        $IfacettokF = "";	/* Input with type of content tokens (tokens) */
        $Iambiguna = false;	/* Ambiguity in input is unambiguous (utvetydig) if true */
        $Iappnrm = false;	/* Appearance in input is normalised (normaliseret) if true */
        $Ifacetseg = false;	/* Type of content in input is segments (sætningssegmenter) if true */
        $Ifacettok = false;	/* Type of content in input is tokens (tokens) if true */
        $Iformattxtann = false;	/* Format in input is TEIP5DKCLARIN_ANNOTATION if true */
        $Ilangaf = false;	/* Language in input is Afrikaans (afrikaans) if true */
        $Ilangar = false;	/* Language in input is Arabic (arabisk) if true */
        $Ilangbe = false;	/* Language in input is Belarusian (hviderussisk) if true */
        $Ilangbg = false;	/* Language in input is Bulgarian (bulgarsk) if true */
        $Ilangca = false;	/* Language in input is Catalan (katalansk) if true */
        $Ilangcop = false;	/* Language in input is Coptic (koptisk) if true */
        $Ilangcs = false;	/* Language in input is Czech (tjekkisk) if true */
        $Ilangcu = false;	/* Language in input is Old Church Slavonic (kirkeslavisk) if true */
        $Ilangda = false;	/* Language in input is Danish (dansk) if true */
        $Ilangde = false;	/* Language in input is German (tysk) if true */
        $Ilangel = false;	/* Language in input is Greek (græsk) if true */
        $Ilangen = false;	/* Language in input is English (engelsk) if true */
        $Ilanges = false;	/* Language in input is Spanish (spansk) if true */
        $Ilanget = false;	/* Language in input is Estonian (estisk) if true */
        $Ilangeu = false;	/* Language in input is Basque (baskisk) if true */
        $Ilangfa = false;	/* Language in input is Persian (persisk) if true */
        $Ilangfi = false;	/* Language in input is Finnish (finsk) if true */
        $Ilangfr = false;	/* Language in input is French (fransk) if true */
        $Ilangga = false;	/* Language in input is Irish (irsk) if true */
        $Ilanggd = false;	/* Language in input is Scottish Gaelic (skotsk gælisk) if true */
        $Ilanggl = false;	/* Language in input is Galician (galicisk) if true */
        $Ilanggot = false;	/* Language in input is Gothic (gotisk) if true */
        $Ilanghe = false;	/* Language in input is Hebrew (hebraisk) if true */
        $Ilanghi = false;	/* Language in input is Hindi (hindi) if true */
        $Ilanghr = false;	/* Language in input is Croatian (kroatisk) if true */
        $Ilanghu = false;	/* Language in input is Hungarian (ungarsk) if true */
        $Ilanghy = false;	/* Language in input is Armenian (armensk) if true */
        $Ilangid = false;	/* Language in input is Indonesian (indonesisk) if true */
        $Ilangit = false;	/* Language in input is Italian (italiensk) if true */
        $Ilangja = false;	/* Language in input is Japanese (japansk) if true */
        $Ilangko = false;	/* Language in input is Korean (koreansk) if true */
        $Ilangla = false;	/* Language in input is Latin (latin) if true */
        $Ilanglt = false;	/* Language in input is Lithuanian (litauisk) if true */
        $Ilanglv = false;	/* Language in input is Latvian (lettisk) if true */
        $Ilangmr = false;	/* Language in input is Marathi (Mar??h?) (marathi) if true */
        $Ilangmt = false;	/* Language in input is Maltese (maltesisk) if true */
        $Ilangnb = false;	/* Language in input is Norwegian Bokmål (norsk bokmål) if true */
        $Ilangnl = false;	/* Language in input is Dutch (nederlandsk) if true */
        $Ilangnn = false;	/* Language in input is Norwegian Nynorsk (nynorsk) if true */
        $Ilangpl = false;	/* Language in input is Polish (polsk) if true */
        $Ilangpt = false;	/* Language in input is Portuguese (portugisisk) if true */
        $Ilangro = false;	/* Language in input is Romanian (rumænsk) if true */
        $Ilangru = false;	/* Language in input is Russian (russisk) if true */
        $Ilangse = false;	/* Language in input is Northern Sami (nordsamisk) if true */
        $Ilangsk = false;	/* Language in input is Slovak (slovakisk) if true */
        $Ilangsl = false;	/* Language in input is Slovene (slovensk) if true */
        $Ilangsr = false;	/* Language in input is Serbian (serbisk) if true */
        $Ilangsv = false;	/* Language in input is Swedish (svensk) if true */
        $Ilangta = false;	/* Language in input is Tamil (tamilsk) if true */
        $Ilangte = false;	/* Language in input is Telugu (telugu) if true */
        $Ilangtr = false;	/* Language in input is Turkish (tyrkisk) if true */
        $Ilangug = false;	/* Language in input is Uyghur (uighur) if true */
        $Ilanguk = false;	/* Language in input is Ukrainian (ukrainsk) if true */
        $Ilangur = false;	/* Language in input is Urdu (urdu) if true */
        $Ilangvi = false;	/* Language in input is Vietnamese (vietnamesisk) if true */
        $Ilangwo = false;	/* Language in input is Wolof (wolof) if true */
        $Ilangzh = false;	/* Language in input is Chinese (kinesisk) if true */
        $Iperiodc1 = false;	/* Historical period in input is classical (antikken) if true */
        $Iperiodc13 = false;	/* Historical period in input is medieval (middelalderen) if true */
        $Iperiodc20 = false;	/* Historical period in input is late modern (moderne tid) if true */
        $Iperiodc21 = false;	/* Historical period in input is contemporary (efterkrigstiden) if true */
        $Ipresnml = false;	/* Assemblage in input is normal if true */
        $Oambiguna = false;	/* Ambiguity in output is unambiguous (utvetydig) if true */
        $Oappnrm = false;	/* Appearance in output is normalised (normaliseret) if true */
        $Ofacetlem = false;	/* Type of content in output is lemmas (lemmaer) if true */
        $Ofacetmrf = false;	/* Type of content in output is morphological features (morfologiske træk) if true */
        $Ofacetpos = false;	/* Type of content in output is PoS-tags (PoS-tags) if true */
        $Ofacetstx = false;	/* Type of content in output is syntax (dependency structure) (syntaks (dependensstruktur)) if true */
        $Oformattxtann = false;	/* Format in output is TEIP5DKCLARIN_ANNOTATION if true */
        $Olangaf = false;	/* Language in output is Afrikaans (afrikaans) if true */
        $Olangar = false;	/* Language in output is Arabic (arabisk) if true */
        $Olangbe = false;	/* Language in output is Belarusian (hviderussisk) if true */
        $Olangbg = false;	/* Language in output is Bulgarian (bulgarsk) if true */
        $Olangca = false;	/* Language in output is Catalan (katalansk) if true */
        $Olangcop = false;	/* Language in output is Coptic (koptisk) if true */
        $Olangcs = false;	/* Language in output is Czech (tjekkisk) if true */
        $Olangcu = false;	/* Language in output is Old Church Slavonic (kirkeslavisk) if true */
        $Olangda = false;	/* Language in output is Danish (dansk) if true */
        $Olangde = false;	/* Language in output is German (tysk) if true */
        $Olangel = false;	/* Language in output is Greek (græsk) if true */
        $Olangen = false;	/* Language in output is English (engelsk) if true */
        $Olanges = false;	/* Language in output is Spanish (spansk) if true */
        $Olanget = false;	/* Language in output is Estonian (estisk) if true */
        $Olangeu = false;	/* Language in output is Basque (baskisk) if true */
        $Olangfa = false;	/* Language in output is Persian (persisk) if true */
        $Olangfi = false;	/* Language in output is Finnish (finsk) if true */
        $Olangfr = false;	/* Language in output is French (fransk) if true */
        $Olangga = false;	/* Language in output is Irish (irsk) if true */
        $Olanggd = false;	/* Language in output is Scottish Gaelic (skotsk gælisk) if true */
        $Olanggl = false;	/* Language in output is Galician (galicisk) if true */
        $Olanggot = false;	/* Language in output is Gothic (gotisk) if true */
        $Olanghe = false;	/* Language in output is Hebrew (hebraisk) if true */
        $Olanghi = false;	/* Language in output is Hindi (hindi) if true */
        $Olanghr = false;	/* Language in output is Croatian (kroatisk) if true */
        $Olanghu = false;	/* Language in output is Hungarian (ungarsk) if true */
        $Olanghy = false;	/* Language in output is Armenian (armensk) if true */
        $Olangid = false;	/* Language in output is Indonesian (indonesisk) if true */
        $Olangit = false;	/* Language in output is Italian (italiensk) if true */
        $Olangja = false;	/* Language in output is Japanese (japansk) if true */
        $Olangko = false;	/* Language in output is Korean (koreansk) if true */
        $Olangla = false;	/* Language in output is Latin (latin) if true */
        $Olanglt = false;	/* Language in output is Lithuanian (litauisk) if true */
        $Olanglv = false;	/* Language in output is Latvian (lettisk) if true */
        $Olangmr = false;	/* Language in output is Marathi (Mar??h?) (marathi) if true */
        $Olangmt = false;	/* Language in output is Maltese (maltesisk) if true */
        $Olangnb = false;	/* Language in output is Norwegian Bokmål (norsk bokmål) if true */
        $Olangnl = false;	/* Language in output is Dutch (nederlandsk) if true */
        $Olangnn = false;	/* Language in output is Norwegian Nynorsk (nynorsk) if true */
        $Olangpl = false;	/* Language in output is Polish (polsk) if true */
        $Olangpt = false;	/* Language in output is Portuguese (portugisisk) if true */
        $Olangro = false;	/* Language in output is Romanian (rumænsk) if true */
        $Olangru = false;	/* Language in output is Russian (russisk) if true */
        $Olangse = false;	/* Language in output is Northern Sami (nordsamisk) if true */
        $Olangsk = false;	/* Language in output is Slovak (slovakisk) if true */
        $Olangsl = false;	/* Language in output is Slovene (slovensk) if true */
        $Olangsr = false;	/* Language in output is Serbian (serbisk) if true */
        $Olangsv = false;	/* Language in output is Swedish (svensk) if true */
        $Olangta = false;	/* Language in output is Tamil (tamilsk) if true */
        $Olangte = false;	/* Language in output is Telugu (telugu) if true */
        $Olangtr = false;	/* Language in output is Turkish (tyrkisk) if true */
        $Olangug = false;	/* Language in output is Uyghur (uighur) if true */
        $Olanguk = false;	/* Language in output is Ukrainian (ukrainsk) if true */
        $Olangur = false;	/* Language in output is Urdu (urdu) if true */
        $Olangvi = false;	/* Language in output is Vietnamese (vietnamesisk) if true */
        $Olangwo = false;	/* Language in output is Wolof (wolof) if true */
        $Olangzh = false;	/* Language in output is Chinese (kinesisk) if true */
        $Operiodc1 = false;	/* Historical period in output is classical (antikken) if true */
        $Operiodc13 = false;	/* Historical period in output is medieval (middelalderen) if true */
        $Operiodc20 = false;	/* Historical period in output is late modern (moderne tid) if true */
        $Operiodc21 = false;	/* Historical period in output is contemporary (efterkrigstiden) if true */
        $Opresnml = false;	/* Assemblage in output is normal if true */
        $OfacetmrfUni = false;	/* Style of type of content morphological features (morfologiske træk) in output is Universal Part-of-Speech Tagset if true */
        $OfacetposUni = false;	/* Style of type of content PoS-tags (PoS-tags) in output is Universal Part-of-Speech Tagset if true */

        if( hasArgument("base") )
            {
            $base = getArgument("base");
            }
        if( hasArgument("job") )
            {
            $job = getArgument("job");
            }
        if( hasArgument("post2") )
            {
            $post2 = getArgument("post2");
            }
        if( hasArgument("mode") )
            {
            $mode = getArgument("mode");
            }
        $echos = "base=$base job=$job post2=$post2 mode=$mode ";

/*********
* input  *
*********/
        if( hasArgument("IfacetsegF") )
            {
            $IfacetsegF = requestFile("IfacetsegF");
            if($IfacetsegF == '')
                {
                header("HTTP/1.0 404 Input with type of content 'segments (sætningssegmenter)' not found (IfacetsegF parameter). ");
                return;
                }
            $echos = $echos . "IfacetsegF=$IfacetsegF ";
            $inputF = $inputF . " \$IfacetsegF ";
            }
        if( hasArgument("IfacettokF") )
            {
            $IfacettokF = requestFile("IfacettokF");
            if($IfacettokF == '')
                {
                header("HTTP/1.0 404 Input with type of content 'tokens (tokens)' not found (IfacettokF parameter). ");
                return;
                }
            $echos = $echos . "IfacettokF=$IfacettokF ";
            $inputF = $inputF . " \$IfacettokF ";
            }

/************************
* input/output features *
************************/
        if( hasArgument("Iambig") )
            {
            $Iambiguna = existsArgumentWithValue("Iambig", "una");
            $echos = $echos . "Iambiguna=$Iambiguna ";
            $input = $input . ($Iambiguna ? " \$Iambiguna" : "") ;
            }
        if( hasArgument("Iapp") )
            {
            $Iappnrm = existsArgumentWithValue("Iapp", "nrm");
            $echos = $echos . "Iappnrm=$Iappnrm ";
            $input = $input . ($Iappnrm ? " \$Iappnrm" : "") ;
            }
        if( hasArgument("Ifacet") )
            {
            $Ifacetseg = existsArgumentWithValue("Ifacet", "seg");
            $Ifacettok = existsArgumentWithValue("Ifacet", "tok");
            $echos = $echos . "Ifacetseg=$Ifacetseg " . "Ifacettok=$Ifacettok ";
            $input = $input . ($Ifacetseg ? " \$Ifacetseg" : "")  . ($Ifacettok ? " \$Ifacettok" : "") ;
            }
        if( hasArgument("Iformat") )
            {
            $Iformattxtann = existsArgumentWithValue("Iformat", "txtann");
            $echos = $echos . "Iformattxtann=$Iformattxtann ";
            $input = $input . ($Iformattxtann ? " \$Iformattxtann" : "") ;
            }
        if( hasArgument("Ilang") )
            {
            $Ilangaf = existsArgumentWithValue("Ilang", "af");
            $Ilangar = existsArgumentWithValue("Ilang", "ar");
            $Ilangbe = existsArgumentWithValue("Ilang", "be");
            $Ilangbg = existsArgumentWithValue("Ilang", "bg");
            $Ilangca = existsArgumentWithValue("Ilang", "ca");
            $Ilangcop = existsArgumentWithValue("Ilang", "cop");
            $Ilangcs = existsArgumentWithValue("Ilang", "cs");
            $Ilangcu = existsArgumentWithValue("Ilang", "cu");
            $Ilangda = existsArgumentWithValue("Ilang", "da");
            $Ilangde = existsArgumentWithValue("Ilang", "de");
            $Ilangel = existsArgumentWithValue("Ilang", "el");
            $Ilangen = existsArgumentWithValue("Ilang", "en");
            $Ilanges = existsArgumentWithValue("Ilang", "es");
            $Ilanget = existsArgumentWithValue("Ilang", "et");
            $Ilangeu = existsArgumentWithValue("Ilang", "eu");
            $Ilangfa = existsArgumentWithValue("Ilang", "fa");
            $Ilangfi = existsArgumentWithValue("Ilang", "fi");
            $Ilangfr = existsArgumentWithValue("Ilang", "fr");
            $Ilangga = existsArgumentWithValue("Ilang", "ga");
            $Ilanggd = existsArgumentWithValue("Ilang", "gd");
            $Ilanggl = existsArgumentWithValue("Ilang", "gl");
            $Ilanggot = existsArgumentWithValue("Ilang", "got");
            $Ilanghe = existsArgumentWithValue("Ilang", "he");
            $Ilanghi = existsArgumentWithValue("Ilang", "hi");
            $Ilanghr = existsArgumentWithValue("Ilang", "hr");
            $Ilanghu = existsArgumentWithValue("Ilang", "hu");
            $Ilanghy = existsArgumentWithValue("Ilang", "hy");
            $Ilangid = existsArgumentWithValue("Ilang", "id");
            $Ilangit = existsArgumentWithValue("Ilang", "it");
            $Ilangja = existsArgumentWithValue("Ilang", "ja");
            $Ilangko = existsArgumentWithValue("Ilang", "ko");
            $Ilangla = existsArgumentWithValue("Ilang", "la");
            $Ilanglt = existsArgumentWithValue("Ilang", "lt");
            $Ilanglv = existsArgumentWithValue("Ilang", "lv");
            $Ilangmr = existsArgumentWithValue("Ilang", "mr");
            $Ilangmt = existsArgumentWithValue("Ilang", "mt");
            $Ilangnb = existsArgumentWithValue("Ilang", "nb");
            $Ilangnl = existsArgumentWithValue("Ilang", "nl");
            $Ilangnn = existsArgumentWithValue("Ilang", "nn");
            $Ilangpl = existsArgumentWithValue("Ilang", "pl");
            $Ilangpt = existsArgumentWithValue("Ilang", "pt");
            $Ilangro = existsArgumentWithValue("Ilang", "ro");
            $Ilangru = existsArgumentWithValue("Ilang", "ru");
            $Ilangse = existsArgumentWithValue("Ilang", "se");
            $Ilangsk = existsArgumentWithValue("Ilang", "sk");
            $Ilangsl = existsArgumentWithValue("Ilang", "sl");
            $Ilangsr = existsArgumentWithValue("Ilang", "sr");
            $Ilangsv = existsArgumentWithValue("Ilang", "sv");
            $Ilangta = existsArgumentWithValue("Ilang", "ta");
            $Ilangte = existsArgumentWithValue("Ilang", "te");
            $Ilangtr = existsArgumentWithValue("Ilang", "tr");
            $Ilangug = existsArgumentWithValue("Ilang", "ug");
            $Ilanguk = existsArgumentWithValue("Ilang", "uk");
            $Ilangur = existsArgumentWithValue("Ilang", "ur");
            $Ilangvi = existsArgumentWithValue("Ilang", "vi");
            $Ilangwo = existsArgumentWithValue("Ilang", "wo");
            $Ilangzh = existsArgumentWithValue("Ilang", "zh");
            $echos = $echos . "Ilangaf=$Ilangaf " . "Ilangar=$Ilangar " . "Ilangbe=$Ilangbe " . "Ilangbg=$Ilangbg " . "Ilangca=$Ilangca " . "Ilangcop=$Ilangcop " . "Ilangcs=$Ilangcs " . "Ilangcu=$Ilangcu " . "Ilangda=$Ilangda " . "Ilangde=$Ilangde " . "Ilangel=$Ilangel " . "Ilangen=$Ilangen " . "Ilanges=$Ilanges " . "Ilanget=$Ilanget " . "Ilangeu=$Ilangeu " . "Ilangfa=$Ilangfa " . "Ilangfi=$Ilangfi " . "Ilangfr=$Ilangfr " . "Ilangga=$Ilangga " . "Ilanggd=$Ilanggd " . "Ilanggl=$Ilanggl " . "Ilanggot=$Ilanggot " . "Ilanghe=$Ilanghe " . "Ilanghi=$Ilanghi " . "Ilanghr=$Ilanghr " . "Ilanghu=$Ilanghu " . "Ilanghy=$Ilanghy " . "Ilangid=$Ilangid " . "Ilangit=$Ilangit " . "Ilangja=$Ilangja " . "Ilangko=$Ilangko " . "Ilangla=$Ilangla " . "Ilanglt=$Ilanglt " . "Ilanglv=$Ilanglv " . "Ilangmr=$Ilangmr " . "Ilangmt=$Ilangmt " . "Ilangnb=$Ilangnb " . "Ilangnl=$Ilangnl " . "Ilangnn=$Ilangnn " . "Ilangpl=$Ilangpl " . "Ilangpt=$Ilangpt " . "Ilangro=$Ilangro " . "Ilangru=$Ilangru " . "Ilangse=$Ilangse " . "Ilangsk=$Ilangsk " . "Ilangsl=$Ilangsl " . "Ilangsr=$Ilangsr " . "Ilangsv=$Ilangsv " . "Ilangta=$Ilangta " . "Ilangte=$Ilangte " . "Ilangtr=$Ilangtr " . "Ilangug=$Ilangug " . "Ilanguk=$Ilanguk " . "Ilangur=$Ilangur " . "Ilangvi=$Ilangvi " . "Ilangwo=$Ilangwo " . "Ilangzh=$Ilangzh ";
            $input = $input . ($Ilangaf ? " \$Ilangaf" : "")  . ($Ilangar ? " \$Ilangar" : "")  . ($Ilangbe ? " \$Ilangbe" : "")  . ($Ilangbg ? " \$Ilangbg" : "")  . ($Ilangca ? " \$Ilangca" : "")  . ($Ilangcop ? " \$Ilangcop" : "")  . ($Ilangcs ? " \$Ilangcs" : "")  . ($Ilangcu ? " \$Ilangcu" : "")  . ($Ilangda ? " \$Ilangda" : "")  . ($Ilangde ? " \$Ilangde" : "")  . ($Ilangel ? " \$Ilangel" : "")  . ($Ilangen ? " \$Ilangen" : "")  . ($Ilanges ? " \$Ilanges" : "")  . ($Ilanget ? " \$Ilanget" : "")  . ($Ilangeu ? " \$Ilangeu" : "")  . ($Ilangfa ? " \$Ilangfa" : "")  . ($Ilangfi ? " \$Ilangfi" : "")  . ($Ilangfr ? " \$Ilangfr" : "")  . ($Ilangga ? " \$Ilangga" : "")  . ($Ilanggd ? " \$Ilanggd" : "")  . ($Ilanggl ? " \$Ilanggl" : "")  . ($Ilanggot ? " \$Ilanggot" : "")  . ($Ilanghe ? " \$Ilanghe" : "")  . ($Ilanghi ? " \$Ilanghi" : "")  . ($Ilanghr ? " \$Ilanghr" : "")  . ($Ilanghu ? " \$Ilanghu" : "")  . ($Ilanghy ? " \$Ilanghy" : "")  . ($Ilangid ? " \$Ilangid" : "")  . ($Ilangit ? " \$Ilangit" : "")  . ($Ilangja ? " \$Ilangja" : "")  . ($Ilangko ? " \$Ilangko" : "")  . ($Ilangla ? " \$Ilangla" : "")  . ($Ilanglt ? " \$Ilanglt" : "")  . ($Ilanglv ? " \$Ilanglv" : "")  . ($Ilangmr ? " \$Ilangmr" : "")  . ($Ilangmt ? " \$Ilangmt" : "")  . ($Ilangnb ? " \$Ilangnb" : "")  . ($Ilangnl ? " \$Ilangnl" : "")  . ($Ilangnn ? " \$Ilangnn" : "")  . ($Ilangpl ? " \$Ilangpl" : "")  . ($Ilangpt ? " \$Ilangpt" : "")  . ($Ilangro ? " \$Ilangro" : "")  . ($Ilangru ? " \$Ilangru" : "")  . ($Ilangse ? " \$Ilangse" : "")  . ($Ilangsk ? " \$Ilangsk" : "")  . ($Ilangsl ? " \$Ilangsl" : "")  . ($Ilangsr ? " \$Ilangsr" : "")  . ($Ilangsv ? " \$Ilangsv" : "")  . ($Ilangta ? " \$Ilangta" : "")  . ($Ilangte ? " \$Ilangte" : "")  . ($Ilangtr ? " \$Ilangtr" : "")  . ($Ilangug ? " \$Ilangug" : "")  . ($Ilanguk ? " \$Ilanguk" : "")  . ($Ilangur ? " \$Ilangur" : "")  . ($Ilangvi ? " \$Ilangvi" : "")  . ($Ilangwo ? " \$Ilangwo" : "")  . ($Ilangzh ? " \$Ilangzh" : "") ;
            }
        if( hasArgument("Iperiod") )
            {
            $Iperiodc1 = existsArgumentWithValue("Iperiod", "c1");
            $Iperiodc13 = existsArgumentWithValue("Iperiod", "c13");
            $Iperiodc20 = existsArgumentWithValue("Iperiod", "c20");
            $Iperiodc21 = existsArgumentWithValue("Iperiod", "c21");
            $echos = $echos . "Iperiodc1=$Iperiodc1 " . "Iperiodc13=$Iperiodc13 " . "Iperiodc20=$Iperiodc20 " . "Iperiodc21=$Iperiodc21 ";
            $input = $input . ($Iperiodc1 ? " \$Iperiodc1" : "")  . ($Iperiodc13 ? " \$Iperiodc13" : "")  . ($Iperiodc20 ? " \$Iperiodc20" : "")  . ($Iperiodc21 ? " \$Iperiodc21" : "") ;
            }
        if( hasArgument("Ipres") )
            {
            $Ipresnml = existsArgumentWithValue("Ipres", "nml");
            $echos = $echos . "Ipresnml=$Ipresnml ";
            $input = $input . ($Ipresnml ? " \$Ipresnml" : "") ;
            }
        if( hasArgument("Oambig") )
            {
            $Oambiguna = existsArgumentWithValue("Oambig", "una");
            $echos = $echos . "Oambiguna=$Oambiguna ";
            $output = $output . ($Oambiguna ? " \$Oambiguna" : "") ;
            }
        if( hasArgument("Oapp") )
            {
            $Oappnrm = existsArgumentWithValue("Oapp", "nrm");
            $echos = $echos . "Oappnrm=$Oappnrm ";
            $output = $output . ($Oappnrm ? " \$Oappnrm" : "") ;
            }
        if( hasArgument("Ofacet") )
            {
            $Ofacetlem = existsArgumentWithValue("Ofacet", "lem");
            $Ofacetmrf = existsArgumentWithValue("Ofacet", "mrf");
            $Ofacetpos = existsArgumentWithValue("Ofacet", "pos");
            $Ofacetstx = existsArgumentWithValue("Ofacet", "stx");
            $echos = $echos . "Ofacetlem=$Ofacetlem " . "Ofacetmrf=$Ofacetmrf " . "Ofacetpos=$Ofacetpos " . "Ofacetstx=$Ofacetstx ";
            $output = $output . ($Ofacetlem ? " \$Ofacetlem" : "")  . ($Ofacetmrf ? " \$Ofacetmrf" : "")  . ($Ofacetpos ? " \$Ofacetpos" : "")  . ($Ofacetstx ? " \$Ofacetstx" : "") ;
            }
        if( hasArgument("Oformat") )
            {
            $Oformattxtann = existsArgumentWithValue("Oformat", "txtann");
            $echos = $echos . "Oformattxtann=$Oformattxtann ";
            $output = $output . ($Oformattxtann ? " \$Oformattxtann" : "") ;
            }
        if( hasArgument("Olang") )
            {
            $Olangaf = existsArgumentWithValue("Olang", "af");
            $Olangar = existsArgumentWithValue("Olang", "ar");
            $Olangbe = existsArgumentWithValue("Olang", "be");
            $Olangbg = existsArgumentWithValue("Olang", "bg");
            $Olangca = existsArgumentWithValue("Olang", "ca");
            $Olangcop = existsArgumentWithValue("Olang", "cop");
            $Olangcs = existsArgumentWithValue("Olang", "cs");
            $Olangcu = existsArgumentWithValue("Olang", "cu");
            $Olangda = existsArgumentWithValue("Olang", "da");
            $Olangde = existsArgumentWithValue("Olang", "de");
            $Olangel = existsArgumentWithValue("Olang", "el");
            $Olangen = existsArgumentWithValue("Olang", "en");
            $Olanges = existsArgumentWithValue("Olang", "es");
            $Olanget = existsArgumentWithValue("Olang", "et");
            $Olangeu = existsArgumentWithValue("Olang", "eu");
            $Olangfa = existsArgumentWithValue("Olang", "fa");
            $Olangfi = existsArgumentWithValue("Olang", "fi");
            $Olangfr = existsArgumentWithValue("Olang", "fr");
            $Olangga = existsArgumentWithValue("Olang", "ga");
            $Olanggd = existsArgumentWithValue("Olang", "gd");
            $Olanggl = existsArgumentWithValue("Olang", "gl");
            $Olanggot = existsArgumentWithValue("Olang", "got");
            $Olanghe = existsArgumentWithValue("Olang", "he");
            $Olanghi = existsArgumentWithValue("Olang", "hi");
            $Olanghr = existsArgumentWithValue("Olang", "hr");
            $Olanghu = existsArgumentWithValue("Olang", "hu");
            $Olanghy = existsArgumentWithValue("Olang", "hy");
            $Olangid = existsArgumentWithValue("Olang", "id");
            $Olangit = existsArgumentWithValue("Olang", "it");
            $Olangja = existsArgumentWithValue("Olang", "ja");
            $Olangko = existsArgumentWithValue("Olang", "ko");
            $Olangla = existsArgumentWithValue("Olang", "la");
            $Olanglt = existsArgumentWithValue("Olang", "lt");
            $Olanglv = existsArgumentWithValue("Olang", "lv");
            $Olangmr = existsArgumentWithValue("Olang", "mr");
            $Olangmt = existsArgumentWithValue("Olang", "mt");
            $Olangnb = existsArgumentWithValue("Olang", "nb");
            $Olangnl = existsArgumentWithValue("Olang", "nl");
            $Olangnn = existsArgumentWithValue("Olang", "nn");
            $Olangpl = existsArgumentWithValue("Olang", "pl");
            $Olangpt = existsArgumentWithValue("Olang", "pt");
            $Olangro = existsArgumentWithValue("Olang", "ro");
            $Olangru = existsArgumentWithValue("Olang", "ru");
            $Olangse = existsArgumentWithValue("Olang", "se");
            $Olangsk = existsArgumentWithValue("Olang", "sk");
            $Olangsl = existsArgumentWithValue("Olang", "sl");
            $Olangsr = existsArgumentWithValue("Olang", "sr");
            $Olangsv = existsArgumentWithValue("Olang", "sv");
            $Olangta = existsArgumentWithValue("Olang", "ta");
            $Olangte = existsArgumentWithValue("Olang", "te");
            $Olangtr = existsArgumentWithValue("Olang", "tr");
            $Olangug = existsArgumentWithValue("Olang", "ug");
            $Olanguk = existsArgumentWithValue("Olang", "uk");
            $Olangur = existsArgumentWithValue("Olang", "ur");
            $Olangvi = existsArgumentWithValue("Olang", "vi");
            $Olangwo = existsArgumentWithValue("Olang", "wo");
            $Olangzh = existsArgumentWithValue("Olang", "zh");
            $echos = $echos . "Olangaf=$Olangaf " . "Olangar=$Olangar " . "Olangbe=$Olangbe " . "Olangbg=$Olangbg " . "Olangca=$Olangca " . "Olangcop=$Olangcop " . "Olangcs=$Olangcs " . "Olangcu=$Olangcu " . "Olangda=$Olangda " . "Olangde=$Olangde " . "Olangel=$Olangel " . "Olangen=$Olangen " . "Olanges=$Olanges " . "Olanget=$Olanget " . "Olangeu=$Olangeu " . "Olangfa=$Olangfa " . "Olangfi=$Olangfi " . "Olangfr=$Olangfr " . "Olangga=$Olangga " . "Olanggd=$Olanggd " . "Olanggl=$Olanggl " . "Olanggot=$Olanggot " . "Olanghe=$Olanghe " . "Olanghi=$Olanghi " . "Olanghr=$Olanghr " . "Olanghu=$Olanghu " . "Olanghy=$Olanghy " . "Olangid=$Olangid " . "Olangit=$Olangit " . "Olangja=$Olangja " . "Olangko=$Olangko " . "Olangla=$Olangla " . "Olanglt=$Olanglt " . "Olanglv=$Olanglv " . "Olangmr=$Olangmr " . "Olangmt=$Olangmt " . "Olangnb=$Olangnb " . "Olangnl=$Olangnl " . "Olangnn=$Olangnn " . "Olangpl=$Olangpl " . "Olangpt=$Olangpt " . "Olangro=$Olangro " . "Olangru=$Olangru " . "Olangse=$Olangse " . "Olangsk=$Olangsk " . "Olangsl=$Olangsl " . "Olangsr=$Olangsr " . "Olangsv=$Olangsv " . "Olangta=$Olangta " . "Olangte=$Olangte " . "Olangtr=$Olangtr " . "Olangug=$Olangug " . "Olanguk=$Olanguk " . "Olangur=$Olangur " . "Olangvi=$Olangvi " . "Olangwo=$Olangwo " . "Olangzh=$Olangzh ";
            $output = $output . ($Olangaf ? " \$Olangaf" : "")  . ($Olangar ? " \$Olangar" : "")  . ($Olangbe ? " \$Olangbe" : "")  . ($Olangbg ? " \$Olangbg" : "")  . ($Olangca ? " \$Olangca" : "")  . ($Olangcop ? " \$Olangcop" : "")  . ($Olangcs ? " \$Olangcs" : "")  . ($Olangcu ? " \$Olangcu" : "")  . ($Olangda ? " \$Olangda" : "")  . ($Olangde ? " \$Olangde" : "")  . ($Olangel ? " \$Olangel" : "")  . ($Olangen ? " \$Olangen" : "")  . ($Olanges ? " \$Olanges" : "")  . ($Olanget ? " \$Olanget" : "")  . ($Olangeu ? " \$Olangeu" : "")  . ($Olangfa ? " \$Olangfa" : "")  . ($Olangfi ? " \$Olangfi" : "")  . ($Olangfr ? " \$Olangfr" : "")  . ($Olangga ? " \$Olangga" : "")  . ($Olanggd ? " \$Olanggd" : "")  . ($Olanggl ? " \$Olanggl" : "")  . ($Olanggot ? " \$Olanggot" : "")  . ($Olanghe ? " \$Olanghe" : "")  . ($Olanghi ? " \$Olanghi" : "")  . ($Olanghr ? " \$Olanghr" : "")  . ($Olanghu ? " \$Olanghu" : "")  . ($Olanghy ? " \$Olanghy" : "")  . ($Olangid ? " \$Olangid" : "")  . ($Olangit ? " \$Olangit" : "")  . ($Olangja ? " \$Olangja" : "")  . ($Olangko ? " \$Olangko" : "")  . ($Olangla ? " \$Olangla" : "")  . ($Olanglt ? " \$Olanglt" : "")  . ($Olanglv ? " \$Olanglv" : "")  . ($Olangmr ? " \$Olangmr" : "")  . ($Olangmt ? " \$Olangmt" : "")  . ($Olangnb ? " \$Olangnb" : "")  . ($Olangnl ? " \$Olangnl" : "")  . ($Olangnn ? " \$Olangnn" : "")  . ($Olangpl ? " \$Olangpl" : "")  . ($Olangpt ? " \$Olangpt" : "")  . ($Olangro ? " \$Olangro" : "")  . ($Olangru ? " \$Olangru" : "")  . ($Olangse ? " \$Olangse" : "")  . ($Olangsk ? " \$Olangsk" : "")  . ($Olangsl ? " \$Olangsl" : "")  . ($Olangsr ? " \$Olangsr" : "")  . ($Olangsv ? " \$Olangsv" : "")  . ($Olangta ? " \$Olangta" : "")  . ($Olangte ? " \$Olangte" : "")  . ($Olangtr ? " \$Olangtr" : "")  . ($Olangug ? " \$Olangug" : "")  . ($Olanguk ? " \$Olanguk" : "")  . ($Olangur ? " \$Olangur" : "")  . ($Olangvi ? " \$Olangvi" : "")  . ($Olangwo ? " \$Olangwo" : "")  . ($Olangzh ? " \$Olangzh" : "") ;
            }
        if( hasArgument("Operiod") )
            {
            $Operiodc1 = existsArgumentWithValue("Operiod", "c1");
            $Operiodc13 = existsArgumentWithValue("Operiod", "c13");
            $Operiodc20 = existsArgumentWithValue("Operiod", "c20");
            $Operiodc21 = existsArgumentWithValue("Operiod", "c21");
            $echos = $echos . "Operiodc1=$Operiodc1 " . "Operiodc13=$Operiodc13 " . "Operiodc20=$Operiodc20 " . "Operiodc21=$Operiodc21 ";
            $output = $output . ($Operiodc1 ? " \$Operiodc1" : "")  . ($Operiodc13 ? " \$Operiodc13" : "")  . ($Operiodc20 ? " \$Operiodc20" : "")  . ($Operiodc21 ? " \$Operiodc21" : "") ;
            }
        if( hasArgument("Opres") )
            {
            $Opresnml = existsArgumentWithValue("Opres", "nml");
            $echos = $echos . "Opresnml=$Opresnml ";
            $output = $output . ($Opresnml ? " \$Opresnml" : "") ;
            }

/*******************************
* input/output features styles *
*******************************/
        if( hasArgument("Ofacetmrf") )
            {
            $OfacetmrfUni = existsArgumentWithValue("Ofacetmrf", "Uni");
            $echos = $echos . "OfacetmrfUni=$OfacetmrfUni ";
            $output = $output . ($OfacetmrfUni ? " \$OfacetmrfUni" : "") ;
            }
        if( hasArgument("Ofacetpos") )
            {
            $OfacetposUni = existsArgumentWithValue("Ofacetpos", "Uni");
            $echos = $echos . "OfacetposUni=$OfacetposUni ";
            $output = $output . ($OfacetposUni ? " \$OfacetposUni" : "") ;
            }

/* DUMMY CODE TO SANITY CHECK GENERATED SCRIPT (TODO Remove one of the two solidi from the beginning of this line to activate your own code)
        $udpipefile = tempFileName("udpipe-results");
        $command = "echo $echos >> $udpipefile";
        logit($command);

        if(($cmd = popen($command, "r")) == NULL)
            {
            throw new SystemExit(); // instead of exit()
            }

        while($read = fgets($cmd))
            {
            }

        pclose($cmd);
/*/
// YOUR CODE STARTS HERE.
//        TODO your code!
        if($mode == 'dry')
            {
            $udpipefile = tempFileName("udpipe-results");
            scripinit($inputF,$input,$output);
            $lang = getArgument("Olang");
            if(hasArgument("Operiod"))
                $period = getArgument("Operiod");
            else
                $period = "c21";
            if($Ifacettok)
                {
                $command = "../bin/bracmat \"get'\\\"udpipex.bra\\\"\" $lang $period \$IfacettokF \$IfacetsegF \$udpipefile \$tmp1 \$tmp2";
                $rms = "&& rm \$IfacettokF && rm \$IfacetsegF ";
                }
            $command .= " && curl -v -F job=$job -F name=\$udpipefile -F data=@\$udpipefile $post2 && rm \$tmp1 && rm \$tmp2 " . $rms  . " && rm \$udpipefile >> ../log/udpipe.log 2>&1 &";
            scrip($command);
// YOUR CODE ENDS HERE. OUTPUT EXPECTED IN $udpipefile
//*/
            $tmpf = fopen($udpipefile,'r');

            if($tmpf)
                {
                while($line = fgets($tmpf))
                    print $line;
                fclose($tmpf);
                }

            if($dodelete)
                {
                foreach ($tobedeleted as $filename => $dot)
                    {
                    if($dot)
                        unlink($filename);
                    }
                unset($tobedeleted);
                }
            }
        else
            {
            //logit("F:" . $F);
            $lang = getArgument("Olang");
            if( hasArgument("Operiod") )
                $period = getArgument("Operiod");
            else
                $period = "c21";
            logit("Lang: " . $lang);
            logit("Period: " . $period);
            if($Ifacettok) // and also $Ifacetseg!
                {
                logit("segments and tokens input, PoS,morphology,Lemmas,syntax output");
                $udpipefile = tempFileName("udpipe-results");
                logit("udpipefile $udpipefile");
                $tmp1 = tempFileName("udpipe-tmp1");
                $tmp2 = tempFileName("udpipe-tmp2");
                $command = "../bin/bracmat \"get'\\\"udpipex.bra\\\"\" $lang $period $IfacettokF $IfacetsegF $udpipefile $tmp1 $tmp2";
                $rms = "&& rm $IfacettokF && rm $IfacetsegF ";
                }
            $command .= " && curl -v -F job=$job -F name=$udpipefile -F data=@$udpipefile $post2 && rm $tmp1 && rm $tmp2 " . $rms  . " && rm $udpipefile >> ../log/udpipe.log 2>&1 &";
            logit($command);
            exec($command);

            logit('RETURN 202');
            header("HTTP/1.0 202 Accepted");
// YOUR CODE ENDS HERE. OUTPUT EXPECTED IN $udpipefile
//*/
        }
    loginit();
    do_udpipe();
    }
catch (SystemExit $e)
    {
    header('HTTP/1.0 404 An error occurred: ' . $ERROR);
    logit('An error occurred' . $ERROR);
    echo $ERROR;
    }
?>

