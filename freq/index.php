<?php
header('Content-type:text/plain; charset=UTF-8');
/*
 * This PHP script is generated by CLARIN-DK's tool registration form
 * (http://localhost/texton/register). It should, with no or few adaptations
 * work out of the box as a dummy for your web service. The output returned
 * to the Text Tonsorium (CLARIN-DK's workflow manager) is just a listing of
 * the HTTP parameters received by this web service from the Text Tonsorium,
 * and not the output proper. For that you have to add your code to this script
 * and deactivate the dummy functionality. (The comments near the end of this
 * script explain how that is done.)
 *
 * Places in this script that require your attention are marked 'TODO'.
 */
/*
ToolID         : freq
PassWord       :
Version        : 1.0
Title          : Frequencies
Path in URL    : freq/	*** TODO make sure your web service listens on this path and that this script is readable for the webserver. ***
Publisher      : Københavns Universitet, Center for Sprogteknologi
ContentProvider: Københavns Universitet, Center for Sprogteknologi
Creator        : Bart Jongejan
InfoAbout      : -
Description    : Sorts input lines, collapses equal lines, appends column with frequencies. Assumes that input is 1, 2 or 3 columns, separated by tabs.
ExternalURI    :
XMLparms       :
PostData       :
Inactive       :
 */

/*******************
 * helper functions *
 *******************/
$toollog = '../log/freq.log'; /* Used by the logit() function. TODO make sure the folder exists and is writable. Adapt if needed */

/*  TODO Set $dodelete to false if temporary files in /tmp should not be deleted before returning. */
$dodelete = true;
$tobedeleted = array();


function loginit()  /* Wipes the contents of the log file! TODO Change this behaviour if needed. */
{
    return;
    global $toollog,$ftemp;
    $ftemp = fopen($toollog,'w');
    if($ftemp)
    {
        fwrite($ftemp,$toollog . "\n");
        fclose($ftemp);
    }
}

function logit($str) /* TODO You can use this function to write strings to the log file. */
{
    return;
    global $toollog,$ftemp;
    $ftemp = fopen($toollog,'a');
    if($ftemp)
    {
        fwrite($ftemp,$str . "\n");
        fclose($ftemp);
    }
}

function scripinit($inputF,$input,$output)  /* Initialises outputfile. */
{
    global $fscrip, $freqfile;
    $fscrip = fopen($freqfile,'w');
    if($fscrip)
    {
        fwrite($fscrip,"/*\n");
        fwrite($fscrip," * ToolID           : freq\n");
        fwrite($fscrip," * Version          : 1.0\n");
        fwrite($fscrip," * Title            : Frequencies\n");
        fwrite($fscrip," * ServiceURL       : http://localhost/freq/\n");
        fwrite($fscrip," * Publisher        : Københavns Universitet, Center for Sprogteknologi\n");
        fwrite($fscrip," * ContentProvider  : Københavns Universitet, Center for Sprogteknologi\n");
        fwrite($fscrip," * Creator          : Bart Jongejan\n");
        fwrite($fscrip," * InfoAbout        : -\n");
        fwrite($fscrip," * Description      : Sorts input lines, collapses equal lines, appends column with frequencies. Assumes that input is 1, 2 or 3 columns, separated by tabs.\n");
        fwrite($fscrip," * ExternalURI      : \n");
        fwrite($fscrip," * inputF " . $inputF . "\n");
        fwrite($fscrip," * input  " . $input  . "\n");
        fwrite($fscrip," * output " . $output . "\n");
        fwrite($fscrip," */\n");
        fwrite($fscrip,"\ncd " . getcwd() . "\n");
        fclose($fscrip);
    }
}

function scrip($str) /* TODO send comments and command line instructions. Don't forget to terminate string with new line character, if needed.*/
{
    global $fscrip, $freqfile;
    $fscrip = fopen($freqfile,'a');
    if($fscrip)
    {
        fwrite($fscrip,$str . "\n");
        fclose($fscrip);
    }
}

class SystemExit extends Exception {}
try {
    function hasArgument ($parameterName)
    {
        return isset($_REQUEST["$parameterName"]);
    }

    function getArgument ($parameterName)
    {
        return isset($_REQUEST["$parameterName"]) ? $_REQUEST["$parameterName"] : "";
    }

    function existsArgumentWithValue ($parameterName, $parameterValue)
    {
        /* Check whether there is an argument <parameterName> that has value
        <parameterValue>.
        There may be any number of arguments with name <parameterName> !
         */
        $query  = explode('&', $_SERVER['QUERY_STRING']);

        foreach( $query as $param )
        {
            list($name, $value) = explode('=', $param);
            if($parameterName == urldecode($name) && $parameterValue == urldecode($value))
                return true;
        }
        return false;
    }

    function tempFileName($suff) /* TODO Use this to create temporary files, if needed. */
    {
        global $dodelete;
        global $tobedeleted;
        $tmpno = tempnam('/tmp', $suff);
        if($dodelete)
            $tobedeleted[$tmpno] = true;
        return $tmpno;
    }

    function requestFile($requestParm) // e.g. "IfacettokF"
    {
        logit("requestFile({$requestParm})");

        if(isset($_REQUEST[$requestParm]))
        {
            $urlbase = isset($_REQUEST["base"]) ? $_REQUEST["base"] : "http://localhost/toolsdata/";

            $item = $_REQUEST[$requestParm];
            $url = $urlbase . urlencode($item);
            logit("requestParm:$requestParm");
            logit("urlbase:$urlbase");
            logit("item:$item");
            logit("url[$url]");

            $handle = fopen($url, "r");
            if($handle == false)
            {
                logit("Cannot open url[$url]");
                return "";
            }
            else
            {
                $tempfilename = tempFileName("freq_{$requestParm}_");
                $temp_fh = fopen($tempfilename, 'w');
                if($temp_fh == false)
                {
                    fclose($handle);
                    logit("handle closed. Cannot open $tempfilename");
                    return "";
                }
                else
                {
                    while (!feof($handle))
                    {
                        $read = fread($handle, 8192);
                        fwrite($temp_fh, $read);
                    }
                    fclose($temp_fh);
                    fclose($handle);
                    return $tempfilename;
                }
            }
        }
        logit("empty");
        return "";
    }

    function do_freq()
    {
        global $freqfile;
        global $dodelete;
        global $tobedeleted;
        /***************
         * declarations *
         ***************/

        /*
         * TODO Use the variables defined below to configure your tool for the right
         * input files and the right settings.
         * The input files are local files that your tool can open and close like any
         * other file.
         * If your tool needs to create temporary files, use the tempFileName()
         * function. It can mark the temporary files for deletion when the webservice
         * is done. (See the global dodelete variable.)
         */
        $base = "";	/* URL from where this web service downloads input. The generated script takes care of that, so you can ignore this variable. */
        $job = "";	/* Only used if this web service returns 201 and POSTs result later. In that case the uploaded file must have the name of the job. */
        $post2 = "";	/* Only used if this web service returns 201 and POSTs result later. In that case the uploaded file must be posted to this URL. */
        $mode = "";	/* If the value is 'dry', the wrapper is expected to return a script of what will be done if the value is not 'dry', but 'run'. */
        $inputF = "";	/* List of all input files. */
        $input = "";	/* List of all input features. */
        $output = "";	/* List of all output features. */
        $echos = "";	/* List arguments and their actual values. For sanity check of this generated script. All references to this variable can be removed once your web service is working as intended. */
        $F = "";	/* Input (ONLY used if there is exactly ONE input to this workflow step) */
        $Iformat2col = false;	/* Format in input is two-column list, tab separated (to kolonner, tab separeret) if true */
        $Iformat3col = false;	/* Format in input is three-column list, tab separated (tre kolonner, tab separeret) if true */
        $Iformatflat = false;	/* Format in input is plain (flad) if true */
        $Ipresnml = false;	/* Assemblage in input is normal if true */
        $Oformat2col = false;	/* Format in output is two-column list, tab separated (to kolonner, tab separeret) if true */
        $Oformat3col = false;	/* Format in output is three-column list, tab separated (tre kolonner, tab separeret) if true */
        $Oformat4col = false;	/* Format in output is four-column list, tab separated (fire kolonner, tab separeret) if true */
        $Opresfrq = false;	/* Assemblage in output is frequency list (frekvensliste) if true */

        if( hasArgument("base") )
        {
            $base = getArgument("base");
        }
        if( hasArgument("job") )
        {
            $job = getArgument("job");
        }
        if( hasArgument("post2") )
        {
            $post2 = getArgument("post2");
        }
        if( hasArgument("mode") )
        {
            $mode = getArgument("mode");
        }
        $echos = "base=$base job=$job post2=$post2 mode=$mode ";

        /*********
         * input  *
         *********/
        if( hasArgument("F") )
        {
            $F = requestFile("F");
            if($F == '')
            {
                header("HTTP/1.0 404 Input not found (F parameter). ");
                return;
            }
            $echos = $echos . "F=$F ";
            $inputF = $inputF . " \$F ";
        }

        /************************
         * input/output features *
         ************************/
        if( hasArgument("Iformat") )
        {
            $Iformat2col = existsArgumentWithValue("Iformat", "2col");
            $Iformat3col = existsArgumentWithValue("Iformat", "3col");
            $Iformatflat = existsArgumentWithValue("Iformat", "flat");
            $echos = $echos . "Iformat2col=$Iformat2col " . "Iformat3col=$Iformat3col " . "Iformatflat=$Iformatflat ";
            $input = $input . ($Iformat2col ? " \$Iformat2col" : "")  . ($Iformat3col ? " \$Iformat3col" : "")  . ($Iformatflat ? " \$Iformatflat" : "") ;
        }
        if( hasArgument("Ipres") )
        {
            $Ipresnml = existsArgumentWithValue("Ipres", "nml");
            $echos = $echos . "Ipresnml=$Ipresnml ";
            $input = $input . ($Ipresnml ? " \$Ipresnml" : "") ;
        }
        if( hasArgument("Oformat") )
        {
            $Oformat2col = existsArgumentWithValue("Oformat", "2col");
            $Oformat3col = existsArgumentWithValue("Oformat", "3col");
            $Oformat4col = existsArgumentWithValue("Oformat", "4col");
            $echos = $echos . "Oformat2col=$Oformat2col " . "Oformat3col=$Oformat3col " . "Oformat4col=$Oformat4col ";
            $output = $output . ($Oformat2col ? " \$Oformat2col" : "")  . ($Oformat3col ? " \$Oformat3col" : "")  . ($Oformat4col ? " \$Oformat4col" : "") ;
        }
        if( hasArgument("Opres") )
        {
            $Opresfrq = existsArgumentWithValue("Opres", "frq");
            $echos = $echos . "Opresfrq=$Opresfrq ";
            $output = $output . ($Opresfrq ? " \$Opresfrq" : "") ;
        }

        /*******************************
         * input/output features styles *
         *******************************/

        /* DUMMY CODE TO SANITY CHECK GENERATED SCRIPT (TODO Remove one of the two solidi from the beginning of this line to activate your own code)
        $freqfile = tempFileName("freq-results");
        $command = "echo $echos >> $freqfile";
        logit($command);

        if(($cmd = popen($command, "r")) == NULL)
        {
        throw new SystemExit(); // instead of exit()
        }

        while($read = fgets($cmd))
        {
        }

        pclose($cmd);
        /*/
        // YOUR CODE STARTS HERE.
        //        TODO your code!
        if($F != '')
        {
            logit("NOW freq");
        }
        else
        {
            header("HTTP/1.0 404 Input not found (IF). ");
            return;
        }
        $freqfile = tempFileName("freq-results");
        if($mode == 'dry')
        {
            scripinit($inputF,$input,$output);
            scrip("../bin/bracmat 'get\$\"freq.bra\"' '\$F' '\$freqfile'");
        }
        else
        {
            logit('freqfile='.$freqfile);
            $command = "../bin/bracmat 'get\$\"freq.bra\"' '$F' '$freqfile'";

            logit($command);

            if(($cmd = popen($command, "r")) == NULL)
            {
                throw new SystemExit(); // instead of exit()
            }

            while($read = fgets($cmd))
            {
            }

            pclose($cmd);
        }
        // YOUR CODE ENDS HERE. OUTPUT EXPECTED IN $freqfile
        //*/
        $tmpf = fopen($freqfile,'r');

        if($tmpf)
        {
            //logit('output from freq:');
            while($line = fgets($tmpf))
            {
                //logit($line);
                print $line;
            }
            fclose($tmpf);
        }

        if($dodelete)
        {
            foreach ($tobedeleted as $filename => $dot)
            {
                if($dot)
                    unlink($filename);
            }
            unset($tobedeleted);
        }
    }
    loginit();
    do_freq();
}
catch (SystemExit $e)
{
    header('HTTP/1.0 404 An error occurred: ' . $ERROR);
    logit('An error occurred' . $ERROR);
    echo $ERROR;
}
?>

