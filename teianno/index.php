<?php
header('Content-type:text/plain; charset=UTF-8');
/*
 * This PHP script is generated by CLARIN-DK's tool registration form
 * (http://localhost/texton/register). It should, with no or few adaptations
 * work out of the box as a dummy for your web service. The output returned
 * to the Text Tonsorium (CLARIN-DK's workflow manager) is just a listing of
 * the HTTP parameters received by this web service from the Text Tonsorium,
 * and not the output proper. For that you have to add your code to this script
 * and deactivate the dummy functionality. (The comments near the end of this
 * script explain how that is done.)
 *
 * Places in this script that require your attention are marked 'TODO'.
 */
/*
ToolID         : TEIanno
PassWord       : 
Version        : 1
Title          : TEI annotator
Path in URL    : TEIanno	*** TODO make sure your web service listens on this path and that this script is readable for the webserver. ***
Publisher      : CST
ContentProvider: CST
Creator        : Bart Jongejan
InfoAbout      : -
Description    : Add attributes for lemma and Part of Speech tag to <w> and <c> elements. (<w> and <c> elements must already exist.)
ExternalURI    : -
RestAPIkey         : 
RestAPIpassword    : 
MultiInp       : 
PostData       : 
Inactive       : 
*/

/*******************
* helper functions *
*******************/
$toollog = '../log/TEIanno.log'; /* Used by the logit() function. TODO make sure the folder exists and is writable. Adapt if needed */

/*  TODO Set $dodelete to false if temporary files in /tmp should not be deleted before returning. */
$dodelete = true;
$tobedeleted = array();

function loginit()  /* Wipes the contents of the log file! TODO Change this behaviour if needed. */
    {
//    return;
    global $toollog,$ftemp;
    $ftemp = fopen($toollog,'w');
    if($ftemp)
        {
        fwrite($ftemp,$toollog . "\n");
        fclose($ftemp);
        }
    }

function logit($str) /* TODO You can use this function to write strings to the log file. */
    {
//    return;
    global $toollog,$ftemp;
    $ftemp = fopen($toollog,'a');
    if($ftemp)
        {
        fwrite($ftemp,$str . "\n");
        fclose($ftemp);
        }
    }

function scripinit($inputF,$input,$output)  /* Initialises outputfile. */
    {
    global $fscrip, $TEIannofile;
    $fscrip = fopen($TEIannofile,'w');
    if($fscrip)
        {
        fwrite($fscrip,"/*\n");
        fwrite($fscrip," * ToolID           : TEIanno\n");
        fwrite($fscrip," * Version          : 1\n");
        fwrite($fscrip," * Title            : TEI annotator\n");
        fwrite($fscrip," * ServiceURL       : http://localhost/TEIanno\n");
        fwrite($fscrip," * Publisher        : CST\n");
        fwrite($fscrip," * ContentProvider  : CST\n");
        fwrite($fscrip," * Creator          : Bart Jongejan\n");
        fwrite($fscrip," * InfoAbout        : -\n");
        fwrite($fscrip," * Description      : Add attributes for lemma and Part of Speech tag to <w> and <c> elements. (<w> and <c> elements must already exist.)\n");
        fwrite($fscrip," * ExternalURI      : -\n");
        fwrite($fscrip," * inputF " . $inputF . "\n");
        fwrite($fscrip," * input  " . $input  . "\n");
        fwrite($fscrip," * output " . $output . "\n");
        fwrite($fscrip," */\n");
        fwrite($fscrip,"\ncd " . getcwd() . "\n");
        fclose($fscrip);
        }
    }

function scrip($str) /* TODO send comments and command line instructions. Don't forget to terminate string with new line character, if needed.*/
    {
    global $fscrip, $TEIannofile;
    $fscrip = fopen($TEIannofile,'a');
    if($fscrip)
        {
        fwrite($fscrip,$str . "\n");
        fclose($fscrip);
        }
    }

class SystemExit extends Exception {}
try {
    function hasArgument ($parameterName)
        {
        return isset($_REQUEST["$parameterName"]);
        }

    function getArgument ($parameterName)
        {
        return isset($_REQUEST["$parameterName"]) ? $_REQUEST["$parameterName"] : "";
        }

    function existsArgumentWithValue ($parameterName, $parameterValue)
        {
        /* Check whether there is an argument <parameterName> that has value
           <parameterValue>.
           There may be any number of arguments with name <parameterName> !
        */
        $query  = explode('&', $_SERVER['QUERY_STRING']);

        foreach( $query as $param )
            {
            list($name, $value) = explode('=', $param);
            if($parameterName === urldecode($name) && $parameterValue === urldecode($value))
                return true;
            }
        return false;
        }

    function tempFileName($suff) /* TODO Use this to create temporary files, if needed. */
        {
        global $dodelete;
        global $tobedeleted;
        $tmpno = tempnam('/tmp', $suff);
        if($dodelete)
            $tobedeleted[$tmpno] = true;
        return $tmpno;
        }

    function requestFile($requestParm) // e.g. "IfacettokF"
        {
        logit("requestFile({$requestParm})");

        if(isset($_REQUEST[$requestParm]))
            {
            $urlbase = isset($_REQUEST["base"]) ? $_REQUEST["base"] : "http://localhost/toolsdata/";

            $item = $_REQUEST[$requestParm];
            $url = $urlbase . urlencode($item);
            logit("requestParm:$requestParm");
            logit("urlbase:$urlbase");
            logit("item:$item");
            logit("url[$url]");

            $handle = fopen($url, "r");
            if($handle == false)
                {
                logit("Cannot open url[$url]");
                return "";
                }
            else
                {
                $tempfilename = tempFileName("TEIanno_{$requestParm}_");
                $temp_fh = fopen($tempfilename, 'w');
                if($temp_fh == false)
                    {
                    fclose($handle);
                    logit("handle closed. Cannot open $tempfilename");
                    return "";
                    }
                else
                    {
                    while (!feof($handle))
                        {
                        $read = fread($handle, 8192);
                        fwrite($temp_fh, $read);
                        }
                    fclose($temp_fh);
                    fclose($handle);
                    return $tempfilename;
                    }
                }
            }
        logit("empty");
        return "";
        }

    function do_TEIanno()
        {
        global $TEIannofile;
        global $dodelete;
        global $tobedeleted;
        global $mode;
/***************
* declarations *
***************/

/*
 * TODO Use the variables defined below to configure your tool for the right
 * input files and the right settings.
 * The input files are local files that your tool can open and close like any
 * other file.
 * If your tool needs to create temporary files, use the tempFileName()
 * function. It can mark the temporary files for deletion when the webservice
 * is done. (See the global dodelete variable.)
 */
        $base = "";	/* URL from where this web service downloads input. The generated script takes care of that, so you can ignore this variable. */
        $job = "";	/* Only used if this web service returns 201 and POSTs result later. In that case the uploaded file must have the name of the job. */
        $post2 = "";	/* Only used if this web service returns 201 and POSTs result later. In that case the uploaded file must be posted to this URL. */
        $mode = "";	/* If the value is 'dry', the wrapper is expected to return a script of what will be done if the value is not 'dry', but 'run'. */
        $inputF = "";	/* List of all input files. */
        $input = "";	/* List of all input features. */
        $output = "";	/* List of all output features. */
        $echos = "";	/* List arguments and their actual values. For sanity check of this generated script. All references to this variable can be removed once your web service is working as intended. */
        $Ifacet_seg_tokF = "";	/* Input with type of content segments (sætningssegmenter) and tokens (tokens) */
        $IfacetetcF = "";	/* Input with type of content structured text (struktureret tekst) */
        $IfacetlemF = "";	/* Input with type of content lemmas (lemmaer) */
        $IfacetmrfF = "";	/* Input with type of content morphological features (morfologiske træk) */
        $IfacetnerF = "";	/* Input with type of content name entities (navne) */
        $IfacetposF = "";	/* Input with type of content PoS-tags (PoS-tags) */
        $IfacetsegF = "";	/* Input with type of content segments (sætningssegmenter) */
        $IfacetstxF = "";	/* Input with type of content syntax (dependency structure) (syntaks (dependensstruktur)) */
        $IfacettokF = "";	/* Input with type of content tokens (tokens) */
        $Iambigpru = false;	/* Ambiguity in input is pruned (beskåret) if true */
        $Iambiguna = false;	/* Ambiguity in input is unambiguous (utvetydig) if true */
        $Iappnrm = false;	/* Appearance in input is normalised (normaliseret) if true */
        $Iappunn = false;	/* Appearance in input is unnormalised (ikke-normaliseret) if true */
        $Ifacet_seg_tok = false;	/* Type of content in input is segments (sætningssegmenter) and tokens (tokens) if true */
        $Ifacetetc = false;	/* Type of content in input is structured text (struktureret tekst) if true */
        $Ifacetlem = false;	/* Type of content in input is lemmas (lemmaer) if true */
        $Ifacetmrf = false;	/* Type of content in input is morphological features (morfologiske træk) if true */
        $Ifacetner = false;	/* Type of content in input is name entities (navne) if true */
        $Ifacetpos = false;	/* Type of content in input is PoS-tags (PoS-tags) if true */
        $Ifacetseg = false;	/* Type of content in input is segments (sætningssegmenter) if true */
        $Ifacetstx = false;	/* Type of content in input is syntax (dependency structure) (syntaks (dependensstruktur)) if true */
        $Ifacettok = false;	/* Type of content in input is tokens (tokens) if true */
        $Iformatteip5 = false;	/* Format in input is TEIP5 if true */
        $Ilanggml = false;	/* Language in input is Middle Low German (middelnedertysk) if true */
        $Ipressof = false;	/* Assemblage in input is standoff annotations if true */
        $Oambigpru = false;	/* Ambiguity in output is pruned (beskåret) if true */
        $Oambiguna = false;	/* Ambiguity in output is unambiguous (utvetydig) if true */
        $Oappnrm = false;	/* Appearance in output is normalised (normaliseret) if true */
        $Oappunn = false;	/* Appearance in output is unnormalised (ikke-normaliseret) if true */
        $Ofacetlem = false;	/* Type of content in output is lemmas (lemmaer) if true */
        $Ofacetmrf = false;	/* Type of content in output is morphological features (morfologiske træk) if true */
        $Ofacetner = false;	/* Type of content in output is name entities (navne) if true */
        $Ofacetpos = false;	/* Type of content in output is PoS-tags (PoS-tags) if true */
        $Ofacetseg = false;	/* Type of content in output is segments (sætningssegmenter) if true */
        $Ofacetstx = false;	/* Type of content in output is syntax (dependency structure) (syntaks (dependensstruktur)) if true */
        $Ofacettok = false;	/* Type of content in output is tokens (tokens) if true */
        $Oformatteip5 = false;	/* Format in output is TEIP5 if true */
        $Olanggml = false;	/* Language in output is Middle Low German (middelnedertysk) if true */
        $Opresinl = false;	/* Assemblage in output is inline annotations if true */
        $IfacetposHiNTS = false;	/* Style of type of content PoS-tags (PoS-tags) in input is HiNTS (Historisches-Niederdeutsch-Tagset) if true */
        $IfacetposUni = false;	/* Style of type of content PoS-tags (PoS-tags) in input is Universal Part-of-Speech Tagset if true */
        $OfacetposHiNTS = false;	/* Style of type of content PoS-tags (PoS-tags) in output is HiNTS (Historisches-Niederdeutsch-Tagset) if true */
        $OfacetposUni = false;	/* Style of type of content PoS-tags (PoS-tags) in output is Universal Part-of-Speech Tagset if true */

        if( hasArgument("base") )
            {
            $base = getArgument("base");
            }
        if( hasArgument("job") )
            {
            $job = getArgument("job");
            }
        if( hasArgument("post2") )
            {
            $post2 = getArgument("post2");
            }
        if( hasArgument("mode") )
            {
            $mode = getArgument("mode");
            }
        $echos = "base=$base job=$job post2=$post2 mode=$mode ";

/*********
* input  *
*********/
        if( hasArgument("Ifacet_seg_tokF") )
            {
            $Ifacet_seg_tokF = requestFile("Ifacet_seg_tokF");
            if($Ifacet_seg_tokF === '')
                {
                header("HTTP/1.0 404 Input with type of content 'segments (sætningssegmenter) and tokens (tokens)' not found (Ifacet_seg_tokF parameter). ");
                return;
                }
            $echos = $echos . "Ifacet_seg_tokF=$Ifacet_seg_tokF ";
            $inputF = $inputF . " \$Ifacet_seg_tokF ";
            }
        if( hasArgument("IfacetetcF") )
            {
            $IfacetetcF = requestFile("IfacetetcF");
            if($IfacetetcF === '')
                {
                header("HTTP/1.0 404 Input with type of content 'structured text (struktureret tekst)' not found (IfacetetcF parameter). ");
                return;
                }
            $echos = $echos . "IfacetetcF=$IfacetetcF ";
            $inputF = $inputF . " \$IfacetetcF ";
            }
        if( hasArgument("IfacetlemF") )
            {
            $IfacetlemF = requestFile("IfacetlemF");
            if($IfacetlemF === '')
                {
                header("HTTP/1.0 404 Input with type of content 'lemmas (lemmaer)' not found (IfacetlemF parameter). ");
                return;
                }
            $echos = $echos . "IfacetlemF=$IfacetlemF ";
            $inputF = $inputF . " \$IfacetlemF ";
            }
        if( hasArgument("IfacetmrfF") )
            {
            $IfacetmrfF = requestFile("IfacetmrfF");
            if($IfacetmrfF === '')
                {
                header("HTTP/1.0 404 Input with type of content 'morphological features (morfologiske træk)' not found (IfacetmrfF parameter). ");
                return;
                }
            $echos = $echos . "IfacetmrfF=$IfacetmrfF ";
            $inputF = $inputF . " \$IfacetmrfF ";
            }
        if( hasArgument("IfacetnerF") )
            {
            $IfacetnerF = requestFile("IfacetnerF");
            if($IfacetnerF === '')
                {
                header("HTTP/1.0 404 Input with type of content 'name entities (navne)' not found (IfacetnerF parameter). ");
                return;
                }
            $echos = $echos . "IfacetnerF=$IfacetnerF ";
            $inputF = $inputF . " \$IfacetnerF ";
            }
        if( hasArgument("IfacetposF") )
            {
            $IfacetposF = requestFile("IfacetposF");
            if($IfacetposF === '')
                {
                header("HTTP/1.0 404 Input with type of content 'PoS-tags (PoS-tags)' not found (IfacetposF parameter). ");
                return;
                }
            $echos = $echos . "IfacetposF=$IfacetposF ";
            $inputF = $inputF . " \$IfacetposF ";
            }
        if( hasArgument("IfacetsegF") )
            {
            $IfacetsegF = requestFile("IfacetsegF");
            if($IfacetsegF === '')
                {
                header("HTTP/1.0 404 Input with type of content 'segments (sætningssegmenter)' not found (IfacetsegF parameter). ");
                return;
                }
            $echos = $echos . "IfacetsegF=$IfacetsegF ";
            $inputF = $inputF . " \$IfacetsegF ";
            }
        if( hasArgument("IfacetstxF") )
            {
            $IfacetstxF = requestFile("IfacetstxF");
            if($IfacetstxF === '')
                {
                header("HTTP/1.0 404 Input with type of content 'syntax (dependency structure) (syntaks (dependensstruktur))' not found (IfacetstxF parameter). ");
                return;
                }
            $echos = $echos . "IfacetstxF=$IfacetstxF ";
            $inputF = $inputF . " \$IfacetstxF ";
            }
        if( hasArgument("IfacettokF") )
            {
            $IfacettokF = requestFile("IfacettokF");
            if($IfacettokF === '')
                {
                header("HTTP/1.0 404 Input with type of content 'tokens (tokens)' not found (IfacettokF parameter). ");
                return;
                }
            $echos = $echos . "IfacettokF=$IfacettokF ";
            $inputF = $inputF . " \$IfacettokF ";
            }

/************************
* input/output features *
************************/
        if( hasArgument("Iambig") )
            {
            $Iambigpru = existsArgumentWithValue("Iambig", "pru");
            $Iambiguna = existsArgumentWithValue("Iambig", "una");
            $echos = $echos . "Iambigpru=$Iambigpru " . "Iambiguna=$Iambiguna ";
            $input = $input . ($Iambigpru ? " \$Iambigpru" : "")  . ($Iambiguna ? " \$Iambiguna" : "") ;
            }
        if( hasArgument("Iapp") )
            {
            $Iappnrm = existsArgumentWithValue("Iapp", "nrm");
            $Iappunn = existsArgumentWithValue("Iapp", "unn");
            $echos = $echos . "Iappnrm=$Iappnrm " . "Iappunn=$Iappunn ";
            $input = $input . ($Iappnrm ? " \$Iappnrm" : "")  . ($Iappunn ? " \$Iappunn" : "") ;
            }
        if( hasArgument("Ifacet") )
            {
            $Ifacet_seg_tok = existsArgumentWithValue("Ifacet", "_seg_tok");
            $Ifacetetc = existsArgumentWithValue("Ifacet", "etc");
            $Ifacetlem = existsArgumentWithValue("Ifacet", "lem");
            $Ifacetmrf = existsArgumentWithValue("Ifacet", "mrf");
            $Ifacetner = existsArgumentWithValue("Ifacet", "ner");
            $Ifacetpos = existsArgumentWithValue("Ifacet", "pos");
            $Ifacetseg = existsArgumentWithValue("Ifacet", "seg");
            $Ifacetstx = existsArgumentWithValue("Ifacet", "stx");
            $Ifacettok = existsArgumentWithValue("Ifacet", "tok");
            $echos = $echos . "Ifacet_seg_tok=$Ifacet_seg_tok " . "Ifacetetc=$Ifacetetc " . "Ifacetlem=$Ifacetlem " . "Ifacetmrf=$Ifacetmrf " . "Ifacetner=$Ifacetner " . "Ifacetpos=$Ifacetpos " . "Ifacetseg=$Ifacetseg " . "Ifacetstx=$Ifacetstx " . "Ifacettok=$Ifacettok ";
            $input = $input . ($Ifacet_seg_tok ? " \$Ifacet_seg_tok" : "")  . ($Ifacetetc ? " \$Ifacetetc" : "")  . ($Ifacetlem ? " \$Ifacetlem" : "")  . ($Ifacetmrf ? " \$Ifacetmrf" : "")  . ($Ifacetner ? " \$Ifacetner" : "")  . ($Ifacetpos ? " \$Ifacetpos" : "")  . ($Ifacetseg ? " \$Ifacetseg" : "")  . ($Ifacetstx ? " \$Ifacetstx" : "")  . ($Ifacettok ? " \$Ifacettok" : "") ;
            }
        if( hasArgument("Iformat") )
            {
            $Iformatteip5 = existsArgumentWithValue("Iformat", "teip5");
            $echos = $echos . "Iformatteip5=$Iformatteip5 ";
            $input = $input . ($Iformatteip5 ? " \$Iformatteip5" : "") ;
            }
        if( hasArgument("Ilang") )
            {
            $Ilanggml = existsArgumentWithValue("Ilang", "gml");
            $echos = $echos . "Ilanggml=$Ilanggml ";
            $input = $input . ($Ilanggml ? " \$Ilanggml" : "") ;
            }
        if( hasArgument("Ipres") )
            {
            $Ipressof = existsArgumentWithValue("Ipres", "sof");
            $echos = $echos . "Ipressof=$Ipressof ";
            $input = $input . ($Ipressof ? " \$Ipressof" : "") ;
            }
        if( hasArgument("Oambig") )
            {
            $Oambigpru = existsArgumentWithValue("Oambig", "pru");
            $Oambiguna = existsArgumentWithValue("Oambig", "una");
            $echos = $echos . "Oambigpru=$Oambigpru " . "Oambiguna=$Oambiguna ";
            $output = $output . ($Oambigpru ? " \$Oambigpru" : "")  . ($Oambiguna ? " \$Oambiguna" : "") ;
            }
        if( hasArgument("Oapp") )
            {
            $Oappnrm = existsArgumentWithValue("Oapp", "nrm");
            $Oappunn = existsArgumentWithValue("Oapp", "unn");
            $echos = $echos . "Oappnrm=$Oappnrm " . "Oappunn=$Oappunn ";
            $output = $output . ($Oappnrm ? " \$Oappnrm" : "")  . ($Oappunn ? " \$Oappunn" : "") ;
            }
        if( hasArgument("Ofacet") )
            {
            $Ofacetlem = existsArgumentWithValue("Ofacet", "lem");
            $Ofacetmrf = existsArgumentWithValue("Ofacet", "mrf");
            $Ofacetner = existsArgumentWithValue("Ofacet", "ner");
            $Ofacetpos = existsArgumentWithValue("Ofacet", "pos");
            $Ofacetseg = existsArgumentWithValue("Ofacet", "seg");
            $Ofacetstx = existsArgumentWithValue("Ofacet", "stx");
            $Ofacettok = existsArgumentWithValue("Ofacet", "tok");
            $echos = $echos . "Ofacetlem=$Ofacetlem " . "Ofacetmrf=$Ofacetmrf " . "Ofacetner=$Ofacetner " . "Ofacetpos=$Ofacetpos " . "Ofacetseg=$Ofacetseg " . "Ofacetstx=$Ofacetstx " . "Ofacettok=$Ofacettok ";
            $output = $output . ($Ofacetlem ? " \$Ofacetlem" : "")  . ($Ofacetmrf ? " \$Ofacetmrf" : "")  . ($Ofacetner ? " \$Ofacetner" : "")  . ($Ofacetpos ? " \$Ofacetpos" : "")  . ($Ofacetseg ? " \$Ofacetseg" : "")  . ($Ofacetstx ? " \$Ofacetstx" : "")  . ($Ofacettok ? " \$Ofacettok" : "") ;
            }
        if( hasArgument("Oformat") )
            {
            $Oformatteip5 = existsArgumentWithValue("Oformat", "teip5");
            $echos = $echos . "Oformatteip5=$Oformatteip5 ";
            $output = $output . ($Oformatteip5 ? " \$Oformatteip5" : "") ;
            }
        if( hasArgument("Olang") )
            {
            $Olanggml = existsArgumentWithValue("Olang", "gml");
            $echos = $echos . "Olanggml=$Olanggml ";
            $output = $output . ($Olanggml ? " \$Olanggml" : "") ;
            }
        if( hasArgument("Opres") )
            {
            $Opresinl = existsArgumentWithValue("Opres", "inl");
            $echos = $echos . "Opresinl=$Opresinl ";
            $output = $output . ($Opresinl ? " \$Opresinl" : "") ;
            }

/*******************************
* input/output features styles *
*******************************/
        if( hasArgument("Ifacetpos") )
            {
            $IfacetposHiNTS = existsArgumentWithValue("Ifacetpos", "HiNTS");
            $IfacetposUni = existsArgumentWithValue("Ifacetpos", "Uni");
            $echos = $echos . "IfacetposHiNTS=$IfacetposHiNTS " . "IfacetposUni=$IfacetposUni ";
            $input = $input . ($IfacetposHiNTS ? " \$IfacetposHiNTS" : "")  . ($IfacetposUni ? " \$IfacetposUni" : "") ;
            }
        if( hasArgument("Ofacetpos") )
            {
            $OfacetposHiNTS = existsArgumentWithValue("Ofacetpos", "HiNTS");
            $OfacetposUni = existsArgumentWithValue("Ofacetpos", "Uni");
            $echos = $echos . "OfacetposHiNTS=$OfacetposHiNTS " . "OfacetposUni=$OfacetposUni ";
            $output = $output . ($OfacetposHiNTS ? " \$OfacetposHiNTS" : "")  . ($OfacetposUni ? " \$OfacetposUni" : "") ;
            }

/* DUMMY CODE TO SANITY CHECK GENERATED SCRIPT (TODO Remove one of the two solidi from the beginning of this line to activate your own code)
        $TEIannofile = tempFileName("TEIanno-results");
        $command = "echo $echos >> $TEIannofile";
        logit($command);

        if(($cmd = popen($command, "r")) == NULL)
            {
            throw new SystemExit(); // instead of exit()
            }

        while($read = fgets($cmd))
            {
            }

        pclose($cmd);
/*/
// YOUR CODE STARTS HERE.
//        TODO your code!
        logit("annotei");
        $TEIannofile = tempFileName("TEIanno-results");
        if($Ifacet_seg_tokF === "") 
            $Ifacet_seg_tokF = $IfacetetcF; // $Ifacet_seg_tokF (structure) is created by CoreNLP, together with segments and tokens separately

        $tagset = "\"*\"";
        if($OfacetposHiNTS)
            $tagset = "HiNTS";
        if($OfacetposUni)
            $tagset = "UPosTag";

        $command = "../bin/bracmat \"get'\\\"annotei.bra\\\"\" $tagset ";
        if($mode === 'dry')
            {
            $command .= "\$Ifacet_seg_tokF \$IfacettokF \$IfacetposF ";
            scripinit($inputF,$input,$output);
            $rms = " && rm \$TEIannofile && rm \$rawXML && rm \$Ifacet_seg_tokF && rm \$IfacettokF && rm \$IfacetposF && rm \$IfacetmrfF && rm \$IfacetlemF ";
            $xmllint = "&& xmllint --format --output \$TEIannofile \$rawXML ";
            if(  $Ofacetlem
              && $Ofacetmrf
              && $Ofacetner
              && $Ofacetpos
              && $Ofacetseg
              && $Ofacetstx
              && $Ofacettok
              )
                {
                logit("Ofacet lem-mrf-ner-pos-seg-stx-tok");
                $rmsa = " && rm \$IfacetsegF && rm \$IfacetstxF && rm \$IfacetnerF && rm \$IfacetmrfF";
                $command .= "\$IfacetmrfF \$IfacetlemF \$IfacetsegF \$IfacetstxF \$IfacetnerF";
                }
            else if(  $Ofacetlem
                   && $Ofacetmrf
                   && $Ofacetpos
                   && $Ofacetseg
                   && $Ofacetstx
                   && $Ofacettok
                   )
                {
                logit("Ofacet lem-mrf-pos-seg-stx-tok");
                $rmsa = " && rm \$IfacetsegF && rm \$IfacetstxF && rm \$IfacetmrfF";
                $command .= "\$IfacetmrfF \$IfacetlemF \$IfacetsegF \$IfacetstxF \"*\"";
                }
            else if(  $Ofacetlem
                   && $Ofacetmrf
                   && $Ofacetner
                   && $Ofacetpos
                   && $Ofacettok
                   )
                {
                logit("Ofacet lem-mrf-ner-pos-tok");
                $rmsa = " && rm \$IfacetnerF && rm \$IfacetmrfF";
                $command .= "\$IfacetmrfF \$IfacetlemF \"*\" \"*\" \$IfacetnerF";
                }
            else if(  $Ofacetlem
                   && $Ofacetmrf
                   && $Ofacetpos
                   && $Ofacettok
                   )
                {
                $rmsa = " && rm \$IfacetmrfF";
                logit("Ofacet lem-mrf-pos-tok");
                $command .= "\$IfacetmrfF \$IfacetlemF \"*\" \"*\" \"*\"";
                }
            else if(  $Ofacetlem
                   && $Ofacetpos
                   && $Ofacetseg
                   && $Ofacettok
                   )
                {
                $rmsa = "";
                logit("Ofacet lem-pos-seg-tok");
                $command .= "\"*\" \$IfacetlemF \"*\" \"*\" \"*\"";
                }
            $command .= " \$rawXML $xmllint && curl -v -F job=$job -F name=\$TEIannofile -F data=@\$TEIannofile $post2 $rms $rmsa > ../log/TEIanno.log 2>&1 &";
            scrip($command);

            $tmpf = fopen($TEIannofile,'r');

            if($tmpf)
                {
                while($line = fgets($tmpf))
                    {
                    print $line;
                    }
                fclose($tmpf);
                }

            if($dodelete)
                {
                foreach ($tobedeleted as $filename => $dot)
                    {
                    if($dot)
                        unlink($filename);
                    }
                unset($tobedeleted);
                }
            }
        else
            {
            $command .= " $Ifacet_seg_tokF $IfacettokF $IfacetposF ";
            logit("TEIANNO");
            $rawXML = tempFileName("TEIannofile-rawXML");
            $rms = " && rm $TEIannofile && rm $rawXML && rm $Ifacet_seg_tokF && rm $IfacettokF && rm $IfacetposF && rm $IfacetlemF ";
            $xmllint = "&& xmllint --format --output $TEIannofile $rawXML ";
//*
            copy($Ifacet_seg_tokF,"Ifacet_seg_tokF");
            copy($IfacettokF,"IfacettokF");
            copy($IfacetposF,"IfacetposF");
            copy($IfacetlemF,"IfacetlemF");
/*/
//*/
            if(  $Ofacetlem
              && $Ofacetmrf
              && $Ofacetner
              && $Ofacetpos
              && $Ofacetseg
              && $Ofacetstx
              && $Ofacettok
              )
                {
                logit("Ofacet lem-mrf-ner-pos-seg-stx-tok");
                $rmsa = " && rm $IfacetsegF && rm $IfacetstxF && rm $IfacetnerF && rm $IfacetmrfF";
//*
                copy($IfacetsegF,"IfacetsegF");
                copy($IfacetstxF,"IfacetstxF");
                copy($IfacetnerF,"IfacetnerF");
                copy($IfacetmrfF,"IfacetmrfF");
/*/
//*/
                $command .= "$IfacetmrfF $IfacetlemF $IfacetsegF $IfacetstxF $IfacetnerF";
                }
            else if(  $Ofacetlem
                   && $Ofacetmrf
                   && $Ofacetpos
                   && $Ofacetseg
                   && $Ofacetstx
                   && $Ofacettok
                   )
                {
                logit("Ofacet lem-mrf-pos-seg-stx-tok");
                $rmsa = " && rm $IfacetsegF && rm $IfacetstxF && rm $IfacetmrfF";
//*
                copy($IfacetsegF,"IfacetsegF");
                copy($IfacetstxF,"IfacetstxF");
                copy($IfacetmrfF,"IfacetmrfF");
/*/
//*/
                $command .= "$IfacetmrfF $IfacetlemF $IfacetsegF $IfacetstxF \"*\"";
                }
            else if(  $Ofacetlem
                   && $Ofacetmrf
                   && $Ofacetner
                   && $Ofacetpos
                   && $Ofacettok
                   )
                {
                logit("Ofacet lem-mrf-ner-pos-tok");
                $rmsa = " && rm $IfacetnerF && rm $IfacetmrfF";
//*
                copy($IfacetnerF,"IfacetnerF");
                copy($IfacetmrfF,"IfacetmrfF");
//*/
                $command .= "$IfacetmrfF $IfacetlemF \"*\" \"*\" $IfacetnerF";
                }
            else if(  $Ofacetlem
                   && $Ofacetmrf
                   && $Ofacetpos
                   && $Ofacettok
                   )
                {
                $rmsa = " && rm $IfacetmrfF";
                copy($IfacetmrfF,"IfacetmrfF");
                logit("Ofacet lem-mrf-pos-tok");
                $command .= "$IfacetmrfF $IfacetlemF \"*\" \"*\" \"*\"";
                }
            else if(  $Ofacetlem
                   && $Ofacetpos
                   && $Ofacetseg
                   && $Ofacettok
                   )
                {
                $rmsa = "";
                logit("Ofacet lem-pos-seg-tok");
                $command .= "\"*\" $IfacetlemF \"*\" \"*\" \"*\"";
                }
            $command .= " $rawXML $xmllint && curl -v -F job=$job -F name=$TEIannofile -F data=@$TEIannofile $post2 $rms $rmsa > ../log/TEIanno.log 2>&1 &";
            logit($command);
            exec($command);

            logit($command);
            logit('RETURN 202');
            header("HTTP/1.0 202 Accepted");
            }

// YOUR CODE ENDS HERE. OUTPUT EXPECTED IN $TEIannofile
//*/
        }
    loginit();
    do_TEIanno();
    }
catch (SystemExit $e)
    {
    header('HTTP/1.0 404 An error occurred: ' . $ERROR);
    logit('An error occurred' . $ERROR);
    echo $ERROR;
    }
?>
